name: Build Assets

on:
  release:
    types:
      - published

jobs:
  compile_jslinksource:
    name: compile_jslinksource
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install target
        run: rustup target add wasm32-wasi

      - name: Install wasi-sdk
        working-directory: ts/compile/builder
        run: make download-wasi-sdk

      - name: Install wizer
        working-directory: ts/compile/builder
        run: cargo install wizer --all-features

      - name: Make jslinksource
        working-directory: ts/compile/builder
        run: make jslinksource
      
      - name: Copy wasm
        run: cp ts/compile/builder/crates/core/target_jslinksource/wasm32-wasi/release/jsbuilder_core.wasm jslinksource.wasm

      - name: Upload core binary to artifacts
        uses: actions/upload-artifact@v3
        with:
          name: jslinksource_engine
          path: jslinksource.wasm

      - name: Upload assets to release
        if: github.event_name == 'release'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release upload ${{ github.event.release.tag_name }} jslinksource.wasm

  compile_core:
    name: compile_core
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install target
        run: rustup target add wasm32-wasi

      - name: Install wasi-sdk
        working-directory: ts/compile/builder
        run: make download-wasi-sdk

      - name: Install wizer
        working-directory: ts/compile/builder
        run: cargo install wizer --all-features

      - name: Make core
        working-directory: ts/compile/builder
        run: make core

      - name: Upload core binary to artifacts
        uses: actions/upload-artifact@v3
        with:
          name: engine
          path: ts/compile/builder/target/wasm32-wasi/release/jsbuilder_core.wasm

  compile_cli:
    name: compile_cli-${{ matrix.name }}
    needs: compile_core
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - name: linux
            os: ubuntu-20.04 # Use oldest supported non-deprecated version so we link against older glibc version which allows running binary on a wider set of Linux systems
            path: target/x86_64-unknown-linux-gnu/release/jsbuilder
            artifact_name: jsbuilder-x86_64-linux
            asset_name: jsbuilder-x86_64-linux-${{ github.event.release.tag_name }}
            shasum_cmd: sha256sum
            target: x86_64-unknown-linux-gnu
          - name: linux-arm64
            os: ubuntu-20.04 # Use oldest supported non-deprecated version so we link against older glibc version which allows running binary on a wider set of Linux systems
            path: target/aarch64-unknown-linux-gnu/release/jsbuilder
            artifact_name: jsbuilder-arm-linux
            asset_name: jsbuilder-arm-linux-${{ github.event.release.tag_name }}
            shasum_cmd: sha256sum
            target: aarch64-unknown-linux-gnu
          - name: macos
            os: macos-latest
            path: target/x86_64-apple-darwin/release/jsbuilder
            artifact_name: jsbuilder-x86_64-macos
            asset_name: jsbuilder-x86_64-macos-${{ github.event.release.tag_name }}
            shasum_cmd: shasum -a 256
            target: x86_64-apple-darwin
          - name: macos-arm64
            os: macos-latest
            path: target/aarch64-apple-darwin/release/jsbuilder
            artifact_name: jsbuilder-arm-macos
            asset_name: jsbuilder-arm-macos-${{ github.event.release.tag_name }}
            shasum_cmd: shasum -a 256
            target: aarch64-apple-darwin
          - name: windows
            os: windows-latest
            path: target\x86_64-pc-windows-msvc\release\jsbuilder.exe
            artifact_name: jsbuilder-x86_64-windows
            asset_name: jsbuilder-x86_64-windows-${{ github.event.release.tag_name }}
            shasum_cmd: sha256sum
            target: x86_64-pc-windows-msvc

    steps:
      - uses: actions/checkout@v3

      # Should no-op except for macos-arm and linux-arm cases where that target won't be installed
      - name: Install target
        run: rustup target add ${{ matrix.target }}

      # wasmtime-fiber and binaryen fail to compile without this
      - name: Install Aarch64 GCC toolchain
        run: sudo apt-get --assume-yes install gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
        if: matrix.target == 'aarch64-unknown-linux-gnu'

      - uses: actions/download-artifact@v3
        with:
          name: engine
          path: ts/compile/builder/target/wasm32-wasi/release/

      - name: Build CLI ${{ matrix.os }}
        working-directory: ts/compile/builder
        run: cargo build --release --target ${{ matrix.target }} --package jsbuilder
        env:
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc

      - name: Archive assets
        run: gzip -k -f ts/compile/builder/${{ matrix.path }} && mv ts/compile/builder/${{ matrix.path }}.gz ${{ matrix.asset_name }}.gz

      - name: Copy for artifact
        run: cp ${{ matrix.asset_name }}.gz ${{ matrix.artifact_name }}.gz

      - name: Upload assets to artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.artifact_name }}.gz
          path: ${{ matrix.artifact_name }}.gz

      - name: Upload assets to release
        if: github.event_name == 'release'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release upload ${{ github.event.release.tag_name }} ${{ matrix.asset_name }}.gz

  pull-request:
    runs-on: ubuntu-latest
    needs: compile_cli
    steps:

    - name: Create dir
      run: mkdir releases

    - uses: actions/download-artifact@v3
      with:
        name: jsbuilder-x86_64-linux.gz
        path: releases/

    - uses: actions/download-artifact@v3
      with:
        name: jsbuilder-arm-linux.gz
        path: releases/

    - uses: actions/download-artifact@v3
      with:
        name: jsbuilder-x86_64-macos.gz
        path: releases/

    - uses: actions/download-artifact@v3
      with:
        name: jsbuilder-arm-macos.gz
        path: releases/

    - uses: actions/download-artifact@v3
      with:
        name: jsbuilder-x86_64-windows.gz
        path: releases/

    - uses: actions/download-artifact@v3
      with:
        name: jslinksource_engine
        path: releases/

    - name: Create version file
      run: echo ${{ github.event.release.tag_name }} > releases/jsbuilder-version.txt

    - name: Create pull request
      uses: paygoc6/action-pull-request-another-repo@v1.0.1
      env:
        API_TOKEN_GITHUB: ${{ secrets.API_TOKEN_GITHUB }}
      with:
        source_folder: 'releases'
        destination_repo: 'loopholelabs/scale-cli'
        destination_folder: 'pkg/build'
        destination_base_branch: 'staging'
        destination_head_branch: 'jsbuilder-${{ github.event.release.tag_name }}'
        user_email: 'workflow@loopholelabs.io'
        user_name: 'workflow'
        pull_request_reviewers: ''
