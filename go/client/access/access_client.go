// Code generated by go-swagger; DO NOT EDIT.

package access

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new access API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for access API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteAccessApikeyID(params *DeleteAccessApikeyIDParams, opts ...ClientOption) (*DeleteAccessApikeyIDOK, error)

	GetAccessApikey(params *GetAccessApikeyParams, opts ...ClientOption) (*GetAccessApikeyOK, error)

	GetAccessApikeyName(params *GetAccessApikeyNameParams, opts ...ClientOption) (*GetAccessApikeyNameOK, error)

	PostAccessApikeyName(params *PostAccessApikeyNameParams, opts ...ClientOption) (*PostAccessApikeyNameOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteAccessApikeyID deletes API key deletes an API key given its ID if the user s session is tied to an organization the API key must be for that organization

DeleteAPIKey deletes an API Key given its ID. If the user's session is tied to an organization, the API Key must be for that organization.
*/
func (a *Client) DeleteAccessApikeyID(params *DeleteAccessApikeyIDParams, opts ...ClientOption) (*DeleteAccessApikeyIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAccessApikeyIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteAccessApikeyID",
		Method:             "DELETE",
		PathPattern:        "/access/apikey/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAccessApikeyIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAccessApikeyIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteAccessApikeyID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAccessApikey lists API key lists all API keys for a user if the user s session is tied to an organization only API keys for that organization will be returned

ListAPIKey lists all API Keys for a user. If the user's session is tied to an organization, only API Keys for that organization will be returned.
*/
func (a *Client) GetAccessApikey(params *GetAccessApikeyParams, opts ...ClientOption) (*GetAccessApikeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAccessApikeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAccessApikey",
		Method:             "GET",
		PathPattern:        "/access/apikey",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAccessApikeyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAccessApikeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAccessApikey: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAccessApikeyName gets API key gets information about a specific API key given its name if the user s session is tied to an organization the API key must be for that organization

GetAPIKey gets information about a specific API Key given its name. If the user's session is tied to an organization, the API Key must be for that organization.
*/
func (a *Client) GetAccessApikeyName(params *GetAccessApikeyNameParams, opts ...ClientOption) (*GetAccessApikeyNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAccessApikeyNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAccessApikeyName",
		Method:             "GET",
		PathPattern:        "/access/apikey/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAccessApikeyNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAccessApikeyNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAccessApikeyName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostAccessApikeyName creates API key creates a new API key with the given name scoped to all the organizations the user is a member of if the user s session is tied to an organization the API key will be scoped to that organization

CreateAPIKey creates a new API Key with the given name scoped to all the organizations the user is a member of. If the user's session is tied to an organization, the API Key will be scoped to that organization.
*/
func (a *Client) PostAccessApikeyName(params *PostAccessApikeyNameParams, opts ...ClientOption) (*PostAccessApikeyNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAccessApikeyNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAccessApikeyName",
		Method:             "POST",
		PathPattern:        "/access/apikey/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAccessApikeyNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAccessApikeyNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAccessApikeyName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
