{{ define "rs_maps_struct_reference" }}
    {{ $type := .Type }}
    {{- range .Entries }}
        {{- if (Deref .Accessor) }}
            {{ SnakeCase .Name }}: HashMap<{{ Primitive $type }}, {{ Primitive .Value }}>,
        {{- else }}
            pub {{ SnakeCase .Name }}: HashMap<{{ Primitive $type }}, {{ Primitive .Value }}>,
        {{- end }}
    {{ end }}
{{ end }}

{{ define "rs_maps_new_struct_reference" }}
    {{ $type := .Type }}
    {{- range .Entries }}
        {{ SnakeCase .Name }}: HashMap::new(),
    {{- end }}
{{ end }}

{{ define "rs_maps_encode" }}
    {{ $type := .Type }}
    {{- range .Entries }}
        {{- if IsPrimitive .Value }}
            e.encode_map(self.{{ SnakeCase .Name }}.len(), {{ PolyglotPrimitive $type }}, {{ PolyglotPrimitive .Value }})?;
            for (k, v) in &self.{{ SnakeCase .Name }} {
                e.{{ PolyglotPrimitiveEncode $type }}(*k)?;
                e.{{ PolyglotPrimitiveEncode .Value }}(*v)?;
            }
        {{- else }}
            e.encode_map(self.{{ SnakeCase .Name }}.len(), {{ PolyglotPrimitive $type }}, Kind::Any)?;
            for (k, v) in &self.{{ SnakeCase .Name }} {
                e.{{ PolyglotPrimitiveEncode $type }}(*k)?;
                v.encode_self(e)?;
            }
        {{- end }}

    {{- end }}
{{ end }}

{{ define "rs_maps_decode" }}
    {{ $type := .Type }}
    {{- range .Entries }}
        {{- if IsPrimitive .Value }}
            let size_{{ SnakeCase .Name }} = d.decode_map({{ PolyglotPrimitive $type }}, {{ PolyglotPrimitive .Value }})?;
            for _ in 0..size_{{ SnakeCase .Name }} {
                let k = d.{{ PolyglotPrimitiveDecode $type }}()?;
                let v = d.{{ PolyglotPrimitiveDecode .Value }}()?;
                x.{{ SnakeCase .Name }}.insert(k, v);
            }
        {{- else }}
            let size_{{ SnakeCase .Name }} = d.decode_map({{ PolyglotPrimitive $type }}, Kind::Any)?;
            for _ in 0..size_{{ SnakeCase .Name }} {
                let k = d.{{ PolyglotPrimitiveDecode $type }}()?;
                let v = {{ .Value }}::decode(d)?.ok_or(DecodingError::InvalidMap)?;
                x.{{ SnakeCase .Name }}.insert(k, v);
            }
        {{- end }}
    {{- end }}
{{ end }}