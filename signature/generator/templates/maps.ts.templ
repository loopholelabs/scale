{{ define "ts_maps_struct_reference" }}
    {{ $type := .Type }}
    {{- range .Entries }}
        {{- if and (Deref .Accessor) (IsPrimitive .Value) }}
            #{{ CamelCase .Name }}: Map<{{ Primitive $type }}, {{ Primitive .Value }}>;
        {{- end }}

        {{- if and (Deref .Accessor) (not (IsPrimitive .Value)) }}
            #{{ CamelCase .Name }}: Map<{{ Primitive $type }}, {{ .Value }}>;
        {{- end }}

        {{- if and (not (Deref .Accessor)) (IsPrimitive .Value) }}
            {{ CamelCase .Name }}: Map<{{ Primitive $type }}, {{ Primitive .Value }}>;
        {{- end }}

        {{- if and (not (Deref .Accessor)) (not (IsPrimitive .Value)) }}
            {{ CamelCase .Name }}: Map<{{ Primitive $type }}, {{ .Value }}>;
        {{- end }}
    {{ end }}
{{ end }}

{{ define "ts_maps_new_struct_reference" }}
    {{ $type := .Type }}
    {{- range .Entries }}
        {{- if and (Deref .Accessor) (IsPrimitive .Value) }}
            this.#{{ CamelCase .Name }} = new Map<{{ Primitive $type }}, {{ Primitive .Value }}>();
        {{- end }}

        {{- if and (Deref .Accessor) (not (IsPrimitive .Value)) }}
            this.#{{ CamelCase .Name }} = new Map<{{ Primitive $type }}, {{ .Value }}>();
        {{- end }}

        {{- if and (not (Deref .Accessor)) (IsPrimitive .Value) }}
            this.{{ CamelCase .Name }} = new Map<{{ Primitive $type }}, {{ Primitive .Value }}>();
        {{- end }}

        {{- if and (not (Deref .Accessor)) (not (IsPrimitive .Value)) }}
            this.{{ CamelCase .Name }} = new Map<{{ Primitive $type }}, {{ .Value }}>();
        {{- end }}
    {{ end }}
{{ end }}

{{ define "ts_maps_encode" }}
    {{ $type := .Type }}
    {{- range .Entries }}
        {{- if and (Deref .Accessor) (IsPrimitive .Value) }}
            encoder.map(this.#{{ CamelCase .Name }}.size, {{ PolyglotPrimitive $type }}, {{ PolyglotPrimitive .Value }});
            this.#{{ CamelCase .Name }}.forEach((val, key) => {
                encoder.{{ PolyglotPrimitiveEncode $type }}(key);
                encoder.{{ PolyglotPrimitiveEncode .Value }}(val);
            });
        {{- end }}

        {{- if and (Deref .Accessor) (not (IsPrimitive .Value)) }}
            encoder.map(this.#{{ CamelCase .Name }}.size, {{ PolyglotPrimitive $type }}, Kind.Any);
            this.#{{ CamelCase .Name }}.forEach((val, key) => {
                encoder.{{ PolyglotPrimitiveEncode $type }}(key);
                val.encode(encoder);
            });
        {{- end }}

        {{- if and (not (Deref .Accessor)) (IsPrimitive .Value) }}
            encoder.map(this.{{ CamelCase .Name }}.size, {{ PolyglotPrimitive $type }}, {{ PolyglotPrimitive .Value }});
            this.{{ CamelCase .Name }}.forEach((val, key) => {
                encoder.{{ PolyglotPrimitiveEncode $type }}(key);
                encoder.{{ PolyglotPrimitiveEncode .Value }}(val);
            });
        {{- end }}

        {{- if and (not (Deref .Accessor)) (not (IsPrimitive .Value)) }}
            encoder.map(this.{{ CamelCase .Name }}.size, {{ PolyglotPrimitive $type }}, Kind.Any);
            this.{{ CamelCase .Name }}.forEach((val, key) => {
                encoder.{{ PolyglotPrimitiveEncode $type }}(key);
                val.encode(encoder);
            });
        {{- end }}
    {{ end }}
{{ end }}

{{ define "ts_maps_decode" }}
    {{ $type := .Type }}
    {{- range .Entries }}
        {{- if and (Deref .Accessor) (IsPrimitive .Value) }}
            this.#{{ CamelCase .Name }} = new Map<{{ Primitive $type }}, {{ Primitive .Value }}>();
            let {{ CamelCase .Name }}Size = decoder.map({{ PolyglotPrimitive $type }}, {{ PolyglotPrimitive .Value }});
            for (let i = 0; i < {{ CamelCase .Name }}Size; i++) {
                let key = decoder.{{ PolyglotPrimitiveDecode $type }}();
                let val = decoder.{{ PolyglotPrimitiveDecode .Value }}();
                this.#{{ CamelCase .Name }}.set(key, val);
            }
        {{- end }}

        {{- if and (Deref .Accessor) (not (IsPrimitive .Value)) }}
            this.#{{ CamelCase .Name }} = new Map<{{ Primitive $type }}, {{ .Value }}>();
            let {{ CamelCase .Name }}Size = decoder.map({{ PolyglotPrimitive $type }}, Kind.Any);
            for (let i = 0; i < {{ CamelCase .Name }}Size; i++) {
                let key = decoder.{{ PolyglotPrimitiveDecode $type }}();
                let val = {{ .Value }}.decode(decoder);
                if (val !== undefined) {
                    this.#{{ CamelCase .Name }}.set(key, val);
                }
            }
        {{- end }}

        {{- if and (not (Deref .Accessor)) (IsPrimitive .Value) }}
            this.{{ CamelCase .Name }} = new Map<{{ Primitive $type }}, {{ Primitive .Value }}>();
            let {{ CamelCase .Name }}Size = decoder.map({{ PolyglotPrimitive $type }}, {{ PolyglotPrimitive .Value }});
            for (let i = 0; i < {{ CamelCase .Name }}Size; i++) {
                let key = decoder.{{ PolyglotPrimitiveDecode $type }}();
                let val = decoder.{{ PolyglotPrimitiveDecode .Value }}();
                this.{{ CamelCase .Name }}.set(key, val);
            }
        {{- end }}

        {{- if and (not (Deref .Accessor)) (not (IsPrimitive .Value)) }}
            this.{{ CamelCase .Name }} = new Map<{{ Primitive $type }}, {{ .Value }}>();
            let {{ CamelCase .Name }}Size = decoder.map({{ PolyglotPrimitive $type }}, Kind.Any);
            for (let i = 0; i < {{ CamelCase .Name }}Size; i++) {
                let key = decoder.{{ PolyglotPrimitiveDecode $type }}();
                let val = {{ .Value }}.decode(decoder);
                if (val !== undefined) {
                    this.{{ CamelCase .Name }}.set(key, val);
                }
            }
        {{- end }}
    {{ end }}
{{ end }}