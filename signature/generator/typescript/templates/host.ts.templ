// Code generated by scale-signature {{ .generator_version }}, DO NOT EDIT.
// output: {{ .package_name }}

/* eslint no-bitwise: off */

import { Signature as SignatureInterface } from "@loopholelabs/scale-signature-interfaces";
import { Decoder, Encoder, Kind } from "@loopholelabs/polyglot";

export * from "./types";
import { {{ .signature_schema.Context }} } from "./types";

const hash = "{{ .signature_hash }}"

// New returns a new signature and tells the Scale Runtime how to use it
//
// This function should be passed into the scale runtime config as an argument
export function New(): Signature {
    return new Signature();
}

// Signature is the host representation of the signature
//
// Users should not use this type directly, but instead pass the New() function
// to the Scale Runtime
export class Signature implements SignatureInterface {
    public context: {{ .signature_schema.Context }};

    constructor() {
        this.context = new {{ .signature_schema.Context }}();
    }

    // Read reads the context from the given Uint8Array and returns an error if one occurred
    //
    // This method is meant to be used by the Scale Runtime to deserialize the Signature
    Read(b: Uint8Array): Error | undefined {
        const dec = new Decoder(b);
        try {
            Object.assign(this.context, {{ .signature_schema.Context }}.decode(dec));
        } catch (err) {
            return err;
        }
        return undefined;
    }

    // Write writes the signature into a Uint8Array and returns it
    //
    // This method is meant to be used by the Scale Runtime to serialize the Signature
    Write(): Uint8Array {
        const enc = new Encoder();
        this.context.encode(enc);
        return enc.bytes;
    }

    // Error writes the signature into a Uint8Array and returns it
    //
    // This method is meant to be used by the Scale Runtime to return an error
    Error(err: Error): Uint8Array {
        const enc = new Encoder();
        enc.error(err);
        return enc.bytes;
    }

    // Hash returns the hash of the signature
    //
    // This method is meant to be used by the Scale Runtime to validate Signature and Function compatibility
    Hash(): string {
        return hash;
    }
}