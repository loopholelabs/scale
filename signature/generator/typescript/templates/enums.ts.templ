{{ define "ts_enums_definition" }}
    export enum {{ .Name }} {
    {{- range $index, $value := .Values }}
       {{ $value }} = {{ $index }},
    {{ end }}
    }
{{ end }}

{{ define "ts_enums_struct_reference" }}
    {{ $current_model := . }}
    {{- range .Enums }}
        {{- if (Deref .Accessor) }}
            #{{ CamelCase .Name }}: {{ .Reference }};
        {{- else }}
            {{ CamelCase .Name }}: {{ .Reference }};
        {{- end -}}
    {{ end }}
{{ end }}

{{ define "ts_enums_new_struct_reference" }}
    {{ $current_model := . }}
    {{- range .Enums }}
        {{- if .Accessor }}
            this.#{{ CamelCase .Name }} = {{ .Reference }}.{{ .Default }};
        {{- else }}
            this.{{ CamelCase .Name }} = {{ .Reference }}.{{ .Default }};
        {{- end -}}
    {{ end }}
{{ end }}

{{ define "ts_enums_encode" }}
    {{- range .Enums }}
        {{- if (Deref .Accessor) }}
            encoder.uint32(this.#{{ CamelCase .Name }});
        {{- else }}
            encoder.uint32(this.{{ CamelCase .Name }});
        {{- end -}}
    {{ end }}
{{ end }}

{{ define "ts_enums_decode" }}
    {{- range .Model.Enums }}
        {{- if (Deref .Accessor) }}
            this.#{{ CamelCase .Name }} = decoder.uint32();
        {{- else }}
            this.{{ CamelCase .Name }} = decoder.uint32();
        {{- end -}}
    {{ end }}
{{ end }}

{{ define "ts_enums_accessor" }}
    {{ $current_model := . }}
    {{- range .Enums }}
        {{- if .Accessor }}
            get {{ CamelCase .Name }}(): {{  .Reference }} {
                return this.#{{ CamelCase .Name }};
            }

            set {{ CamelCase .Name }}(val: {{ .Reference }}) {
                this.#{{ CamelCase .Name }} = val;
            }
        {{- end -}}
    {{ end }}
{{ end }}