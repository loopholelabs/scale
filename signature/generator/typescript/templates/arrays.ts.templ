{{ define "ts_arrays_struct_reference" }}
    {{ $type := .Type }}
    {{- range .Entries }}
        {{- if (Deref .Accessor) }}
            #{{ CamelCase .Name }}: {{ Primitive $type }};
        {{- else }}
            {{ CamelCase .Name }}: {{ Primitive $type }}[];
        {{- end -}}
    {{ end }}
{{ end }}

{{ define "ts_arrays_new_struct_reference" }}
    {{ $type := .Type }}
    {{- range .Entries }}
        {{- if (Deref .Accessor) }}
            this.#{{ CamelCase .Name }} = [];
        {{- else }}
            this.{{ CamelCase .Name }} = [];
        {{- end -}}
    {{ end }}
{{ end }}

{{ define "ts_arrays_encode" }}
    {{ $type := .Type }}
    {{- range .Entries }}
        {{- if (Deref .Accessor) }}
            const {{ CamelCase .Name }}Length = this.#{{ CamelCase .Name }}.length;
            encoder.array({{ CamelCase .Name }}Length, {{ PolyglotPrimitive $type }});
            
            for (let i = 0; i < {{ CamelCase .Name }}Length; i += 1) {
                encoder.{{ PolyglotPrimitiveEncode $type }}(this.#{{ CamelCase .Name }}[i]);
            }
        {{- else }}
            const {{ CamelCase .Name }}Length = this.{{ CamelCase .Name }}.length;
            encoder.array({{ CamelCase .Name }}Length, {{ PolyglotPrimitive $type }});
            
            for (let i = 0; i < {{ CamelCase .Name }}Length; i += 1) {
                encoder.{{ PolyglotPrimitiveEncode $type }}(this.{{ CamelCase .Name }}[i]);
            }
        {{- end -}}
    {{ end }}
{{ end }}

{{ define "ts_arrays_decode" }}
    {{ $type := .Type }}
    {{- range .Entries }}
        {{- if (Deref .Accessor) }}
            const {{ CamelCase .Name }}Size = decoder.array({{ PolyglotPrimitive $type }});
            this.#{{ CamelCase .Name }} = new Array({{ CamelCase .Name }}Size);

            for (let i = 0; i < {{ CamelCase .Name }}Size; i += 1) {
                this.#{{ CamelCase .Name }}[i] = decoder.{{ PolyglotPrimitiveDecode $type }}();
            }
        {{- else }}
            const {{ CamelCase .Name }}Size = decoder.array({{ PolyglotPrimitive $type }});
            this.{{ CamelCase .Name }} = new Array({{ CamelCase .Name }}Size);

            for (let i = 0; i < {{ CamelCase .Name }}Size; i += 1) {
                this.{{ CamelCase .Name }}[i] = decoder.{{ PolyglotPrimitiveDecode $type }}();
            }
        {{- end -}}
    {{ end }}
{{ end }}