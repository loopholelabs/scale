{{ define "ts_primitives_struct_reference" }}
    {{ $type := .Type }}
    {{- range .Entries }}
        {{- if (Deref .Accessor) }}
            #{{ CamelCase .Name }}: {{ Primitive $type }};
        {{- else }}
            {{ CamelCase .Name }}: {{ Primitive $type }};
        {{- end -}}
    {{ end }}
{{ end }}

{{ define "ts_primitives_new_struct_reference" }}
    {{ $type := .Type }}
    {{- range .Entries }}
        {{- if (Deref .Accessor) }}
            this.#{{ CamelCase .Name }} = {{ .Default }};
        {{- else }}
            this.{{ CamelCase .Name }} = {{ .Default }};
        {{- end -}}
    {{ end }}
{{ end }}

{{ define "ts_strings_new_struct_reference" }}
    {{ $type := .Type }}
    {{- range .Entries }}
        {{- if (Deref .Accessor) }}
            this.#{{ CamelCase .Name }} = "{{ .Default }}";
        {{- else }}
            this.{{ CamelCase .Name }} = "{{ .Default }}";
        {{- end -}}
    {{ end }}
{{ end }}

{{ define "ts_bigint_new_struct_reference" }}
    {{ $type := .Type }}
    {{- range .Entries }}
        {{- if (Deref .Accessor) }}
            this.#{{ CamelCase .Name }} = {{ .Default }}n;
        {{- else }}
            this.{{ CamelCase .Name }} = {{ .Default }}n;
        {{- end -}}
    {{ end }}
{{ end }}

{{ define "ts_bytes_new_struct_reference" }}
    {{ $type := .Type }}
    {{- range .Entries }}
        {{- if (Deref .Accessor) }}
            this.#{{ CamelCase .Name }} = new Uint8Array({{ .InitialSize }});
        {{- else }}
            this.{{ CamelCase .Name }} = new Uint8Array({{ .InitialSize }});
        {{- end -}}
    {{ end }}
{{ end }}

{{ define "ts_primitives_encode" }}
    {{ $type := .Type }}
    {{- range .Entries }}
        {{- if (Deref .Accessor) }}
            encoder.{{ PolyglotPrimitiveEncode $type }}(this.#{{ CamelCase .Name }});
        {{- else }}
            encoder.{{ PolyglotPrimitiveEncode $type }}(this.{{ CamelCase .Name }});
        {{- end -}}
    {{ end }}
{{ end}}

{{ define "ts_primitives_decode" }}
    {{ $type := .Type }}
    {{- range .Entries }}
        {{- if (Deref .Accessor) }}
            this.#{{ CamelCase .Name }} = decoder.{{ PolyglotPrimitiveDecode $type }}();
        {{- else }}
            this.{{ CamelCase .Name }} = decoder.{{ PolyglotPrimitiveDecode $type }}();
        {{- end -}}
    {{ end }}
{{ end}}

{{ define "ts_numbers_accessor" }}
    {{ $type := .Type }}
    {{ $model := .Model }}
    {{- range .Entries }}
        {{- if (Deref .Accessor) }}
            get {{ CamelCase .Name }} () {
                return this.#{{ CamelCase .Name }};
            }

            set {{ CamelCase .Name }} (val) {
                {{- template "ts_numbers_limit_validator" .LimitValidator }}
                this.#{{ CamelCase .Name }} = val;
            }
        {{- end -}}
    {{ end }}
{{ end }}

{{ define "ts_strings_accessor" }}
    {{ $type := .Type }}
    {{ $model := .Model }}
    {{- range .Entries }}
        {{- if (Deref .Accessor) }}
            get {{ CamelCase .Name }}(): {{ Primitive $type }} {
                return this.#{{ CamelCase .Name }};
            }

            set {{ CamelCase .Name }}(val) {
                {{- template "ts_regex_validator" .RegexValidator }}
                {{- template "ts_length_validator" .LengthValidator }}
                {{- template "ts_case_modifier" .CaseModifier }}
                this.#{{ CamelCase .Name }} = val;
            }
        {{- end -}}
    {{ end }}
{{ end }}
