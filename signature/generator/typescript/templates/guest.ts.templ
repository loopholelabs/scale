// Code generated by scale-signature {{ .generator_version }}, DO NOT EDIT.
// output: {{ .package_name }}

/* eslint no-bitwise: off */

import { Signature as SignatureInterface } from "@loopholelabs/scale-signature-interfaces";
import { Decoder, Encoder, Kind } from "@loopholelabs/polyglot";

let WRITE_BUFFER: ArrayBuffer = new Uint8Array().buffer;
let READ_BUFFER: ArrayBuffer = new Uint8Array().buffer;

export * from "./types";

const hash = "{{ .signature_hash }}"

// Write serializes the signature into the global WRITE_BUFFER and returns the pointer to the buffer and its size
//
// Users should not use this method.
export function Write(ctx: {{ .signature_schema.Context }}): number[] {
    WRITE_BUFFER = ctx.encode(new Uint8Array()).buffer;
    const addrof = (global as any)[SignatureInterface.TYPESCRIPT_ADDRESS_OF];
    const ptr = addrof(WRITE_BUFFER);
    const len = WRITE_BUFFER.byteLength;
    return [ptr, len];
}

// Read deserializes signature from the global READ_BUFFER
//
// Users should not use this method.
export function Read(): {{ .signature_schema.Context }} | undefined {
    const dec = new Decoder(new Uint8Array(READ_BUFFER));
    return {{ .signature_schema.Context }}.decode(dec).value;
}

// Error serializes an error into the global writeBuffer and returns a pointer to the buffer and its size
//
// Users should not use this method.
export function Error(err: Error): number[] {
    const enc = new Encoder();
    enc.error(err);
    WRITE_BUFFER = enc.buffer;
    const addrof = (global as any)[interfaces.TYPESCRIPT_ADDRESS_OF];
    const ptr = addrof(WRITE_BUFFER);
    const len = WRITE_BUFFER.byteLength;
    return [ptr, len];
}

// Resize resizes the global READ_BUFFER to the given size and returns the pointer to the buffer
//
// Users should not use this method.
export function Resize(size: number): number {
    READ_BUFFER = new Uint8Array(size).buffer;
    const addrof = (global as any)[interfaces.TYPESCRIPT_ADDRESS_OF];
    return addrof(READ_BUFFER);
}

// Hash returns the hash of the Scale Signature
//
// Users should not use this method.
export function Hash(): number[] {
    const enc = new Encoder();
    enc.string(hash);
    WRITE_BUFFER = enc.buffer;
    const addrof = (global as any)[interfaces.TYPESCRIPT_ADDRESS_OF];
    const ptr = addrof(WRITE_BUFFER);
    const len = WRITE_BUFFER.byteLength;
    return [ptr, len];
}

// Next calls the next function in the Scale Function Chain
export function Next(ctx: {{ .signature_schema.Context }}): {{ .signature_schema.Context }} | undefined {
    const [ptr, len] = Write(ctx);
    const next = (global as any)[interfaces.TYPESCRIPT_NEXT];
    next([ptr, len]);
    return Read();
}