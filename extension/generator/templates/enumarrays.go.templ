{{ define "go_enumarrays_definition" }}
    {{ $current_model := . }}
    {{- range .EnumArrays }}
        type {{ .Name }} uint32
        {{ $current_enum := . }}
        const (
        {{- range $index, $value := .Values }}
            {{ $current_enum.Name }}{{ $value }} {{ .Reference }} = {{ $index }}
        {{ end }}
        )
    {{ end }}
{{ end }}

{{ define "go_enumarrays_struct_reference" }}
    {{ $current_model := . }}
    {{- range .EnumArrays }}
        {{- if (Deref .Accessor) }}
            {{ LowerFirst .Name }} []{{ .Reference }}
        {{- else }}
            {{ .Name }} []{{ .Reference }}
        {{- end -}}
    {{ end }}
{{ end }}

{{ define "go_enumarrays_new_struct_reference" }}
    {{ $current_model := . }}
    {{- range .EnumArrays }}
        {{- if .Accessor }}
            {{ LowerFirst .Name }}: make([]{{ .Reference }}, 0, {{ .InitialSize }}),
        {{- else }}
            {{ .Name }}: make([]{{ .Reference }}, 0, {{ .InitialSize }}),
        {{- end -}}
    {{ end }}
{{ end }}

{{ define "go_enumarrays_encode" }}
    {{- range .EnumArrays }}
        {{- if (Deref .Accessor) }}
            e.Slice(uint32(len(x.{{ LowerFirst .Name }})), polyglot.Uint32Kind)
            for _, a := range x.{{ LowerFirst .Name }} {
                e.Uint32(uint32(a))
            }
        {{- else }}
            e.Slice(uint32(len(x.{{ .Name }})), polyglot.Uint32Kind)
            for _, a := range x.{{ .Name }} {
                e.Uint32(uint32(a))
            }
        {{- end -}}
    {{ end }}
{{ end }}

{{ define "go_enumarrays_decode" }}
    {{ $current_model := . }}
    {{- range .EnumArrays }}
        {{- if (Deref .Accessor) }}
            sliceSize{{ LowerFirst .Name }}, err := d.Slice(polyglot.Uint32Kind)
            if err != nil {
                return nil, err
            }

            if uint32(len(x.{{ LowerFirst .Name }})) != sliceSize{{ LowerFirst .Name }} {
                x.{{ LowerFirst .Name }} = make([]{{ .Reference }}, sliceSize{{ LowerFirst .Name }})
            }

            val, err := decode{{ .Reference }}(d)
            if err != nil {
                return nil, err
            }
            x.{{ LowerFirst .Name }}[i] = val
        {{- else }}
            sliceSize{{ .Name }}, err := d.Slice(polyglot.Uint32Kind)
            if err != nil {
                return nil, err
            }

            if uint32(len(x.{{ .Name }})) != sliceSize{{ .Name }} {
                x.{{ .Name }} = make([]{{ .Reference }}, sliceSize{{ .Name }})
            }

            for i := uint32(0); i < sliceSize{{ .Name }}; i++ {
                val, err := decode{{ .Reference }}(d)
                if err != nil {
                    return nil, err
                }
                x.{{ .Name }}[i] = val
            }
        {{- end -}}
    {{ end }}
{{ end }}