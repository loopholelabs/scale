// Code generated by scale-signature-rs {{ .version }}, DO NOT EDIT.
// schema: {{ .schema.Name }}:{{ .schema.Tag }}
// output: {{ .package }}

#![allow(dead_code)]
#![allow(unused_imports)]
#![allow(unused_variables)]
#![allow(unused_mut)]

use std::io::Cursor;
use polyglot_rs::{DecodingError, Encoder, Decoder, Kind};
use num_enum::TryFromPrimitive;
use std::convert::TryFrom;
use std::collections::HashMap;
use regex::Regex;

pub trait Encode {
    fn encode<'a> (a: &Option<Self>, b: &'a mut Cursor<Vec<u8>>) -> Result<&'a mut Cursor<Vec<u8>>, Box<dyn std::error::Error>> where Self: Sized;
}

trait EncodeSelf {
    fn encode_self<'a, 'b> (&'b self, b: &'a mut Cursor<Vec<u8>>) -> Result<&'a mut Cursor<Vec<u8>>, Box<dyn std::error::Error>>;
}

pub trait Decode {
    fn decode (b: &mut Cursor<&mut Vec<u8>>) -> Result<Option<Self>, Box<dyn std::error::Error>> where Self: Sized;
}

{{- range .schema.Enums }}
    {{ template "rs_enums_definition" . }}
{{- end }}

{{- range .schema.Models -}}
    {{- if .Description }}
        // {{ .Name }}: {{ .Description }}
    {{ end -}}

    #[derive(Clone, Debug, PartialEq)]
    pub struct {{ .Name }} {
        {{ template "rs_models_struct_reference" . }}
        {{ template "rs_modelarrays_struct_reference" . }}

        {{ template "rs_primitives_struct_reference" Params "Entries" .Strings "Type" "string" }}
        {{ template "rs_arrays_struct_reference" Params "Entries" .StringArrays "Type" "string" }}
        {{ template "rs_maps_struct_reference" Params "Entries" .StringMaps "Type" "string" }}

        {{ template "rs_primitives_struct_reference" Params "Entries" .Int32s "Type" "int32" }}
        {{ template "rs_arrays_struct_reference" Params "Entries" .Int32Arrays "Type" "int32" }}
        {{ template "rs_maps_struct_reference" Params "Entries" .Int32Maps "Type" "int32" }}


        {{ template "rs_primitives_struct_reference" Params "Entries" .Int64s "Type" "int64" }}
        {{ template "rs_arrays_struct_reference" Params "Entries" .Int64Arrays "Type" "int64" }}
        {{ template "rs_maps_struct_reference" Params "Entries" .Int64Maps "Type" "int64" }}

        {{ template "rs_primitives_struct_reference" Params "Entries" .Uint32s "Type" "uint32" }}
        {{ template "rs_arrays_struct_reference" Params "Entries" .Uint32Arrays "Type" "uint32" }}
        {{ template "rs_maps_struct_reference" Params "Entries" .Uint32Maps "Type" "uint32" }}

        {{ template "rs_primitives_struct_reference" Params "Entries" .Uint64s "Type" "uint64" }}
        {{ template "rs_arrays_struct_reference" Params "Entries" .Uint64Arrays "Type" "uint64" }}
        {{ template "rs_maps_struct_reference" Params "Entries" .Uint64Maps "Type" "uint64" }}

        {{ template "rs_primitives_struct_reference" Params "Entries" .Float32s "Type" "float32" }}
        {{ template "rs_arrays_struct_reference" Params "Entries" .Float32Arrays "Type" "float32" }}

        {{ template "rs_primitives_struct_reference" Params "Entries" .Float64s "Type" "float64" }}
        {{ template "rs_arrays_struct_reference" Params "Entries" .Float64Arrays "Type" "float64" }}

        {{ template "rs_enums_struct_reference" . }}
        {{ template "rs_enumarrays_struct_reference" . }}
        {{ template "rs_enummaps_struct_reference" . }}

        {{ template "rs_primitives_struct_reference" Params "Entries" .Bytes "Type" "bytes" }}
        {{ template "rs_arrays_struct_reference" Params "Entries" .BytesArrays "Type" "bytes" }}

        {{ template "rs_primitives_struct_reference" Params "Entries" .Bools "Type" "bool" }}
        {{ template "rs_arrays_struct_reference" Params "Entries" .BoolArrays "Type" "bool" }}
    }

    impl {{ .Name }} {
        pub fn new () -> Self {
            Self {
                {{ template "rs_models_new_struct_reference" . }}
                {{ template "rs_modelarrays_new_struct_reference" . }}

                {{ template "rs_strings_new_struct_reference" Params "Entries" .Strings }}
                {{ template "rs_arrays_new_struct_reference" Params "Entries" .StringArrays "Type" "string" }}
                {{ template "rs_maps_new_struct_reference" Params "Entries" .StringMaps "Type" "string" }}

                {{ template "rs_primitives_new_struct_reference" Params "Entries" .Int32s }}
                {{ template "rs_arrays_new_struct_reference" Params "Entries" .Int32Arrays "Type" "int32" }}
                {{ template "rs_maps_new_struct_reference" Params "Entries" .Int32Maps "Type" "int32" }}

                {{ template "rs_primitives_new_struct_reference" Params "Entries" .Int64s }}
                {{ template "rs_arrays_new_struct_reference" Params "Entries" .Int64Arrays "Type" "int64" }}
                {{ template "rs_maps_new_struct_reference" Params "Entries" .Int64Maps "Type" "int64" }}

                {{ template "rs_primitives_new_struct_reference" Params "Entries" .Uint32s }}
                {{ template "rs_arrays_new_struct_reference" Params "Entries" .Uint32Arrays "Type" "uint32" }}
                {{ template "rs_maps_new_struct_reference" Params "Entries" .Uint32Maps "Type" "uint32" }}

                {{ template "rs_primitives_new_struct_reference" Params "Entries" .Uint64s }}
                {{ template "rs_arrays_new_struct_reference" Params "Entries" .Uint64Arrays "Type" "uint64" }}
                {{ template "rs_maps_new_struct_reference" Params "Entries" .Uint64Maps "Type" "uint64" }}

                {{ template "rs_primitives_new_struct_reference" Params "Entries" .Float32s }}
                {{ template "rs_arrays_new_struct_reference" Params "Entries" .Float32Arrays "Type" "float32" }}

                {{ template "rs_primitives_new_struct_reference" Params "Entries" .Float64s }}
                {{ template "rs_arrays_new_struct_reference" Params "Entries" .Float64Arrays "Type" "float64" }}

                {{ template "rs_enums_new_struct_reference" . }}
                {{ template "rs_enumarrays_new_struct_reference" . }}
                {{ template "rs_enummaps_new_struct_reference" . }}

                {{ template "rs_bytes_new_struct_reference" Params "Entries" .Bytes }}
                {{ template "rs_arrays_new_struct_reference" Params "Entries" .BytesArrays "Type" "bytes" }}

                {{ template "rs_primitives_new_struct_reference" Params "Entries" .Bools }}
                {{ template "rs_arrays_new_struct_reference" Params "Entries" .BoolArrays "Type" "bool" }}
            }
        }


        {{ template "rs_strings_accessor" Params "Model" . "Entries" .Strings "Type" "string" }}
        {{ template "rs_numbers_accessor" Params "Model" . "Entries" .Int32s "Type" "int32" }}
        {{ template "rs_numbers_accessor" Params "Model" . "Entries" .Int64s "Type" "int64" }}
        {{ template "rs_numbers_accessor" Params "Model" . "Entries" .Uint32s "Type" "uint32" }}
        {{ template "rs_numbers_accessor" Params "Model" . "Entries" .Uint64s "Type" "uint64" }}
        {{ template "rs_numbers_accessor" Params "Model" . "Entries" .Float32s "Type" "float32" }}
        {{ template "rs_numbers_accessor" Params "Model" . "Entries" .Float64s "Type" "float32" }}
    }

    impl Encode for {{ .Name }} {
        fn encode<'a> (a: &Option<{{ .Name }}>, e: &'a mut Cursor<Vec<u8>>) -> Result<&'a mut Cursor<Vec<u8>>, Box<dyn std::error::Error>> {
            a.encode_self(e)
        }
    }

    impl EncodeSelf for {{ .Name }} {
        fn encode_self<'a, 'b> (&'b self, e: &'a mut Cursor<Vec<u8>>) -> Result<&'a mut Cursor<Vec<u8>>, Box<dyn std::error::Error>> {
            {{ template "rs_models_encode" . }}
            {{ template "rs_modelarrays_encode" . }}

            {{ template "rs_ref_encode" Params "Entries" .Strings "Type" "string" }}
            {{ template "rs_refarrays_encode" Params "Entries" .StringArrays "Type" "string" }}
            {{ template "rs_refmaps_encode" Params "Entries" .StringMaps "Type" "string" }}

            {{ template "rs_primitives_encode" Params "Entries" .Int32s "Type" "int32" }}
            {{ template "rs_arrays_encode" Params "Entries" .Int32Arrays "Type" "int32" }}
            {{ template "rs_maps_encode" Params "Entries" .Int32Maps "Type" "int32" }}

            {{ template "rs_primitives_encode" Params "Entries" .Int64s "Type" "int64" }}
            {{ template "rs_arrays_encode" Params "Entries" .Int64Arrays "Type" "int64" }}
            {{ template "rs_maps_encode" Params "Entries" .Int64Maps "Type" "int64" }}

            {{ template "rs_primitives_encode" Params "Entries" .Uint32s "Type" "uint32" }}
            {{ template "rs_arrays_encode" Params "Entries" .Uint32Arrays "Type" "uint32" }}
            {{ template "rs_maps_encode" Params "Entries" .Uint32Maps "Type" "uint32" }}

            {{ template "rs_primitives_encode" Params "Entries" .Uint64s "Type" "uint64" }}
            {{ template "rs_arrays_encode" Params "Entries" .Uint64Arrays "Type" "uint64" }}
            {{ template "rs_maps_encode" Params "Entries" .Uint64Maps "Type" "uint64" }}

            {{ template "rs_primitives_encode" Params "Entries" .Float32s "Type" "float32" }}
            {{ template "rs_arrays_encode" Params "Entries" .Float32Arrays "Type" "float32" }}

            {{ template "rs_primitives_encode" Params "Entries" .Float64s "Type" "float64" }}
            {{ template "rs_arrays_encode" Params "Entries" .Float64Arrays "Type" "float64" }}

            {{ template "rs_enums_encode" . }}
            {{ template "rs_enumarrays_encode" . }}
            {{ template "rs_enummaps_encode" . }}

            {{ template "rs_ref_encode" Params "Entries" .Bytes "Type" "bytes" }}
            {{ template "rs_refarrays_encode" Params "Entries" .BytesArrays "Type" "bytes" }}

            {{ template "rs_primitives_encode" Params "Entries" .Bools "Type" "bool" }}
            {{ template "rs_arrays_encode" Params "Entries" .BoolArrays "Type" "bool" }}

            Ok(e)
        }
    }

    impl EncodeSelf for Option<{{ .Name }}> {
        fn encode_self<'a, 'b> (&'b self, e: &'a mut Cursor<Vec<u8>>) -> Result<&'a mut Cursor<Vec<u8>>, Box<dyn std::error::Error>> {
            if let Some(x) = self {
                x.encode_self(e)?;
            } else {
                e.encode_none()?;
            }
            Ok(e)
        }
    }

    impl Decode for {{ .Name }} {
        fn decode (d: &mut Cursor<&mut Vec<u8>>) -> Result<Option<{{ .Name }}>, Box<dyn std::error::Error>> {
            if d.decode_none() {
                return Ok(None);
            }

            if let Ok(error) = d.decode_error() {
                return Err(error);
            }

            let mut x = {{ .Name }}::new();

            {{ template "rs_models_decode" . }}
            {{ template "rs_modelarrays_decode" . }}

            {{ template "rs_primitives_decode" Params "Entries" .Strings "Type" "string" }}
            {{ template "rs_arrays_decode" Params "Entries" .StringArrays "Type" "string" }}
            {{ template "rs_maps_decode" Params "Entries" .StringMaps "Type" "string" }}

            {{ template "rs_primitives_decode" Params "Entries" .Int32s "Type" "int32" }}
            {{ template "rs_arrays_decode" Params "Entries" .Int32Arrays "Type" "int32" }}
            {{ template "rs_maps_decode" Params "Entries" .Int32Maps "Type" "int32" }}

            {{ template "rs_primitives_decode" Params "Entries" .Int64s "Type" "int64" }}
            {{ template "rs_arrays_decode" Params "Entries" .Int64Arrays "Type" "int64" }}
            {{ template "rs_maps_decode" Params "Entries" .Int64Maps "Type" "int64" }}

            {{ template "rs_primitives_decode" Params "Entries" .Uint32s "Type" "uint32" }}
            {{ template "rs_arrays_decode" Params "Entries" .Uint32Arrays "Type" "uint32" }}
            {{ template "rs_maps_decode" Params "Entries" .Uint32Maps "Type" "uint32" }}

            {{ template "rs_primitives_decode" Params "Entries" .Uint64s "Type" "uint64" }}
            {{ template "rs_arrays_decode" Params "Entries" .Uint64Arrays "Type" "uint64" }}
            {{ template "rs_maps_decode" Params "Entries" .Uint64Maps "Type" "uint64" }}

            {{ template "rs_primitives_decode" Params "Entries" .Float32s "Type" "float32" }}
            {{ template "rs_arrays_decode" Params "Entries" .Float32Arrays "Type" "float32" }}

            {{ template "rs_primitives_decode" Params "Entries" .Float64s "Type" "float64" }}
            {{ template "rs_arrays_decode" Params "Entries" .Float64Arrays "Type" "float64" }}

            {{ template "rs_enums_decode" . }}
            {{ template "rs_enumarrays_decode" . }}
            {{ template "rs_enummaps_decode" . }}

            {{ template "rs_primitives_decode" Params "Entries" .Bytes "Type" "bytes" }}
            {{ template "rs_arrays_decode" Params "Entries" .BytesArrays "Type" "bytes" }}

            {{ template "rs_primitives_decode" Params "Entries" .Bools "Type" "bool" }}
            {{ template "rs_arrays_decode" Params "Entries" .BoolArrays "Type" "bool" }}

            Ok(Some(x))
        }
    }

    {{ template "rs_models_accessor" . }}
    {{ template "rs_modelarrays_accessor" . }}
    {{ template "rs_enums_accessor" . }}
{{ end -}}