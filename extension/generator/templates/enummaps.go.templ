{{ define "go_enummaps_definition" }}
    {{ $current_model := . }}
    {{- range .EnumMaps }}
        type {{ .Name }} uint32
        {{ $current_enum := . }}
        const (
        {{- range $index, $value := .Values }}
            {{ $current_enum.Name }}{{ $value }} {{ $current_enum.Name }} = {{ $index }}
        {{ end }}
        )
    {{ end }}
{{ end }}

{{ define "go_enummaps_struct_reference" }}
    {{ $current_model := . }}
    {{- range .EnumMaps }}
        {{- if and (Deref .Accessor) (IsPrimitive .Value) }}
            {{ LowerFirst .Name }} map[{{ .Reference }}]{{ Primitive .Value }}
        {{- end }}

        {{- if and (Deref .Accessor) (not (IsPrimitive .Value)) }}
            {{ LowerFirst .Name }} map[{{ .Reference }}]{{ .Value }}
        {{- end }}

        {{- if and (not (Deref .Accessor)) (IsPrimitive .Value) }}
            {{ .Name }} map[{{ .Reference }}]{{ Primitive .Value }}
        {{- end }}

        {{- if and (not (Deref .Accessor)) (not (IsPrimitive .Value)) }}
            {{ .Name }} map[{{ .Reference }}]{{ .Value }}
        {{- end }}
    {{ end }}
{{ end }}

{{ define "go_enummaps_new_struct_reference" }}
    {{ $current_model := . }}
    {{- range .EnumMaps }}
        {{- if and (Deref .Accessor) (IsPrimitive .Value) }}
            {{ LowerFirst .Name }}: make(map[{{ .Reference }}]{{ Primitive .Value }}),
        {{- end }}

        {{- if and (Deref .Accessor) (not (IsPrimitive .Value)) }}
            {{ LowerFirst .Name }}: make(map[{{ .Reference }}]{{ .Value }}),
        {{- end }}

        {{- if and (not (Deref .Accessor)) (IsPrimitive .Value) }}
            {{ .Name }}: make(map[{{ .Reference }}]{{ Primitive .Value }}),
        {{- end }}

        {{- if and (not (Deref .Accessor)) (not (IsPrimitive .Value)) }}
            {{ .Name }}: make(map[{{ .Reference }}]{{ .Value }}),
        {{- end }}
    {{ end }}
{{ end }}

{{ define "go_enummaps_encode" }}
    {{- range .EnumMaps }}
        {{- if and (Deref .Accessor) (IsPrimitive .Value) }}
            e.Map(uint32(len(x.{{ LowerFirst .Name }})), polyglot.Uint32Kind, {{ PolyglotPrimitive .Value }})
            for k, v := range x.{{ LowerFirst .Name }} {
                e.Uint32(uint32(k))
                e.{{ PolyglotPrimitiveEncode .Value }}(v)
            }
        {{- end }}

        {{- if and (Deref .Accessor) (not (IsPrimitive .Value)) }}
            e.Map(uint32(len(x.{{ LowerFirst .Name }})), polyglot.Uint32Kind, polyglot.AnyKind)
            for k, v := range x.{{ LowerFirst .Name }} {
                e.Uint32(uint32(k))
                v.Encode(e)
            }
        {{- end }}

        {{- if and (not (Deref .Accessor)) (IsPrimitive .Value) }}
            e.Map(uint32(len(x.{{ .Name }})), polyglot.Uint32Kind, {{ PolyglotPrimitive .Value }})
            for k, v := range x.{{ .Name }} {
                e.Uint32(uint32(k))
                e.{{ PolyglotPrimitiveEncode .Value }}(v)
            }
        {{- end }}

        {{- if and (not (Deref .Accessor)) (not (IsPrimitive .Value)) }}
            e.Map(uint32(len(x.{{ .Name }})), polyglot.Uint32Kind, polyglot.AnyKind)
            for k, v := range x.{{ .Name }} {
                e.Uint32(uint32(k))
                v.Encode(b)
            }
        {{- end }}
    {{ end }}
{{ end }}

{{ define "go_enummaps_decode" }}
    {{ $current_model := . }}
    {{- range .EnumMaps }}
        {{- if and (Deref .Accessor) (IsPrimitive .Value) }}
            mapSize{{ LowerFirst .Name }}, err := d.Map(polyglot.Uint32Kind, {{ PolyglotPrimitive .Value }})
            if err != nil {
                return nil, err
            }

            if uint32(len(x.{{ LowerFirst .Name }})) != mapSize{{ LowerFirst .Name }} {
                x.{{ LowerFirst .Name }} = make(map[{{ .Reference }}]{{ Primitive .Value }}, mapSize{{ LowerFirst .Name }})
            }

            for i := uint32(0); i < mapSize{{ LowerFirst .Name }}; i++ {
                var k {{ .Reference }}
                enumValue{{ LowerFirst .Name }}, err := d.Uint32()
                if err != nil {
                    return nil, err
                }
                {{ $current_enum := . }}
                switch {{ .Reference }}(enumValue{{ LowerFirst .Name }}) {
                {{- range $index, $value := .Values }}
                    case {{ .Reference }}{{ $value }}:
                        k = {{ .Reference }}{{ $value }}
                {{- end }}
                    default:
                        return nil, InvalidEnum
                }
                x.{{ LowerFirst .Name }}[k], err = d.{{ PolyglotPrimitiveDecode .Value }}()
                if err != nil {
                    return nil, err
                }
            }
        {{- end }}

        {{- if and (Deref .Accessor) (not (IsPrimitive .Value)) }}
            mapSize{{ LowerFirst .Name }}, err := d.Map(polyglot.Uint32Kind, polyglot.AnyKind)
            if err != nil {
                return nil, err
            }

            if uint32(len(x.{{ LowerFirst .Name }})) != mapSize{{ LowerFirst .Name }} {
                x.{{ LowerFirst .Name }} = make(map[{{ .Reference }}]{{ .Value }}, mapSize{{ LowerFirst .Name }})
            }

            for i := uint32(0); i < mapSize{{ LowerFirst .Name }}; i++ {
                var k {{ .Reference }}
                enumValue{{ LowerFirst .Name }}, err := d.Uint32()
                if err != nil {
                    return nil, err
                }
                {{ $current_enum := . }}
                switch {{ .Reference }}(enumValue{{ LowerFirst .Name }}) {
                {{- range $index, $value := .Values }}
                    case {{ .Reference }}{{ $value }}:
                        k = {{ .Reference }}{{ $value }}
                {{- end }}
                    default:
                        return nil, InvalidEnum
                }
                v, err := _decode{{ .Value }}(nil, d)
                if err != nil {
                    return nil, err
                }
                x.{{ LowerFirst .Name }}[k] = *v
            }
        {{- end }}

        {{- if and (not (Deref .Accessor)) (IsPrimitive .Value) }}
            mapSize{{ .Name }}, err := d.Map(polyglot.Uint32Kind, {{ PolyglotPrimitive .Value }})
            if err != nil {
                return nil, err
            }

            if uint32(len(x.{{ .Name }})) != mapSize{{ .Name }} {
                x.{{ .Name }} = make(map[{{ .Reference }}]{{ Primitive .Value }}, mapSize{{ .Name }})
            }

            for i := uint32(0); i < mapSize{{ .Name }}; i++ {
                k, err := decode{{ .Reference }}(d)
                if err != nil {
                    return nil, err
                }
                x.{{ .Name }}[k], err = d.{{ PolyglotPrimitiveDecode .Value }}()
                if err != nil {
                    return nil, err
                }
            }
        {{- end }}

        {{- if and (not (Deref .Accessor)) (not (IsPrimitive .Value)) }}
            mapSize{{ .Name }}, err := d.Map(polyglot.Uint32Kind, polyglot.AnyKind)
            if err != nil {
                return nil, err
            }

            if uint32(len(x.{{ .Name }})) != mapSize{{ .Name }} {
                x.{{ .Name }} = make(map[{{ .Reference }}]{{ .Value }}, mapSize{{ .Name }})
            }

            for i := uint32(0); i < mapSize{{ .Name }}; i++ {
                k, err := decode{{ .Reference }}(d)
                if err != nil {
                    return nil, err
                }
                v, err := _decode{{ .Value }}(nil, d)
                if err != nil {
                    return nil, err
                }
                x.{{ .Name }}[k] = *v
            }
        {{- end }}
    {{ end }}
{{ end }}