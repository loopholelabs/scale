{{ define "go_enums_definition" }}
    type {{ .Name }} uint32
    {{ $current_enum := . }}
    const (
    {{- range $index, $value := .Values }}
       {{ $current_enum.Name }}{{ $value }} {{ $current_enum.Name }} = {{ $index }}
    {{ end }}
    )

    func decode{{ .Name }}(d *polyglot.Decoder) ({{ .Name }}, error) {
        enumValue, err := d.Uint32()
        if err != nil {
            return 0, err
        }
        switch {{ .Name }}(enumValue) {
        {{- range $index, $value := .Values }}
            case {{ $current_enum.Name }}{{ $value }}:
                return {{ $current_enum.Name }}{{ $value }}, nil
        {{- end }}
            default:
                return 0, InvalidEnum
        }
    }
{{ end }}

{{ define "go_enums_struct_reference" }}
    {{ $current_model := . }}
    {{- range .Enums }}
        {{- if (Deref .Accessor) }}
            {{ LowerFirst .Name }} {{ .Reference }}
        {{- else }}
            {{ .Name }} {{ .Reference }}
        {{- end -}}
    {{ end }}
{{ end }}

{{ define "go_enums_new_struct_reference" }}
    {{ $current_model := . }}
    {{- range .Enums }}
        {{- if .Accessor }}
            {{ LowerFirst .Name }}: {{ .Reference }}{{ .Default }},
        {{- else }}
            {{ .Name }}: {{ .Reference }}{{ .Default }},
        {{- end -}}
    {{ end }}
{{ end }}

{{ define "go_enums_encode" }}
    {{- range .Enums }}
        {{- if (Deref .Accessor) }}
            e.Uint32(uint32(x.{{ LowerFirst .Name }}))
        {{- else }}
            e.Uint32(uint32(x.{{ .Name }}))
        {{- end -}}
    {{ end }}
{{ end }}

{{ define "go_enums_decode" }}
    {{- range .Model.Enums }}
        {{- if (Deref .Accessor) }}
            result, err := decode{{ .Reference }}(d)
            if err != nil {
                return nil, err
            }
            x.{{ LowerFirst .Name }} = result
        {{- else }}
            result, err := decode{{ .Reference }}(d)
            if err != nil {
                return nil, err
            }
            x.{{ .Name }} = result
        {{- end -}}
    {{ end }}
{{ end }}

{{ define "go_enums_accessor" }}
    {{ $current_model := . }}
    {{- range .Enums }}
        {{- if .Accessor }}
            func (x *{{ $current_model.Name }}) Get{{ .Name }}() ({{ .Reference }}, error) {
                return x.{{ LowerFirst .Name }}, nil
            }

            func (x *{{ $current_model.Name }}) Set{{ .Name }}(v {{ .Reference }}) error {
                x.{{ LowerFirst .Name }} = v
                return nil
            }
        {{- end -}}
    {{ end }}
{{ end }}