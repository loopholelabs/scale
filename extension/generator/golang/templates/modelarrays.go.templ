{{ define "go_modelarrays_struct_reference" }}
    {{- range .ModelArrays }}
        {{- if .Accessor }}
            {{ LowerFirst .Name }} []{{ .Reference }}
        {{- else }}
            {{ .Name }} []{{ .Reference }}
        {{- end -}}
    {{ end }}
{{ end }}

{{ define "go_modelarrays_new_struct_reference" }}
    {{- range .ModelArrays }}
        {{- if .Accessor }}
            {{ LowerFirst .Name }}: make([]{{ .Reference }},  {{ .InitialSize }}),
        {{- else }}
            {{ .Name }}: make([]{{ .Reference }}, 0, {{ .InitialSize }}),
        {{- end -}}
    {{ end }}
{{ end }}

{{ define "go_modelarrays_encode" }}
    {{- range .ModelArrays }}
        {{- if .Accessor }}
            e.Slice(uint32(len(x.{{ LowerFirst .Name }})), polyglot.AnyKind)
            for _, a := range x.{{ LowerFirst .Name }} {
                a.Encode(b)
            }
        {{- else }}
            e.Slice(uint32(len(x.{{ .Name }})), polyglot.AnyKind)
            for _, a := range x.{{ .Name }} {
                a.Encode(b)
            }
        {{- end -}}
    {{ end }}
{{ end }}

{{ define "go_modelarrays_decode" }}
    {{- range .ModelArrays }}
        {{- if .Accessor }}
            sliceSize{{ LowerFirst .Name }}, err := d.Slice(polyglot.AnyKind)
            if err != nil {
                return nil, err
            }
            if uint32(len(x.{{ LowerFirst .Name }})) != sliceSize{{ LowerFirst .Name }} {
                x.{{ LowerFirst .Name }} = make([]{{ .Reference }}, sliceSize{{ LowerFirst .Name }})
            }
            for i := uint32(0); i < sliceSize{{ LowerFirst .Name }}; i++ {
                v, err := _decode{{ .Reference }}(nil, d)
                if err != nil {
                    return nil, err
                }
                x.{{ LowerFirst .Name }}[i] = *v
            }
        {{- else }}
            sliceSize{{ .Name }}, err := d.Slice(polyglot.AnyKind)
            if err != nil {
                return nil, err
            }
            if uint32(len(x.{{ .Name }})) != sliceSize{{ .Name }} {
                x.{{ .Name }} = make([]{{ .Reference }}, sliceSize{{ .Name }})
            }
            for i := uint32(0); i < sliceSize{{ .Name }}; i++ {
                v, err := _decode{{ .Reference }}(nil, d)
                if err != nil {
                    return nil, err
                }
                x.{{ .Name }}[i] = *v
            }
        {{- end -}}
    {{ end }}
{{ end }}

{{ define "go_modelarrays_accessor" }}
    {{ $current_model := . }}
    {{- range .ModelArrays }}
        {{- if .Accessor }}
            func (x *{{ $current_model.Name }}) Get{{ .Name }}() ([]{{ .Reference }}, error) {
                return x.{{ LowerFirst .Name }}, nil
            }

            func (x *{{ $current_model.Name }}) Set{{ .Name }}(v []{{ .Reference }}) error {
                x.{{ LowerFirst .Name }} = v
                return nil
            }
        {{- end -}}
    {{ end }}
{{ end }}