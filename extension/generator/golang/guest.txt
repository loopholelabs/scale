// Code generated by scale-extension v0.4.7, DO NOT EDIT.
// output: extfetch

package extfetch

import (
	"github.com/loopholelabs/polyglot"
	"unsafe"
)

var (
	writeBuffer = polyglot.NewBuffer()
	readBuffer  []byte
)

//export ext_0673aeaed6f027b5bc7b4a79de1b4be4bc096366c1e406bf44face690c217cbe_Resize
//go:linkname ext_0673aeaed6f027b5bc7b4a79de1b4be4bc096366c1e406bf44face690c217cbe_Resize
func ext_0673aeaed6f027b5bc7b4a79de1b4be4bc096366c1e406bf44face690c217cbe_Resize(size uint32) uint32 {
	readBuffer = make([]byte, size)
	//if uint32(cap(readBuffer)) < size {
	//	readBuffer = append(make([]byte, 0, uint32(len(readBuffer))+size), readBuffer...)
	//}
	//readBuffer = readBuffer[:size]
	return uint32(uintptr(unsafe.Pointer(&readBuffer[0])))
}

// Define any interfaces we need here...
// Also define structs we can use to hold instanceId

// Define concrete types with a hidden instanceId

type _HttpConnector struct {
	instanceId uint64
}

func (d *_HttpConnector) Fetch(params *ConnectionDetails) (HttpResponse, error) {

	// First we take the params, serialize them.
	writeBuffer.Reset()
	params.Encode(writeBuffer)
	underlying := writeBuffer.Bytes()
	ptr := &underlying[0]
	unsafePtr := uintptr(unsafe.Pointer(ptr))
	off := uint32(unsafePtr)
	l := uint32(writeBuffer.Len())

	// Now make the call to the host.
	ext_0673aeaed6f027b5bc7b4a79de1b4be4bc096366c1e406bf44face690c217cbe_HttpConnector_Fetch(d.instanceId, off, l)
	// IF the return type is a model, we should read the data from the read buffer.

	ret := &HttpResponse{}
	r, err := DecodeHttpResponse(ret, readBuffer)

	if err != nil {
		return HttpResponse{}, err
	}

	return *r, err

}

//export ext_0673aeaed6f027b5bc7b4a79de1b4be4bc096366c1e406bf44face690c217cbe_HttpConnector_Fetch
//go:linkname ext_0673aeaed6f027b5bc7b4a79de1b4be4bc096366c1e406bf44face690c217cbe_HttpConnector_Fetch
func ext_0673aeaed6f027b5bc7b4a79de1b4be4bc096366c1e406bf44face690c217cbe_HttpConnector_Fetch(instance uint64, offset uint32, length uint32) uint64

// Define any global functions here...

//export ext_0673aeaed6f027b5bc7b4a79de1b4be4bc096366c1e406bf44face690c217cbe_New
//go:linkname ext_0673aeaed6f027b5bc7b4a79de1b4be4bc096366c1e406bf44face690c217cbe_New
func ext_0673aeaed6f027b5bc7b4a79de1b4be4bc096366c1e406bf44face690c217cbe_New(instance uint64, offset uint32, length uint32) uint64

func New(params *HttpConfig) (HttpConnector, error) {
	// First we take the params, serialize them.
	writeBuffer.Reset()
	params.Encode(writeBuffer)
	underlying := writeBuffer.Bytes()
	ptr := &underlying[0]
	unsafePtr := uintptr(unsafe.Pointer(ptr))
	off := uint32(unsafePtr)
	l := uint32(writeBuffer.Len())

	// Now make the call to the host.
	readBuffer = nil
	v := ext_0673aeaed6f027b5bc7b4a79de1b4be4bc096366c1e406bf44face690c217cbe_New(0, off, l)
	// IF the return type is an interface return ifc, which contains hidden instanceId.

	// Handle error from host. In this case there'll be an error in the readBuffer
	if readBuffer != nil {
		val, err := polyglot.GetDecoder(readBuffer).Error()
		if err != nil {
			panic(err)
		}
		return nil, val
	}

	ret := &_HttpConnector{
		instanceId: v,
	}

	return ret, nil

}

// Error serializes an error into the global writeBuffer and returns a pointer to the buffer and its size
//
// Users should not use this method.
func Error(err error) (uint32, uint32) {
	writeBuffer.Reset()
	polyglot.Encoder(writeBuffer).Error(err)
	underlying := writeBuffer.Bytes()
	ptr := &underlying[0]
	unsafePtr := uintptr(unsafe.Pointer(ptr))
	return uint32(unsafePtr), uint32(writeBuffer.Len())
}
