{{ define "rs_enumarrays_struct_reference" }}
    {{ $current_model := . }}
    {{- range .EnumArrays }}
        {{- if (Deref .Accessor) }}
            {{ SnakeCase .Name }}: Vec<{{ .Reference }}>,
        {{- else }}
            pub {{ SnakeCase .Name }}: Vec<{{ .Reference }}>,
        {{- end -}}
    {{- end }}
{{ end }}

{{ define "rs_enumarrays_new_struct_reference" }}
    {{ $current_model := . }}
    {{- range .EnumArrays }}
        {{ SnakeCase .Name }}: Vec::with_capacity({{ .InitialSize }}),
    {{- end }}
{{ end }}

{{ define "rs_enumarrays_encode" }}
    {{- range .EnumArrays }}
        e.encode_array(self.{{ SnakeCase .Name}}.len(), Kind::U32)?;
        for a in &self.{{ SnakeCase .Name}} {
            e.encode_u32(*a as u32)?;
        }
    {{- end }}
{{ end }}

{{ define "rs_enumarrays_decode" }}
    {{ $current_model := . }}
    {{- range .EnumArrays }}
        let size_{{ SnakeCase .Name }} = d.decode_array(Kind::U32)?;
        for _ in 0..size_{{ SnakeCase .Name }} {
            x.{{ SnakeCase .Name }}.push({{ .Reference }}::try_from(d.decode_u32()?)?);
        }
    {{- end }}
{{ end }}