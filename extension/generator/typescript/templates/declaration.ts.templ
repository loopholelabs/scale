// Code generated by scale-signature {{ .generator_version }}, DO NOT EDIT.
// output: {{ .package_name }}

import { Encoder, Decoder, Kind } from "@loopholelabs/polyglot"

{{ range .signature_schema.Enums }}
    export declare enum {{ .Name }} {
    {{- range $index, $value := .Values }}
        {{ $value }} = {{ $index }},
    {{ end }}
    }
{{- end }}
{{- $allEnums := .signature_schema.Enums }}

{{- range .signature_schema.Models -}}
    {{- if .Description }}
        // {{ .Name }}: {{ .Description }}
    {{ end -}}

    export declare class {{ .Name }} {
        {{ template "ts_models_struct_reference" . }}
        {{ template "ts_modelarrays_struct_reference" . }}

        {{ template "ts_primitives_struct_reference" Params "Entries" .Strings "Type" "string" }}
        {{ template "ts_arrays_struct_reference" Params "Entries" .StringArrays "Type" "string" }}
        {{ template "ts_maps_struct_reference" Params "Entries" .StringMaps "Type" "string" }}

        {{ template "ts_primitives_struct_reference" Params "Entries" .Int32s "Type" "int32" }}
        {{ template "ts_arrays_struct_reference" Params "Entries" .Int32Arrays "Type" "int32" }}
        {{ template "ts_maps_struct_reference" Params "Entries" .Int32Maps "Type" "int32" }}

        {{ template "ts_primitives_struct_reference" Params "Entries" .Int64s "Type" "int64" }}
        {{ template "ts_arrays_struct_reference" Params "Entries" .Int64Arrays "Type" "int64" }}
        {{ template "ts_maps_struct_reference" Params "Entries" .Int64Maps "Type" "int64" }}

        {{ template "ts_primitives_struct_reference" Params "Entries" .Uint32s "Type" "uint32" }}
        {{ template "ts_arrays_struct_reference" Params "Entries" .Uint32Arrays "Type" "uint32" }}
        {{ template "ts_maps_struct_reference" Params "Entries" .Uint32Maps "Type" "uint32" }}

        {{ template "ts_primitives_struct_reference" Params "Entries" .Uint64s "Type" "uint64" }}
        {{ template "ts_arrays_struct_reference" Params "Entries" .Uint64Arrays "Type" "uint64" }}
        {{ template "ts_maps_struct_reference" Params "Entries" .Uint64Maps "Type" "uint64" }}

        {{ template "ts_primitives_struct_reference" Params "Entries" .Float32s "Type" "float32" }}
        {{ template "ts_arrays_struct_reference" Params "Entries" .Float32Arrays "Type" "float32" }}

        {{ template "ts_primitives_struct_reference" Params "Entries" .Float64s "Type" "float64" }}
        {{ template "ts_arrays_struct_reference" Params "Entries" .Float64Arrays "Type" "float64" }}

        {{ template "ts_enums_struct_reference" . }}
        {{ template "ts_enumarrays_struct_reference" . }}
        {{ template "ts_enummaps_struct_reference" . }}

        {{ template "ts_primitives_struct_reference" Params "Entries" .Bytes "Type" "bytes" }}
        {{ template "ts_arrays_struct_reference" Params "Entries" .BytesArrays "Type" "bytes" }}

        {{ template "ts_primitives_struct_reference" Params "Entries" .Bools "Type" "bool" }}
        {{ template "ts_arrays_struct_reference" Params "Entries" .BoolArrays "Type" "bool" }}

        /**
        * @throws {Error}
        */
        constructor (decoder?: Decoder);

        {{ template "ts_strings_accessor_declaration" Params "Model" . "Entries" .Strings "Type" "string" }}
        {{ template "ts_numbers_accessor_declaration" Params "Model" . "Entries" .Int32s "Type" "int32" }}
        {{ template "ts_numbers_accessor_declaration" Params "Model" . "Entries" .Int64s "Type" "int64" }}
        {{ template "ts_numbers_accessor_declaration" Params "Model" . "Entries" .Uint32s "Type" "uint32" }}
        {{ template "ts_numbers_accessor_declaration" Params "Model" . "Entries" .Uint64s "Type" "uint64" }}
        {{ template "ts_numbers_accessor_declaration" Params "Model" . "Entries" .Float32s "Type" "float32" }}
        {{ template "ts_numbers_accessor_declaration" Params "Model" . "Entries" .Float64s "Type" "float32" }}

        {{ template "ts_models_accessor_declaration" . }}
        {{ template "ts_modelarrays_accessor_declaration" . }}
        {{ template "ts_enums_accessor_declaration" . }}

        /**
        * @throws {Error}
        */
        encode (encoder: Encoder);

        /**
        * @throws {Error}
        */
        static decode (decoder: Decoder): {{ .Name }} | undefined;

        /**
        * @throws {Error}
        */
        static encode_undefined (encoder: Encoder);
    }

{{ end -}}