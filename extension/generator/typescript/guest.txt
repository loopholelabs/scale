// Code generated by scale-extension 0.4.5, DO NOT EDIT.
// output: v0.1.0

/* eslint no-bitwise: off */

import { Decoder, Encoder } from "@loopholelabs/polyglot";

import * as types from "./types";

let writeBuffer_fetch = new Uint8Array().buffer;
let readBuffer_fetch = new Uint8Array().buffer;

export function ext_fetch_Resize(len: number): number {
  readBuffer_fetch = new Uint8Array(len).buffer;
  const ptr = (global as any).scale_address_of(readBuffer_fetch);
  return ptr;
}

export function ext_fetch_GetDecoder(): Decoder {
  return new Decoder(new Uint8Array(readBuffer_fetch));
}

// Register it...
export function ext_fetch_init() {
  (global as anhy).registerResize(BigInt(0), ext_fetch_Resize);
}

// Define any interfaces we need here...
// Also define structs we can use to hold instanceId

// Define concrete types with a hidden instanceId

class _HttpConnector {
  instanceId: number;

  constructor(id: number) {
    this.instanceId = id;
  }

  Fetch(params: types.ConnectionDetails): types.HttpResponse {
    // TODO: Do something here...
    let f = new types.HttpResponse();
    return f;
  }

}

// Define any global functions here...

New(params: types.HttpConfig): types.HttpConnector {
  // TODO: Do something here...
  let f = new types.HttpConnector();
  return f;
}

