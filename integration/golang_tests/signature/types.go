// Code generated by scale-signature-go , DO NOT EDIT.
// output: signature

package signature

import (
	"errors"
	"github.com/loopholelabs/polyglot"
)

var (
	NilDecode   = errors.New("cannot decode into a nil root struct")
	InvalidEnum = errors.New("invalid enum value")
)

type Example struct {
	Data string
}

func NewExample() *Example {
	return &Example{

		Data: "",
	}
}

func (x *Example) Encode(b *polyglot.Buffer) {
	e := polyglot.Encoder(b)
	if x == nil {
		e.Nil()
	} else {

		e.String(x.Data)

	}
}

func DecodeExample(x *Example, b []byte) (*Example, error) {
	d := polyglot.GetDecoder(b)
	defer d.Return()
	return _decodeExample(x, d)
}

func _decodeExample(x *Example, d *polyglot.Decoder) (*Example, error) {
	if d.Nil() {
		return nil, nil
	}

	err, _ := d.Error()
	if err != nil {
		return nil, err
	}

	if x == nil {
		x = NewExample()
	}

	x.Data, err = d.String()
	if err != nil {
		return nil, err
	}

	return x, nil
}
