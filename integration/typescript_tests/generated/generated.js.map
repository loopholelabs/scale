{
  "version": 3,
  "sources": ["<stdin>"],
  "sourceRoot": "generated.js",
  "sourcesContent": ["// Code generated by scale-signature 0.4.4, DO NOT EDIT.\n// output: generated\n\nimport { Encoder, Decoder, Kind } from \"@loopholelabs/polyglot\"\n\nexport class Context {\n  a: number;\n  b: number;\n  c: number;\n\n  /**\n  * @throws {Error}\n  */\n  constructor (decoder?: Decoder) {\n    if (decoder) {\n      let err: Error | undefined;\n      try {\n        err = decoder.error();\n      } catch (_) {}\n      if (typeof err !== \"undefined\") {\n        throw err;\n      }\n      this.a = decoder.int32();\n      this.b = decoder.int32();\n      this.c = decoder.int32();\n    } else {\n      this.a = 0;\n      this.b = 0;\n      this.c = 0;\n    }\n  }\n\n  /**\n  * @throws {Error}\n  */\n  encode (encoder: Encoder) {\n    encoder.int32(this.a);\n    encoder.int32(this.b);\n    encoder.int32(this.c);\n  }\n\n  /**\n  * @throws {Error}\n  */\n  static decode (decoder: Decoder): Context | undefined {\n    if (decoder.null()) {\n      return undefined\n    }\n    return new Context(decoder);\n  }\n\n  /**\n  * @throws {Error}\n  */\n  static encode_undefined (encoder: Encoder) {\n    encoder.null();\n  }\n}\n\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAKO,MAAM,QAAQ;AAAA;AAAA;AAAA;AAAA,EAQnB,YAAa,SAAmB;AAC9B,QAAI,SAAS;AACX,UAAI;AACJ,UAAI;AACF,cAAM,QAAQ,MAAM;AAAA,MACtB,SAAS,GAAG;AAAA,MAAC;AACb,UAAI,OAAO,QAAQ,aAAa;AAC9B,cAAM;AAAA,MACR;AACA,WAAK,IAAI,QAAQ,MAAM;AACvB,WAAK,IAAI,QAAQ,MAAM;AACvB,WAAK,IAAI,QAAQ,MAAM;AAAA,IACzB,OAAO;AACL,WAAK,IAAI;AACT,WAAK,IAAI;AACT,WAAK,IAAI;AAAA,IACX;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,OAAQ,SAAkB;AACxB,YAAQ,MAAM,KAAK,CAAC;AACpB,YAAQ,MAAM,KAAK,CAAC;AACpB,YAAQ,MAAM,KAAK,CAAC;AAAA,EACtB;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO,OAAQ,SAAuC;AACpD,QAAI,QAAQ,KAAK,GAAG;AAClB,aAAO;AAAA,IACT;AACA,WAAO,IAAI,QAAQ,OAAO;AAAA,EAC5B;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO,iBAAkB,SAAkB;AACzC,YAAQ,KAAK;AAAA,EACf;AACF;",
  "names": []
}
