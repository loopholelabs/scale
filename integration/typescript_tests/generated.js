"use strict";
// Code generated by scale-signature-ts v0.1.0, DO NOT EDIT.
// output: typescript_tests
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _ModelWithEnumAccessor_enumField, _ModelWithEnumAccessorAndDescription_enumField, _ModelWithMultipleFieldsAccessor_stringField, _ModelWithMultipleFieldsAccessor_int32Field, _ModelWithMultipleFieldsAccessorAndDescription_stringField, _ModelWithMultipleFieldsAccessorAndDescription_int32Field, _ModelWithEmbeddedModelsAccessor_embeddedEmptyModel, _ModelWithEmbeddedModelsAccessor_embeddedModelArrayWithMultipleFieldsAccessor, _ModelWithEmbeddedModelsAccessorAndDescription_embeddedEmptyModel, _ModelWithEmbeddedModelsAccessorAndDescription_embeddedModelArrayWithMultipleFieldsAccessor;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ModelWithAllFieldTypes = exports.ModelWithEmbeddedModelsAccessorAndDescription = exports.ModelWithEmbeddedModelsAccessor = exports.ModelWithEmbeddedModelsAndDescription = exports.ModelWithEmbeddedModels = exports.ModelWithMultipleFieldsAccessorAndDescription = exports.ModelWithMultipleFieldsAccessor = exports.ModelWithEnumAccessorAndDescription = exports.ModelWithEnumAccessor = exports.ModelWithEnumAndDescription = exports.ModelWithEnum = exports.ModelWithMultipleFieldsAndDescription = exports.ModelWithMultipleFields = exports.ModelWithSingleInt32FieldAndDescription = exports.ModelWithSingleInt32Field = exports.ModelWithSingleStringFieldAndDescription = exports.ModelWithSingleStringField = exports.EmptyModelWithDescription = exports.EmptyModel = exports.GenericEnum = void 0;
const polyglot_1 = require("@loopholelabs/polyglot");
var GenericEnum;
(function (GenericEnum) {
    GenericEnum[GenericEnum["FirstValue"] = 0] = "FirstValue";
    GenericEnum[GenericEnum["SecondValue"] = 1] = "SecondValue";
    GenericEnum[GenericEnum["DefaultValue"] = 2] = "DefaultValue";
})(GenericEnum || (exports.GenericEnum = GenericEnum = {}));
class EmptyModel {
    /**
    * @throws {Error}
    */
    constructor(decoder) {
        if (decoder) {
        }
        else {
        }
    }
    /**
    * @throws {Error}
    */
    encode(encoder) {
    }
    /**
    * @throws {Error}
    */
    static decode(decoder) {
        if (decoder.null()) {
            return undefined;
        }
        return new EmptyModel(decoder);
    }
    /**
    * @throws {Error}
    */
    static encode_undefined(encoder) {
        encoder.null();
    }
}
exports.EmptyModel = EmptyModel;
// EmptyModelWithDescription: Test Description
class EmptyModelWithDescription {
    /**
    * @throws {Error}
    */
    constructor(decoder) {
        if (decoder) {
        }
        else {
        }
    }
    /**
    * @throws {Error}
    */
    encode(encoder) {
    }
    /**
    * @throws {Error}
    */
    static decode(decoder) {
        if (decoder.null()) {
            return undefined;
        }
        return new EmptyModelWithDescription(decoder);
    }
    /**
    * @throws {Error}
    */
    static encode_undefined(encoder) {
        encoder.null();
    }
}
exports.EmptyModelWithDescription = EmptyModelWithDescription;
class ModelWithSingleStringField {
    /**
    * @throws {Error}
    */
    constructor(decoder) {
        if (decoder) {
            this.stringField = decoder.string();
        }
        else {
            this.stringField = "DefaultValue";
        }
    }
    /**
    * @throws {Error}
    */
    encode(encoder) {
        encoder.string(this.stringField);
    }
    /**
    * @throws {Error}
    */
    static decode(decoder) {
        if (decoder.null()) {
            return undefined;
        }
        return new ModelWithSingleStringField(decoder);
    }
    /**
    * @throws {Error}
    */
    static encode_undefined(encoder) {
        encoder.null();
    }
}
exports.ModelWithSingleStringField = ModelWithSingleStringField;
// ModelWithSingleStringFieldAndDescription: Test Description
class ModelWithSingleStringFieldAndDescription {
    /**
    * @throws {Error}
    */
    constructor(decoder) {
        if (decoder) {
            this.stringField = decoder.string();
        }
        else {
            this.stringField = "DefaultValue";
        }
    }
    /**
    * @throws {Error}
    */
    encode(encoder) {
        encoder.string(this.stringField);
    }
    /**
    * @throws {Error}
    */
    static decode(decoder) {
        if (decoder.null()) {
            return undefined;
        }
        return new ModelWithSingleStringFieldAndDescription(decoder);
    }
    /**
    * @throws {Error}
    */
    static encode_undefined(encoder) {
        encoder.null();
    }
}
exports.ModelWithSingleStringFieldAndDescription = ModelWithSingleStringFieldAndDescription;
class ModelWithSingleInt32Field {
    /**
    * @throws {Error}
    */
    constructor(decoder) {
        if (decoder) {
            this.int32Field = decoder.int32();
        }
        else {
            this.int32Field = 32;
        }
    }
    /**
    * @throws {Error}
    */
    encode(encoder) {
        encoder.int32(this.int32Field);
    }
    /**
    * @throws {Error}
    */
    static decode(decoder) {
        if (decoder.null()) {
            return undefined;
        }
        return new ModelWithSingleInt32Field(decoder);
    }
    /**
    * @throws {Error}
    */
    static encode_undefined(encoder) {
        encoder.null();
    }
}
exports.ModelWithSingleInt32Field = ModelWithSingleInt32Field;
// ModelWithSingleInt32FieldAndDescription: Test Description
class ModelWithSingleInt32FieldAndDescription {
    /**
    * @throws {Error}
    */
    constructor(decoder) {
        if (decoder) {
            this.int32Field = decoder.int32();
        }
        else {
            this.int32Field = 32;
        }
    }
    /**
    * @throws {Error}
    */
    encode(encoder) {
        encoder.int32(this.int32Field);
    }
    /**
    * @throws {Error}
    */
    static decode(decoder) {
        if (decoder.null()) {
            return undefined;
        }
        return new ModelWithSingleInt32FieldAndDescription(decoder);
    }
    /**
    * @throws {Error}
    */
    static encode_undefined(encoder) {
        encoder.null();
    }
}
exports.ModelWithSingleInt32FieldAndDescription = ModelWithSingleInt32FieldAndDescription;
class ModelWithMultipleFields {
    /**
    * @throws {Error}
    */
    constructor(decoder) {
        if (decoder) {
            this.stringField = decoder.string();
            this.int32Field = decoder.int32();
        }
        else {
            this.stringField = "DefaultValue";
            this.int32Field = 32;
        }
    }
    /**
    * @throws {Error}
    */
    encode(encoder) {
        encoder.string(this.stringField);
        encoder.int32(this.int32Field);
    }
    /**
    * @throws {Error}
    */
    static decode(decoder) {
        if (decoder.null()) {
            return undefined;
        }
        return new ModelWithMultipleFields(decoder);
    }
    /**
    * @throws {Error}
    */
    static encode_undefined(encoder) {
        encoder.null();
    }
}
exports.ModelWithMultipleFields = ModelWithMultipleFields;
// ModelWithMultipleFieldsAndDescription: Test Description
class ModelWithMultipleFieldsAndDescription {
    /**
    * @throws {Error}
    */
    constructor(decoder) {
        if (decoder) {
            this.stringField = decoder.string();
            this.int32Field = decoder.int32();
        }
        else {
            this.stringField = "DefaultValue";
            this.int32Field = 32;
        }
    }
    /**
    * @throws {Error}
    */
    encode(encoder) {
        encoder.string(this.stringField);
        encoder.int32(this.int32Field);
    }
    /**
    * @throws {Error}
    */
    static decode(decoder) {
        if (decoder.null()) {
            return undefined;
        }
        return new ModelWithMultipleFieldsAndDescription(decoder);
    }
    /**
    * @throws {Error}
    */
    static encode_undefined(encoder) {
        encoder.null();
    }
}
exports.ModelWithMultipleFieldsAndDescription = ModelWithMultipleFieldsAndDescription;
class ModelWithEnum {
    /**
    * @throws {Error}
    */
    constructor(decoder) {
        if (decoder) {
            this.enumField = decoder.uint32();
        }
        else {
            this.enumField = GenericEnum.DefaultValue;
        }
    }
    /**
    * @throws {Error}
    */
    encode(encoder) {
        encoder.uint32(this.enumField);
    }
    /**
    * @throws {Error}
    */
    static decode(decoder) {
        if (decoder.null()) {
            return undefined;
        }
        return new ModelWithEnum(decoder);
    }
    /**
    * @throws {Error}
    */
    static encode_undefined(encoder) {
        encoder.null();
    }
}
exports.ModelWithEnum = ModelWithEnum;
// ModelWithEnumAndDescription: Test Description
class ModelWithEnumAndDescription {
    /**
    * @throws {Error}
    */
    constructor(decoder) {
        if (decoder) {
            this.enumField = decoder.uint32();
        }
        else {
            this.enumField = GenericEnum.DefaultValue;
        }
    }
    /**
    * @throws {Error}
    */
    encode(encoder) {
        encoder.uint32(this.enumField);
    }
    /**
    * @throws {Error}
    */
    static decode(decoder) {
        if (decoder.null()) {
            return undefined;
        }
        return new ModelWithEnumAndDescription(decoder);
    }
    /**
    * @throws {Error}
    */
    static encode_undefined(encoder) {
        encoder.null();
    }
}
exports.ModelWithEnumAndDescription = ModelWithEnumAndDescription;
class ModelWithEnumAccessor {
    /**
    * @throws {Error}
    */
    constructor(decoder) {
        _ModelWithEnumAccessor_enumField.set(this, void 0);
        if (decoder) {
            __classPrivateFieldSet(this, _ModelWithEnumAccessor_enumField, decoder.uint32(), "f");
        }
        else {
            __classPrivateFieldSet(this, _ModelWithEnumAccessor_enumField, GenericEnum.DefaultValue, "f");
        }
    }
    get enumField() {
        return __classPrivateFieldGet(this, _ModelWithEnumAccessor_enumField, "f");
    }
    set enumField(val) {
        __classPrivateFieldSet(this, _ModelWithEnumAccessor_enumField, val, "f");
    }
    /**
    * @throws {Error}
    */
    encode(encoder) {
        encoder.uint32(__classPrivateFieldGet(this, _ModelWithEnumAccessor_enumField, "f"));
    }
    /**
    * @throws {Error}
    */
    static decode(decoder) {
        if (decoder.null()) {
            return undefined;
        }
        return new ModelWithEnumAccessor(decoder);
    }
    /**
    * @throws {Error}
    */
    static encode_undefined(encoder) {
        encoder.null();
    }
}
exports.ModelWithEnumAccessor = ModelWithEnumAccessor;
_ModelWithEnumAccessor_enumField = new WeakMap();
// ModelWithEnumAccessorAndDescription: Test Description
class ModelWithEnumAccessorAndDescription {
    /**
    * @throws {Error}
    */
    constructor(decoder) {
        _ModelWithEnumAccessorAndDescription_enumField.set(this, void 0);
        if (decoder) {
            __classPrivateFieldSet(this, _ModelWithEnumAccessorAndDescription_enumField, decoder.uint32(), "f");
        }
        else {
            __classPrivateFieldSet(this, _ModelWithEnumAccessorAndDescription_enumField, GenericEnum.DefaultValue, "f");
        }
    }
    get enumField() {
        return __classPrivateFieldGet(this, _ModelWithEnumAccessorAndDescription_enumField, "f");
    }
    set enumField(val) {
        __classPrivateFieldSet(this, _ModelWithEnumAccessorAndDescription_enumField, val, "f");
    }
    /**
    * @throws {Error}
    */
    encode(encoder) {
        encoder.uint32(__classPrivateFieldGet(this, _ModelWithEnumAccessorAndDescription_enumField, "f"));
    }
    /**
    * @throws {Error}
    */
    static decode(decoder) {
        if (decoder.null()) {
            return undefined;
        }
        return new ModelWithEnumAccessorAndDescription(decoder);
    }
    /**
    * @throws {Error}
    */
    static encode_undefined(encoder) {
        encoder.null();
    }
}
exports.ModelWithEnumAccessorAndDescription = ModelWithEnumAccessorAndDescription;
_ModelWithEnumAccessorAndDescription_enumField = new WeakMap();
class ModelWithMultipleFieldsAccessor {
    /**
    * @throws {Error}
    */
    constructor(decoder) {
        _ModelWithMultipleFieldsAccessor_stringField.set(this, void 0);
        _ModelWithMultipleFieldsAccessor_int32Field.set(this, void 0);
        if (decoder) {
            __classPrivateFieldSet(this, _ModelWithMultipleFieldsAccessor_stringField, decoder.string(), "f");
            __classPrivateFieldSet(this, _ModelWithMultipleFieldsAccessor_int32Field, decoder.int32(), "f");
        }
        else {
            __classPrivateFieldSet(this, _ModelWithMultipleFieldsAccessor_stringField, "DefaultValue", "f");
            __classPrivateFieldSet(this, _ModelWithMultipleFieldsAccessor_int32Field, 32, "f");
        }
    }
    get stringField() {
        return __classPrivateFieldGet(this, _ModelWithMultipleFieldsAccessor_stringField, "f");
    }
    set stringField(val) {
        if (/^[a-zA-Z0-9]*$/.test(val) === false) {
            throw new Error("value must match ^[a-zA-Z0-9]*$");
        }
        if (val.length > 20 || val.length < 1) {
            throw new Error("length must be between 1 and 20");
        }
        val = val.toUpperCase();
        __classPrivateFieldSet(this, _ModelWithMultipleFieldsAccessor_stringField, val, "f");
    }
    get int32Field() {
        return __classPrivateFieldGet(this, _ModelWithMultipleFieldsAccessor_int32Field, "f");
    }
    set int32Field(val) {
        if (val > 100 || val < 0) {
            throw new Error("value must be between 0 and 100");
        }
        __classPrivateFieldSet(this, _ModelWithMultipleFieldsAccessor_int32Field, val, "f");
    }
    /**
    * @throws {Error}
    */
    encode(encoder) {
        encoder.string(__classPrivateFieldGet(this, _ModelWithMultipleFieldsAccessor_stringField, "f"));
        encoder.int32(__classPrivateFieldGet(this, _ModelWithMultipleFieldsAccessor_int32Field, "f"));
    }
    /**
    * @throws {Error}
    */
    static decode(decoder) {
        if (decoder.null()) {
            return undefined;
        }
        return new ModelWithMultipleFieldsAccessor(decoder);
    }
    /**
    * @throws {Error}
    */
    static encode_undefined(encoder) {
        encoder.null();
    }
}
exports.ModelWithMultipleFieldsAccessor = ModelWithMultipleFieldsAccessor;
_ModelWithMultipleFieldsAccessor_stringField = new WeakMap(), _ModelWithMultipleFieldsAccessor_int32Field = new WeakMap();
// ModelWithMultipleFieldsAccessorAndDescription: Test Description
class ModelWithMultipleFieldsAccessorAndDescription {
    /**
    * @throws {Error}
    */
    constructor(decoder) {
        _ModelWithMultipleFieldsAccessorAndDescription_stringField.set(this, void 0);
        _ModelWithMultipleFieldsAccessorAndDescription_int32Field.set(this, void 0);
        if (decoder) {
            __classPrivateFieldSet(this, _ModelWithMultipleFieldsAccessorAndDescription_stringField, decoder.string(), "f");
            __classPrivateFieldSet(this, _ModelWithMultipleFieldsAccessorAndDescription_int32Field, decoder.int32(), "f");
        }
        else {
            __classPrivateFieldSet(this, _ModelWithMultipleFieldsAccessorAndDescription_stringField, "DefaultValue", "f");
            __classPrivateFieldSet(this, _ModelWithMultipleFieldsAccessorAndDescription_int32Field, 32, "f");
        }
    }
    get stringField() {
        return __classPrivateFieldGet(this, _ModelWithMultipleFieldsAccessorAndDescription_stringField, "f");
    }
    set stringField(val) {
        __classPrivateFieldSet(this, _ModelWithMultipleFieldsAccessorAndDescription_stringField, val, "f");
    }
    get int32Field() {
        return __classPrivateFieldGet(this, _ModelWithMultipleFieldsAccessorAndDescription_int32Field, "f");
    }
    set int32Field(val) {
        __classPrivateFieldSet(this, _ModelWithMultipleFieldsAccessorAndDescription_int32Field, val, "f");
    }
    /**
    * @throws {Error}
    */
    encode(encoder) {
        encoder.string(__classPrivateFieldGet(this, _ModelWithMultipleFieldsAccessorAndDescription_stringField, "f"));
        encoder.int32(__classPrivateFieldGet(this, _ModelWithMultipleFieldsAccessorAndDescription_int32Field, "f"));
    }
    /**
    * @throws {Error}
    */
    static decode(decoder) {
        if (decoder.null()) {
            return undefined;
        }
        return new ModelWithMultipleFieldsAccessorAndDescription(decoder);
    }
    /**
    * @throws {Error}
    */
    static encode_undefined(encoder) {
        encoder.null();
    }
}
exports.ModelWithMultipleFieldsAccessorAndDescription = ModelWithMultipleFieldsAccessorAndDescription;
_ModelWithMultipleFieldsAccessorAndDescription_stringField = new WeakMap(), _ModelWithMultipleFieldsAccessorAndDescription_int32Field = new WeakMap();
class ModelWithEmbeddedModels {
    /**
    * @throws {Error}
    */
    constructor(decoder) {
        if (decoder) {
            this.embeddedEmptyModel = EmptyModel.decode(decoder);
            const embeddedModelArrayWithMultipleFieldsAccessorSize = decoder.array(polyglot_1.Kind.Any);
            this.embeddedModelArrayWithMultipleFieldsAccessor = new Array(embeddedModelArrayWithMultipleFieldsAccessorSize);
            for (let i = 0; i < embeddedModelArrayWithMultipleFieldsAccessorSize; i += 1) {
                const x = ModelWithMultipleFieldsAccessor.decode(decoder);
                if (x !== undefined) {
                    this.embeddedModelArrayWithMultipleFieldsAccessor[i] = x;
                }
            }
        }
        else {
            this.embeddedEmptyModel = new EmptyModel();
            this.embeddedModelArrayWithMultipleFieldsAccessor = [];
        }
    }
    /**
    * @throws {Error}
    */
    encode(encoder) {
        if (this.embeddedEmptyModel === undefined) {
            encoder.null();
        }
        else {
            this.embeddedEmptyModel.encode(encoder);
        }
        const embeddedModelArrayWithMultipleFieldsAccessorLength = this.embeddedModelArrayWithMultipleFieldsAccessor.length;
        encoder.array(embeddedModelArrayWithMultipleFieldsAccessorLength, polyglot_1.Kind.Any);
        for (let i = 0; i < embeddedModelArrayWithMultipleFieldsAccessorLength; i += 1) {
            let el = this.embeddedModelArrayWithMultipleFieldsAccessor[i];
            el.encode(encoder);
        }
    }
    /**
    * @throws {Error}
    */
    static decode(decoder) {
        if (decoder.null()) {
            return undefined;
        }
        return new ModelWithEmbeddedModels(decoder);
    }
    /**
    * @throws {Error}
    */
    static encode_undefined(encoder) {
        encoder.null();
    }
}
exports.ModelWithEmbeddedModels = ModelWithEmbeddedModels;
// ModelWithEmbeddedModelsAndDescription: Test Description
class ModelWithEmbeddedModelsAndDescription {
    /**
    * @throws {Error}
    */
    constructor(decoder) {
        if (decoder) {
            this.embeddedEmptyModel = EmptyModel.decode(decoder);
            const embeddedModelArrayWithMultipleFieldsAccessorSize = decoder.array(polyglot_1.Kind.Any);
            this.embeddedModelArrayWithMultipleFieldsAccessor = new Array(embeddedModelArrayWithMultipleFieldsAccessorSize);
            for (let i = 0; i < embeddedModelArrayWithMultipleFieldsAccessorSize; i += 1) {
                const x = ModelWithMultipleFieldsAccessor.decode(decoder);
                if (x !== undefined) {
                    this.embeddedModelArrayWithMultipleFieldsAccessor[i] = x;
                }
            }
        }
        else {
            this.embeddedEmptyModel = new EmptyModel();
            this.embeddedModelArrayWithMultipleFieldsAccessor = [];
        }
    }
    /**
    * @throws {Error}
    */
    encode(encoder) {
        if (this.embeddedEmptyModel === undefined) {
            encoder.null();
        }
        else {
            this.embeddedEmptyModel.encode(encoder);
        }
        const embeddedModelArrayWithMultipleFieldsAccessorLength = this.embeddedModelArrayWithMultipleFieldsAccessor.length;
        encoder.array(embeddedModelArrayWithMultipleFieldsAccessorLength, polyglot_1.Kind.Any);
        for (let i = 0; i < embeddedModelArrayWithMultipleFieldsAccessorLength; i += 1) {
            let el = this.embeddedModelArrayWithMultipleFieldsAccessor[i];
            el.encode(encoder);
        }
    }
    /**
    * @throws {Error}
    */
    static decode(decoder) {
        if (decoder.null()) {
            return undefined;
        }
        return new ModelWithEmbeddedModelsAndDescription(decoder);
    }
    /**
    * @throws {Error}
    */
    static encode_undefined(encoder) {
        encoder.null();
    }
}
exports.ModelWithEmbeddedModelsAndDescription = ModelWithEmbeddedModelsAndDescription;
class ModelWithEmbeddedModelsAccessor {
    /**
    * @throws {Error}
    */
    constructor(decoder) {
        _ModelWithEmbeddedModelsAccessor_embeddedEmptyModel.set(this, void 0);
        _ModelWithEmbeddedModelsAccessor_embeddedModelArrayWithMultipleFieldsAccessor.set(this, void 0);
        if (decoder) {
            __classPrivateFieldSet(this, _ModelWithEmbeddedModelsAccessor_embeddedEmptyModel, EmptyModel.decode(decoder), "f");
            const embeddedModelArrayWithMultipleFieldsAccessorSize = decoder.array(polyglot_1.Kind.Any);
            __classPrivateFieldSet(this, _ModelWithEmbeddedModelsAccessor_embeddedModelArrayWithMultipleFieldsAccessor, new Array(embeddedModelArrayWithMultipleFieldsAccessorSize), "f");
            for (let i = 0; i < embeddedModelArrayWithMultipleFieldsAccessorSize; i += 1) {
                const x = ModelWithMultipleFieldsAccessor.decode(decoder);
                if (x !== undefined) {
                    __classPrivateFieldGet(this, _ModelWithEmbeddedModelsAccessor_embeddedModelArrayWithMultipleFieldsAccessor, "f")[i] = x;
                }
            }
        }
        else {
            __classPrivateFieldSet(this, _ModelWithEmbeddedModelsAccessor_embeddedEmptyModel, new EmptyModel(), "f");
            __classPrivateFieldSet(this, _ModelWithEmbeddedModelsAccessor_embeddedModelArrayWithMultipleFieldsAccessor, [], "f");
        }
    }
    get embeddedEmptyModel() {
        return __classPrivateFieldGet(this, _ModelWithEmbeddedModelsAccessor_embeddedEmptyModel, "f");
    }
    set embeddedEmptyModel(val) {
        __classPrivateFieldSet(this, _ModelWithEmbeddedModelsAccessor_embeddedEmptyModel, val, "f");
    }
    get embeddedModelArrayWithMultipleFieldsAccessor() {
        return __classPrivateFieldGet(this, _ModelWithEmbeddedModelsAccessor_embeddedModelArrayWithMultipleFieldsAccessor, "f");
    }
    set EmbeddedModelArrayWithMultipleFieldsAccessor(val) {
        __classPrivateFieldSet(this, _ModelWithEmbeddedModelsAccessor_embeddedModelArrayWithMultipleFieldsAccessor, val, "f");
    }
    /**
    * @throws {Error}
    */
    encode(encoder) {
        if (__classPrivateFieldGet(this, _ModelWithEmbeddedModelsAccessor_embeddedEmptyModel, "f") === undefined) {
            encoder.null();
        }
        else {
            __classPrivateFieldGet(this, _ModelWithEmbeddedModelsAccessor_embeddedEmptyModel, "f").encode(encoder);
        }
        const embeddedModelArrayWithMultipleFieldsAccessorLength = __classPrivateFieldGet(this, _ModelWithEmbeddedModelsAccessor_embeddedModelArrayWithMultipleFieldsAccessor, "f").length;
        encoder.array(embeddedModelArrayWithMultipleFieldsAccessorLength, polyglot_1.Kind.Any);
        for (let i = 0; i < embeddedModelArrayWithMultipleFieldsAccessorLength; i += 1) {
            let el = __classPrivateFieldGet(this, _ModelWithEmbeddedModelsAccessor_embeddedModelArrayWithMultipleFieldsAccessor, "f")[i];
            el.encode(encoder);
        }
    }
    /**
    * @throws {Error}
    */
    static decode(decoder) {
        if (decoder.null()) {
            return undefined;
        }
        return new ModelWithEmbeddedModelsAccessor(decoder);
    }
    /**
    * @throws {Error}
    */
    static encode_undefined(encoder) {
        encoder.null();
    }
}
exports.ModelWithEmbeddedModelsAccessor = ModelWithEmbeddedModelsAccessor;
_ModelWithEmbeddedModelsAccessor_embeddedEmptyModel = new WeakMap(), _ModelWithEmbeddedModelsAccessor_embeddedModelArrayWithMultipleFieldsAccessor = new WeakMap();
// ModelWithEmbeddedModelsAccessorAndDescription: Test Description
class ModelWithEmbeddedModelsAccessorAndDescription {
    /**
    * @throws {Error}
    */
    constructor(decoder) {
        _ModelWithEmbeddedModelsAccessorAndDescription_embeddedEmptyModel.set(this, void 0);
        _ModelWithEmbeddedModelsAccessorAndDescription_embeddedModelArrayWithMultipleFieldsAccessor.set(this, void 0);
        if (decoder) {
            __classPrivateFieldSet(this, _ModelWithEmbeddedModelsAccessorAndDescription_embeddedEmptyModel, EmptyModel.decode(decoder), "f");
            const embeddedModelArrayWithMultipleFieldsAccessorSize = decoder.array(polyglot_1.Kind.Any);
            __classPrivateFieldSet(this, _ModelWithEmbeddedModelsAccessorAndDescription_embeddedModelArrayWithMultipleFieldsAccessor, new Array(embeddedModelArrayWithMultipleFieldsAccessorSize), "f");
            for (let i = 0; i < embeddedModelArrayWithMultipleFieldsAccessorSize; i += 1) {
                const x = ModelWithMultipleFieldsAccessor.decode(decoder);
                if (x !== undefined) {
                    __classPrivateFieldGet(this, _ModelWithEmbeddedModelsAccessorAndDescription_embeddedModelArrayWithMultipleFieldsAccessor, "f")[i] = x;
                }
            }
        }
        else {
            __classPrivateFieldSet(this, _ModelWithEmbeddedModelsAccessorAndDescription_embeddedEmptyModel, new EmptyModel(), "f");
            __classPrivateFieldSet(this, _ModelWithEmbeddedModelsAccessorAndDescription_embeddedModelArrayWithMultipleFieldsAccessor, [], "f");
        }
    }
    get embeddedEmptyModel() {
        return __classPrivateFieldGet(this, _ModelWithEmbeddedModelsAccessorAndDescription_embeddedEmptyModel, "f");
    }
    set embeddedEmptyModel(val) {
        __classPrivateFieldSet(this, _ModelWithEmbeddedModelsAccessorAndDescription_embeddedEmptyModel, val, "f");
    }
    get embeddedModelArrayWithMultipleFieldsAccessor() {
        return __classPrivateFieldGet(this, _ModelWithEmbeddedModelsAccessorAndDescription_embeddedModelArrayWithMultipleFieldsAccessor, "f");
    }
    set EmbeddedModelArrayWithMultipleFieldsAccessor(val) {
        __classPrivateFieldSet(this, _ModelWithEmbeddedModelsAccessorAndDescription_embeddedModelArrayWithMultipleFieldsAccessor, val, "f");
    }
    /**
    * @throws {Error}
    */
    encode(encoder) {
        if (__classPrivateFieldGet(this, _ModelWithEmbeddedModelsAccessorAndDescription_embeddedEmptyModel, "f") === undefined) {
            encoder.null();
        }
        else {
            __classPrivateFieldGet(this, _ModelWithEmbeddedModelsAccessorAndDescription_embeddedEmptyModel, "f").encode(encoder);
        }
        const embeddedModelArrayWithMultipleFieldsAccessorLength = __classPrivateFieldGet(this, _ModelWithEmbeddedModelsAccessorAndDescription_embeddedModelArrayWithMultipleFieldsAccessor, "f").length;
        encoder.array(embeddedModelArrayWithMultipleFieldsAccessorLength, polyglot_1.Kind.Any);
        for (let i = 0; i < embeddedModelArrayWithMultipleFieldsAccessorLength; i += 1) {
            let el = __classPrivateFieldGet(this, _ModelWithEmbeddedModelsAccessorAndDescription_embeddedModelArrayWithMultipleFieldsAccessor, "f")[i];
            el.encode(encoder);
        }
    }
    /**
    * @throws {Error}
    */
    static decode(decoder) {
        if (decoder.null()) {
            return undefined;
        }
        return new ModelWithEmbeddedModelsAccessorAndDescription(decoder);
    }
    /**
    * @throws {Error}
    */
    static encode_undefined(encoder) {
        encoder.null();
    }
}
exports.ModelWithEmbeddedModelsAccessorAndDescription = ModelWithEmbeddedModelsAccessorAndDescription;
_ModelWithEmbeddedModelsAccessorAndDescription_embeddedEmptyModel = new WeakMap(), _ModelWithEmbeddedModelsAccessorAndDescription_embeddedModelArrayWithMultipleFieldsAccessor = new WeakMap();
class ModelWithAllFieldTypes {
    /**
    * @throws {Error}
    */
    constructor(decoder) {
        if (decoder) {
            this.modelField = EmptyModel.decode(decoder);
            const modelArrayFieldSize = decoder.array(polyglot_1.Kind.Any);
            this.modelArrayField = new Array(modelArrayFieldSize);
            for (let i = 0; i < modelArrayFieldSize; i += 1) {
                const x = EmptyModel.decode(decoder);
                if (x !== undefined) {
                    this.modelArrayField[i] = x;
                }
            }
            this.stringField = decoder.string();
            const stringArrayFieldSize = decoder.array(polyglot_1.Kind.String);
            this.stringArrayField = new Array(stringArrayFieldSize);
            for (let i = 0; i < stringArrayFieldSize; i += 1) {
                this.stringArrayField[i] = decoder.string();
            }
            this.stringMapField = new Map();
            let stringMapFieldSize = decoder.map(polyglot_1.Kind.String, polyglot_1.Kind.String);
            for (let i = 0; i < stringMapFieldSize; i++) {
                let key = decoder.string();
                let val = decoder.string();
                this.stringMapField.set(key, val);
            }
            this.stringMapFieldEmbedded = new Map();
            let stringMapFieldEmbeddedSize = decoder.map(polyglot_1.Kind.String, polyglot_1.Kind.Any);
            for (let i = 0; i < stringMapFieldEmbeddedSize; i++) {
                let key = decoder.string();
                let val = EmptyModel.decode(decoder);
                if (val !== undefined) {
                    this.stringMapFieldEmbedded.set(key, val);
                }
            }
            this.int32Field = decoder.int32();
            const int32ArrayFieldSize = decoder.array(polyglot_1.Kind.Int32);
            this.int32ArrayField = new Array(int32ArrayFieldSize);
            for (let i = 0; i < int32ArrayFieldSize; i += 1) {
                this.int32ArrayField[i] = decoder.int32();
            }
            this.int32MapField = new Map();
            let int32MapFieldSize = decoder.map(polyglot_1.Kind.Int32, polyglot_1.Kind.Int32);
            for (let i = 0; i < int32MapFieldSize; i++) {
                let key = decoder.int32();
                let val = decoder.int32();
                this.int32MapField.set(key, val);
            }
            this.int32MapFieldEmbedded = new Map();
            let int32MapFieldEmbeddedSize = decoder.map(polyglot_1.Kind.Int32, polyglot_1.Kind.Any);
            for (let i = 0; i < int32MapFieldEmbeddedSize; i++) {
                let key = decoder.int32();
                let val = EmptyModel.decode(decoder);
                if (val !== undefined) {
                    this.int32MapFieldEmbedded.set(key, val);
                }
            }
            this.int64Field = decoder.int64();
            const int64ArrayFieldSize = decoder.array(polyglot_1.Kind.Int64);
            this.int64ArrayField = new Array(int64ArrayFieldSize);
            for (let i = 0; i < int64ArrayFieldSize; i += 1) {
                this.int64ArrayField[i] = decoder.int64();
            }
            this.int64MapField = new Map();
            let int64MapFieldSize = decoder.map(polyglot_1.Kind.Int64, polyglot_1.Kind.Int64);
            for (let i = 0; i < int64MapFieldSize; i++) {
                let key = decoder.int64();
                let val = decoder.int64();
                this.int64MapField.set(key, val);
            }
            this.int64MapFieldEmbedded = new Map();
            let int64MapFieldEmbeddedSize = decoder.map(polyglot_1.Kind.Int64, polyglot_1.Kind.Any);
            for (let i = 0; i < int64MapFieldEmbeddedSize; i++) {
                let key = decoder.int64();
                let val = EmptyModel.decode(decoder);
                if (val !== undefined) {
                    this.int64MapFieldEmbedded.set(key, val);
                }
            }
            this.uint32Field = decoder.uint32();
            const uint32ArrayFieldSize = decoder.array(polyglot_1.Kind.Uint32);
            this.uint32ArrayField = new Array(uint32ArrayFieldSize);
            for (let i = 0; i < uint32ArrayFieldSize; i += 1) {
                this.uint32ArrayField[i] = decoder.uint32();
            }
            this.uint32MapField = new Map();
            let uint32MapFieldSize = decoder.map(polyglot_1.Kind.Uint32, polyglot_1.Kind.Uint32);
            for (let i = 0; i < uint32MapFieldSize; i++) {
                let key = decoder.uint32();
                let val = decoder.uint32();
                this.uint32MapField.set(key, val);
            }
            this.uint32MapFieldEmbedded = new Map();
            let uint32MapFieldEmbeddedSize = decoder.map(polyglot_1.Kind.Uint32, polyglot_1.Kind.Any);
            for (let i = 0; i < uint32MapFieldEmbeddedSize; i++) {
                let key = decoder.uint32();
                let val = EmptyModel.decode(decoder);
                if (val !== undefined) {
                    this.uint32MapFieldEmbedded.set(key, val);
                }
            }
            this.uint64Field = decoder.uint64();
            const uint64ArrayFieldSize = decoder.array(polyglot_1.Kind.Uint64);
            this.uint64ArrayField = new Array(uint64ArrayFieldSize);
            for (let i = 0; i < uint64ArrayFieldSize; i += 1) {
                this.uint64ArrayField[i] = decoder.uint64();
            }
            this.uint64MapField = new Map();
            let uint64MapFieldSize = decoder.map(polyglot_1.Kind.Uint64, polyglot_1.Kind.Uint64);
            for (let i = 0; i < uint64MapFieldSize; i++) {
                let key = decoder.uint64();
                let val = decoder.uint64();
                this.uint64MapField.set(key, val);
            }
            this.uint64MapFieldEmbedded = new Map();
            let uint64MapFieldEmbeddedSize = decoder.map(polyglot_1.Kind.Uint64, polyglot_1.Kind.Any);
            for (let i = 0; i < uint64MapFieldEmbeddedSize; i++) {
                let key = decoder.uint64();
                let val = EmptyModel.decode(decoder);
                if (val !== undefined) {
                    this.uint64MapFieldEmbedded.set(key, val);
                }
            }
            this.float32Field = decoder.float32();
            const float32ArrayFieldSize = decoder.array(polyglot_1.Kind.Float32);
            this.float32ArrayField = new Array(float32ArrayFieldSize);
            for (let i = 0; i < float32ArrayFieldSize; i += 1) {
                this.float32ArrayField[i] = decoder.float32();
            }
            this.float64Field = decoder.float64();
            const float64ArrayFieldSize = decoder.array(polyglot_1.Kind.Float64);
            this.float64ArrayField = new Array(float64ArrayFieldSize);
            for (let i = 0; i < float64ArrayFieldSize; i += 1) {
                this.float64ArrayField[i] = decoder.float64();
            }
            this.enumField = decoder.uint32();
            const enumArrayFieldSize = decoder.array(polyglot_1.Kind.Uint32);
            this.enumArrayField = new Array(enumArrayFieldSize);
            for (let i = 0; i < enumArrayFieldSize; i += 1) {
                this.enumArrayField[i] = decoder.uint32();
            }
            this.enumMapField = new Map();
            let enumMapFieldSize = decoder.map(polyglot_1.Kind.Uint32, polyglot_1.Kind.String);
            for (let i = 0; i < enumMapFieldSize; i++) {
                let key = decoder.uint32();
                let val = decoder.string();
                this.enumMapField.set(key, val);
            }
            this.enumMapFieldEmbedded = new Map();
            let enumMapFieldEmbeddedSize = decoder.map(polyglot_1.Kind.Uint32, polyglot_1.Kind.Any);
            for (let i = 0; i < enumMapFieldEmbeddedSize; i++) {
                let key = decoder.uint32();
                let val = EmptyModel.decode(decoder);
                if (val !== undefined) {
                    this.enumMapFieldEmbedded.set(key, val);
                }
            }
            this.bytesField = decoder.uint8Array();
            const bytesArrayFieldSize = decoder.array(polyglot_1.Kind.Uint8Array);
            this.bytesArrayField = new Array(bytesArrayFieldSize);
            for (let i = 0; i < bytesArrayFieldSize; i += 1) {
                this.bytesArrayField[i] = decoder.uint8Array();
            }
            this.boolField = decoder.boolean();
            const boolArrayFieldSize = decoder.array(polyglot_1.Kind.Boolean);
            this.boolArrayField = new Array(boolArrayFieldSize);
            for (let i = 0; i < boolArrayFieldSize; i += 1) {
                this.boolArrayField[i] = decoder.boolean();
            }
        }
        else {
            this.modelField = new EmptyModel();
            this.modelArrayField = [];
            this.stringField = "DefaultValue";
            this.stringArrayField = [];
            this.stringMapField = new Map();
            this.stringMapFieldEmbedded = new Map();
            this.int32Field = 32;
            this.int32ArrayField = [];
            this.int32MapField = new Map();
            this.int32MapFieldEmbedded = new Map();
            this.int64Field = 64n;
            this.int64ArrayField = [];
            this.int64MapField = new Map();
            this.int64MapFieldEmbedded = new Map();
            this.uint32Field = 32;
            this.uint32ArrayField = [];
            this.uint32MapField = new Map();
            this.uint32MapFieldEmbedded = new Map();
            this.uint64Field = 64n;
            this.uint64ArrayField = [];
            this.uint64MapField = new Map();
            this.uint64MapFieldEmbedded = new Map();
            this.float32Field = 32.32;
            this.float32ArrayField = [];
            this.float64Field = 64.64;
            this.float64ArrayField = [];
            this.enumField = GenericEnum.DefaultValue;
            this.enumArrayField = [];
            this.enumMapField = new Map();
            this.enumMapFieldEmbedded = new Map();
            this.bytesField = new Uint8Array(512);
            this.bytesArrayField = [];
            this.boolField = true;
            this.boolArrayField = [];
        }
    }
    /**
    * @throws {Error}
    */
    encode(encoder) {
        if (this.modelField === undefined) {
            encoder.null();
        }
        else {
            this.modelField.encode(encoder);
        }
        const modelArrayFieldLength = this.modelArrayField.length;
        encoder.array(modelArrayFieldLength, polyglot_1.Kind.Any);
        for (let i = 0; i < modelArrayFieldLength; i += 1) {
            let el = this.modelArrayField[i];
            el.encode(encoder);
        }
        encoder.string(this.stringField);
        const stringArrayFieldLength = this.stringArrayField.length;
        encoder.array(stringArrayFieldLength, polyglot_1.Kind.String);
        for (let i = 0; i < stringArrayFieldLength; i += 1) {
            encoder.string(this.stringArrayField[i]);
        }
        encoder.map(this.stringMapField.size, polyglot_1.Kind.String, polyglot_1.Kind.String);
        this.stringMapField.forEach((val, key) => {
            encoder.string(key);
            encoder.string(val);
        });
        encoder.map(this.stringMapFieldEmbedded.size, polyglot_1.Kind.String, polyglot_1.Kind.Any);
        this.stringMapFieldEmbedded.forEach((val, key) => {
            encoder.string(key);
            val.encode(encoder);
        });
        encoder.int32(this.int32Field);
        const int32ArrayFieldLength = this.int32ArrayField.length;
        encoder.array(int32ArrayFieldLength, polyglot_1.Kind.Int32);
        for (let i = 0; i < int32ArrayFieldLength; i += 1) {
            encoder.int32(this.int32ArrayField[i]);
        }
        encoder.map(this.int32MapField.size, polyglot_1.Kind.Int32, polyglot_1.Kind.Int32);
        this.int32MapField.forEach((val, key) => {
            encoder.int32(key);
            encoder.int32(val);
        });
        encoder.map(this.int32MapFieldEmbedded.size, polyglot_1.Kind.Int32, polyglot_1.Kind.Any);
        this.int32MapFieldEmbedded.forEach((val, key) => {
            encoder.int32(key);
            val.encode(encoder);
        });
        encoder.int64(this.int64Field);
        const int64ArrayFieldLength = this.int64ArrayField.length;
        encoder.array(int64ArrayFieldLength, polyglot_1.Kind.Int64);
        for (let i = 0; i < int64ArrayFieldLength; i += 1) {
            encoder.int64(this.int64ArrayField[i]);
        }
        encoder.map(this.int64MapField.size, polyglot_1.Kind.Int64, polyglot_1.Kind.Int64);
        this.int64MapField.forEach((val, key) => {
            encoder.int64(key);
            encoder.int64(val);
        });
        encoder.map(this.int64MapFieldEmbedded.size, polyglot_1.Kind.Int64, polyglot_1.Kind.Any);
        this.int64MapFieldEmbedded.forEach((val, key) => {
            encoder.int64(key);
            val.encode(encoder);
        });
        encoder.uint32(this.uint32Field);
        const uint32ArrayFieldLength = this.uint32ArrayField.length;
        encoder.array(uint32ArrayFieldLength, polyglot_1.Kind.Uint32);
        for (let i = 0; i < uint32ArrayFieldLength; i += 1) {
            encoder.uint32(this.uint32ArrayField[i]);
        }
        encoder.map(this.uint32MapField.size, polyglot_1.Kind.Uint32, polyglot_1.Kind.Uint32);
        this.uint32MapField.forEach((val, key) => {
            encoder.uint32(key);
            encoder.uint32(val);
        });
        encoder.map(this.uint32MapFieldEmbedded.size, polyglot_1.Kind.Uint32, polyglot_1.Kind.Any);
        this.uint32MapFieldEmbedded.forEach((val, key) => {
            encoder.uint32(key);
            val.encode(encoder);
        });
        encoder.uint64(this.uint64Field);
        const uint64ArrayFieldLength = this.uint64ArrayField.length;
        encoder.array(uint64ArrayFieldLength, polyglot_1.Kind.Uint64);
        for (let i = 0; i < uint64ArrayFieldLength; i += 1) {
            encoder.uint64(this.uint64ArrayField[i]);
        }
        encoder.map(this.uint64MapField.size, polyglot_1.Kind.Uint64, polyglot_1.Kind.Uint64);
        this.uint64MapField.forEach((val, key) => {
            encoder.uint64(key);
            encoder.uint64(val);
        });
        encoder.map(this.uint64MapFieldEmbedded.size, polyglot_1.Kind.Uint64, polyglot_1.Kind.Any);
        this.uint64MapFieldEmbedded.forEach((val, key) => {
            encoder.uint64(key);
            val.encode(encoder);
        });
        encoder.float32(this.float32Field);
        const float32ArrayFieldLength = this.float32ArrayField.length;
        encoder.array(float32ArrayFieldLength, polyglot_1.Kind.Float32);
        for (let i = 0; i < float32ArrayFieldLength; i += 1) {
            encoder.float32(this.float32ArrayField[i]);
        }
        encoder.float64(this.float64Field);
        const float64ArrayFieldLength = this.float64ArrayField.length;
        encoder.array(float64ArrayFieldLength, polyglot_1.Kind.Float64);
        for (let i = 0; i < float64ArrayFieldLength; i += 1) {
            encoder.float64(this.float64ArrayField[i]);
        }
        encoder.uint32(this.enumField);
        const enumArrayFieldLength = this.enumArrayField.length;
        encoder.array(enumArrayFieldLength, polyglot_1.Kind.Uint32);
        for (let i = 0; i < enumArrayFieldLength; i += 1) {
            encoder.uint32(this.enumArrayField[i]);
        }
        encoder.map(this.enumMapField.size, polyglot_1.Kind.Uint32, polyglot_1.Kind.String);
        this.enumMapField.forEach((val, key) => {
            encoder.uint32(key);
            encoder.string(val);
        });
        encoder.map(this.enumMapFieldEmbedded.size, polyglot_1.Kind.Uint32, polyglot_1.Kind.Any);
        this.enumMapFieldEmbedded.forEach((val, key) => {
            encoder.uint32(key);
            val.encode(encoder);
        });
        encoder.uint8Array(this.bytesField);
        const bytesArrayFieldLength = this.bytesArrayField.length;
        encoder.array(bytesArrayFieldLength, polyglot_1.Kind.Uint8Array);
        for (let i = 0; i < bytesArrayFieldLength; i += 1) {
            encoder.uint8Array(this.bytesArrayField[i]);
        }
        encoder.boolean(this.boolField);
        const boolArrayFieldLength = this.boolArrayField.length;
        encoder.array(boolArrayFieldLength, polyglot_1.Kind.Boolean);
        for (let i = 0; i < boolArrayFieldLength; i += 1) {
            encoder.boolean(this.boolArrayField[i]);
        }
    }
    /**
    * @throws {Error}
    */
    static decode(decoder) {
        if (decoder.null()) {
            return undefined;
        }
        return new ModelWithAllFieldTypes(decoder);
    }
    /**
    * @throws {Error}
    */
    static encode_undefined(encoder) {
        encoder.null();
    }
}
exports.ModelWithAllFieldTypes = ModelWithAllFieldTypes;
