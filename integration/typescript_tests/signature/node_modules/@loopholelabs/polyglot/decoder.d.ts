import { Kind } from "./kind";
export declare class InvalidBooleanError extends Error {
    constructor();
}
export declare class InvalidUint8Error extends Error {
    constructor();
}
export declare class InvalidUint16Error extends Error {
    constructor();
}
export declare class InvalidUint32Error extends Error {
    constructor();
}
export declare class InvalidUint64Error extends Error {
    constructor();
}
export declare class InvalidInt32Error extends Error {
    constructor();
}
export declare class InvalidInt64Error extends Error {
    constructor();
}
export declare class InvalidFloat32Error extends Error {
    constructor();
}
export declare class InvalidFloat64Error extends Error {
    constructor();
}
export declare class InvalidArrayError extends Error {
    constructor();
}
export declare class InvalidMapError extends Error {
    constructor();
}
export declare class InvalidUint8ArrayError extends Error {
    constructor();
}
export declare class InvalidStringError extends Error {
    constructor();
}
export declare class InvalidErrorError extends Error {
    constructor();
}
export declare class Decoder {
    #private;
    private readonly buf;
    constructor(buf: Uint8Array);
    private peek;
    private pop;
    private validateKind;
    get length(): number;
    private varint;
    null(): boolean;
    any(): boolean;
    boolean(): boolean;
    uint8(): number;
    uint16(): number;
    uint32(): number;
    uint64(): bigint;
    int32(): number;
    int64(): bigint;
    float32(): number;
    float64(): number;
    array(valueKind: Kind): number;
    map(keyKind: Kind, valueKind: Kind): number;
    uint8Array(): Uint8Array;
    string(): string;
    error(): Error;
}
