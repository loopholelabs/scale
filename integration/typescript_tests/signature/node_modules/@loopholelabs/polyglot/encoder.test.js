"use strict";
/*
    Copyright 2023 Loophole Labs

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

           http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("util");
const encoder_1 = require("./encoder");
const kind_1 = require("./kind");
window.TextEncoder = util_1.TextEncoder;
describe("Encoder", () => {
    it("Can encode Null", () => {
        const encoded = new encoder_1.Encoder().null().bytes;
        expect(encoded.length).toBe(1);
        expect(encoded[0]).toBe(kind_1.Kind.Null);
    });
    it("Can encode Any", () => {
        const encoded = new encoder_1.Encoder().any().bytes;
        expect(encoded.length).toBe(1);
        expect(encoded[0]).toBe(kind_1.Kind.Any);
    });
    it("Can encode true Boolean", () => {
        const encoded = new encoder_1.Encoder().boolean(true).bytes;
        expect(encoded.length).toBe(2);
        expect(encoded[0]).toBe(kind_1.Kind.Boolean);
        expect(encoded[1]).toBe(0x01);
    });
    it("Can encode false Boolean", () => {
        const encoded = new encoder_1.Encoder().boolean(false).bytes;
        expect(encoded.length).toBe(2);
        expect(encoded[0]).toBe(kind_1.Kind.Boolean);
        expect(encoded[1]).toBe(0x00);
    });
    it("Can encode Uint8", () => {
        const encoded = new encoder_1.Encoder().uint8(32).bytes;
        expect(encoded.length).toBe(2);
        expect(encoded[0]).toBe(kind_1.Kind.Uint8);
        expect(encoded[1]).toBe(32);
    });
    it("Can encode Uint16", () => {
        const encoded = new encoder_1.Encoder().uint16(1024).bytes;
        expect(encoded.length).toBe(3);
        expect(encoded[0]).toBe(kind_1.Kind.Uint16);
        expect(encoded[1]).toBe(128);
        expect(encoded[2]).toBe(8);
    });
    it("Can encode Uint32", () => {
        const encoded = new encoder_1.Encoder().uint32(4294967290).bytes;
        expect(encoded.length).toBe(6);
        expect(encoded[0]).toBe(kind_1.Kind.Uint32);
        expect(encoded[1]).toBe(250);
        expect(encoded[2]).toBe(255);
        expect(encoded[3]).toBe(255);
        expect(encoded[4]).toBe(255);
        expect(encoded[5]).toBe(15);
    });
    it("Can encode Uint64", () => {
        const encoded = new encoder_1.Encoder().uint64(18446744073709551610n).bytes;
        expect(encoded.length).toBe(11);
        expect(encoded[0]).toBe(kind_1.Kind.Uint64);
        expect(encoded[1]).toBe(250);
        expect(encoded[2]).toBe(255);
        expect(encoded[3]).toBe(255);
        expect(encoded[4]).toBe(255);
        expect(encoded[5]).toBe(255);
        expect(encoded[6]).toBe(255);
        expect(encoded[7]).toBe(255);
        expect(encoded[8]).toBe(255);
        expect(encoded[9]).toBe(255);
        expect(encoded[10]).toBe(1);
    });
    it("Can encode Int32", () => {
        const encoded = new encoder_1.Encoder().int32(-2147483648).bytes;
        expect(encoded.length).toBe(6);
        expect(encoded[0]).toBe(kind_1.Kind.Int32);
        expect(encoded[1]).toBe(255);
        expect(encoded[2]).toBe(255);
        expect(encoded[3]).toBe(255);
        expect(encoded[4]).toBe(255);
        expect(encoded[5]).toBe(15);
    });
    it("Can encode Int64", () => {
        const encoded = new encoder_1.Encoder().int64(-9223372036854775808n).bytes;
        expect(encoded.length).toBe(11);
        expect(encoded[0]).toBe(kind_1.Kind.Int64);
        expect(encoded[1]).toBe(255);
        expect(encoded[2]).toBe(255);
        expect(encoded[3]).toBe(255);
        expect(encoded[4]).toBe(255);
        expect(encoded[5]).toBe(255);
        expect(encoded[6]).toBe(255);
        expect(encoded[7]).toBe(255);
        expect(encoded[8]).toBe(255);
        expect(encoded[9]).toBe(255);
        expect(encoded[10]).toBe(1);
    });
    it("Can encode Float32", () => {
        const encoded = new encoder_1.Encoder().float32(-214648.34432).bytes;
        expect(encoded.length).toBe(5);
        expect(encoded[0]).toBe(kind_1.Kind.Float32);
        expect(encoded[1]).toBe(0xc8);
        expect(encoded[2]).toBe(0x51);
        expect(encoded[3]).toBe(0x9e);
        expect(encoded[4]).toBe(0x16);
    });
    it("Can encode Float64", () => {
        const encoded = new encoder_1.Encoder().float64(-922337203685.2345).bytes;
        expect(encoded.length).toBe(9);
        expect(encoded[0]).toBe(kind_1.Kind.Float64);
        expect(encoded[1]).toBe(0xc2);
        expect(encoded[2]).toBe(0x6a);
        expect(encoded[3]).toBe(0xd7);
        expect(encoded[4]).toBe(0xf2);
        expect(encoded[5]).toBe(0x9a);
        expect(encoded[6]).toBe(0xbc);
        expect(encoded[7]).toBe(0xa7);
        expect(encoded[8]).toBe(0x81);
    });
    it("Can encode Array", () => {
        const encoded = new encoder_1.Encoder().array(32, kind_1.Kind.String).bytes;
        expect(encoded.length).toBe(1 + 1 + 1 + 1);
        expect(encoded[0]).toBe(kind_1.Kind.Array);
        expect(encoded[1]).toBe(kind_1.Kind.String);
        expect(encoded[2]).toBe(kind_1.Kind.Uint32);
    });
    it("Can encode Map", () => {
        const encoded = new encoder_1.Encoder().map(32, kind_1.Kind.String, kind_1.Kind.Uint32).bytes;
        expect(encoded.length).toBe(1 + 1 + 1 + 1 + 1);
        expect(encoded[0]).toBe(kind_1.Kind.Map);
        expect(encoded[1]).toBe(kind_1.Kind.String);
        expect(encoded[2]).toBe(kind_1.Kind.Uint32);
        expect(encoded[3]).toBe(kind_1.Kind.Uint32);
    });
    it("Can encode Uint8Array", () => {
        const expected = new util_1.TextEncoder().encode("Test String");
        const encoded = new encoder_1.Encoder().uint8Array(expected).bytes;
        expect(encoded.length).toBe(1 + 1 + 1 + expected.length);
        expect(encoded[0]).toBe(kind_1.Kind.Uint8Array);
        expect(encoded.slice(6).buffer).toEqual(expected.buffer);
    });
    it("Can encode String", () => {
        const expected = "Test String";
        const encoded = new encoder_1.Encoder().string(expected).bytes;
        expect(encoded.length).toBe(1 + 1 + 1 + expected.length);
        expect(encoded[0]).toBe(kind_1.Kind.String);
        expect(encoded.slice(6).buffer).toEqual(new util_1.TextEncoder().encode(expected).buffer);
    });
    it("Can encode Error", () => {
        const expected = new Error("Test String");
        const encoded = new encoder_1.Encoder().error(expected).bytes;
        expect(encoded.length).toBe(1 + 1 + 1 + 1 + expected.message.length);
        expect(encoded[0]).toBe(kind_1.Kind.Error);
        expect(encoded.slice(6).buffer).toEqual(new util_1.TextEncoder().encode(expected.message).buffer);
    });
});
//# sourceMappingURL=encoder.test.js.map