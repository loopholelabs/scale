"use strict";
/*
    Copyright 2023 Loophole Labs

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

           http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
 */
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var _Decoder_pos;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Decoder = exports.InvalidErrorError = exports.InvalidStringError = exports.InvalidUint8ArrayError = exports.InvalidMapError = exports.InvalidArrayError = exports.InvalidFloat64Error = exports.InvalidFloat32Error = exports.InvalidInt64Error = exports.InvalidInt32Error = exports.InvalidUint64Error = exports.InvalidUint32Error = exports.InvalidUint16Error = exports.InvalidUint8Error = exports.InvalidBooleanError = void 0;
const encoder_1 = require("./encoder");
const kind_1 = require("./kind");
/* eslint-disable no-bitwise */
const CONTINUATION = 0x80;
const MAXLEN16 = 3;
const MAXLEN32 = 5;
const MAXLEN64 = 10;
class InvalidBooleanError extends Error {
    constructor() {
        super();
        Object.setPrototypeOf(this, InvalidBooleanError.prototype);
    }
}
exports.InvalidBooleanError = InvalidBooleanError;
class InvalidUint8Error extends Error {
    constructor() {
        super();
        Object.setPrototypeOf(this, InvalidUint8Error.prototype);
    }
}
exports.InvalidUint8Error = InvalidUint8Error;
class InvalidUint16Error extends Error {
    constructor() {
        super();
        Object.setPrototypeOf(this, InvalidUint16Error.prototype);
    }
}
exports.InvalidUint16Error = InvalidUint16Error;
class InvalidUint32Error extends Error {
    constructor() {
        super();
        Object.setPrototypeOf(this, InvalidUint32Error.prototype);
    }
}
exports.InvalidUint32Error = InvalidUint32Error;
class InvalidUint64Error extends Error {
    constructor() {
        super();
        Object.setPrototypeOf(this, InvalidUint64Error.prototype);
    }
}
exports.InvalidUint64Error = InvalidUint64Error;
class InvalidInt32Error extends Error {
    constructor() {
        super();
        Object.setPrototypeOf(this, InvalidInt32Error.prototype);
    }
}
exports.InvalidInt32Error = InvalidInt32Error;
class InvalidInt64Error extends Error {
    constructor() {
        super();
        Object.setPrototypeOf(this, InvalidInt64Error.prototype);
    }
}
exports.InvalidInt64Error = InvalidInt64Error;
class InvalidFloat32Error extends Error {
    constructor() {
        super();
        Object.setPrototypeOf(this, InvalidFloat32Error.prototype);
    }
}
exports.InvalidFloat32Error = InvalidFloat32Error;
class InvalidFloat64Error extends Error {
    constructor() {
        super();
        Object.setPrototypeOf(this, InvalidFloat64Error.prototype);
    }
}
exports.InvalidFloat64Error = InvalidFloat64Error;
class InvalidArrayError extends Error {
    constructor() {
        super();
        Object.setPrototypeOf(this, InvalidArrayError.prototype);
    }
}
exports.InvalidArrayError = InvalidArrayError;
class InvalidMapError extends Error {
    constructor() {
        super();
        Object.setPrototypeOf(this, InvalidMapError.prototype);
    }
}
exports.InvalidMapError = InvalidMapError;
class InvalidUint8ArrayError extends Error {
    constructor() {
        super();
        Object.setPrototypeOf(this, InvalidUint8ArrayError.prototype);
    }
}
exports.InvalidUint8ArrayError = InvalidUint8ArrayError;
class InvalidStringError extends Error {
    constructor() {
        super();
        Object.setPrototypeOf(this, InvalidStringError.prototype);
    }
}
exports.InvalidStringError = InvalidStringError;
class InvalidErrorError extends Error {
    constructor() {
        super();
        Object.setPrototypeOf(this, InvalidErrorError.prototype);
    }
}
exports.InvalidErrorError = InvalidErrorError;
class Decoder {
    constructor(buf) {
        this.buf = buf;
        _Decoder_pos.set(this, 0);
        this.buf = buf;
    }
    peek() {
        return this.buf[__classPrivateFieldGet(this, _Decoder_pos, "f")];
    }
    pop() {
        const val = this.buf[__classPrivateFieldGet(this, _Decoder_pos, "f")];
        __classPrivateFieldSet(this, _Decoder_pos, __classPrivateFieldGet(this, _Decoder_pos, "f") + 1, "f");
        return val;
    }
    validateKind(expected, Err) {
        if (this.peek() !== expected) {
            throw new Err();
        }
        __classPrivateFieldSet(this, _Decoder_pos, __classPrivateFieldGet(this, _Decoder_pos, "f") + 1, "f");
    }
    get length() {
        return this.buf.length - __classPrivateFieldGet(this, _Decoder_pos, "f");
    }
    varint(maxLen, signed = false) {
        let num = 0n;
        let shift = 0n;
        for (let i = 1; i < maxLen + 1; i += 1) {
            const b = this.pop();
            if (b < BigInt(CONTINUATION)) {
                num += BigInt(b) << shift;
                if (signed) {
                    // two's complement
                    num = num % 2n === 0n ? num / 2n : -(num + 1n) / 2n;
                }
                return num;
            }
            num += BigInt(b & (CONTINUATION - 1)) << shift;
            shift += 7n;
        }
        return num;
    }
    null() {
        const val = this.peek() === kind_1.Kind.Null;
        if (val) {
            __classPrivateFieldSet(this, _Decoder_pos, __classPrivateFieldGet(this, _Decoder_pos, "f") + 1, "f");
        }
        return val;
    }
    any() {
        const val = this.peek() === kind_1.Kind.Any;
        if (val) {
            __classPrivateFieldSet(this, _Decoder_pos, __classPrivateFieldGet(this, _Decoder_pos, "f") + 1, "f");
        }
        return val;
    }
    boolean() {
        this.validateKind(kind_1.Kind.Boolean, InvalidBooleanError);
        return this.pop() === encoder_1.BOOLEAN_TRUE;
    }
    uint8() {
        this.validateKind(kind_1.Kind.Uint8, InvalidUint8Error);
        const dataView = new DataView(this.buf.buffer, this.buf.byteOffset + __classPrivateFieldGet(this, _Decoder_pos, "f"), 1);
        const val = dataView.getUint8(0);
        __classPrivateFieldSet(this, _Decoder_pos, __classPrivateFieldGet(this, _Decoder_pos, "f") + 1, "f");
        return val;
    }
    uint16() {
        this.validateKind(kind_1.Kind.Uint16, InvalidUint16Error);
        let num = 0;
        let shift = 0;
        for (let i = 1; i < MAXLEN16 + 1; i += 1) {
            const b = this.pop();
            if (b < CONTINUATION) {
                return (num | (b << shift)) >>> 0;
            }
            num |= b & ((CONTINUATION - 1) << shift);
            shift += 7;
        }
        return num;
    }
    uint32() {
        this.validateKind(kind_1.Kind.Uint32, InvalidUint32Error);
        return Number(this.varint(MAXLEN32));
    }
    uint64() {
        this.validateKind(kind_1.Kind.Uint64, InvalidUint64Error);
        return this.varint(MAXLEN64);
    }
    int32() {
        this.validateKind(kind_1.Kind.Int32, InvalidInt32Error);
        return Number(this.varint(MAXLEN32, true));
    }
    int64() {
        this.validateKind(kind_1.Kind.Int64, InvalidInt64Error);
        return this.varint(MAXLEN64, true);
    }
    float32() {
        this.validateKind(kind_1.Kind.Float32, InvalidFloat32Error);
        const dataView = new DataView(this.buf.buffer, this.buf.byteOffset + __classPrivateFieldGet(this, _Decoder_pos, "f"), 4);
        const val = dataView.getFloat32(0);
        __classPrivateFieldSet(this, _Decoder_pos, __classPrivateFieldGet(this, _Decoder_pos, "f") + 4, "f");
        return val;
    }
    float64() {
        this.validateKind(kind_1.Kind.Float64, InvalidFloat64Error);
        const dataView = new DataView(this.buf.buffer, this.buf.byteOffset + __classPrivateFieldGet(this, _Decoder_pos, "f"), 8);
        const val = dataView.getFloat64(0);
        __classPrivateFieldSet(this, _Decoder_pos, __classPrivateFieldGet(this, _Decoder_pos, "f") + 8, "f");
        return val;
    }
    array(valueKind) {
        this.validateKind(kind_1.Kind.Array, InvalidArrayError);
        this.validateKind(valueKind, InvalidArrayError);
        return this.uint32();
    }
    map(keyKind, valueKind) {
        this.validateKind(kind_1.Kind.Map, InvalidMapError);
        this.validateKind(keyKind, InvalidMapError);
        this.validateKind(valueKind, InvalidMapError);
        return this.uint32();
    }
    uint8Array() {
        this.validateKind(kind_1.Kind.Uint8Array, InvalidUint8ArrayError);
        const size = this.uint32();
        const value = this.buf.slice(__classPrivateFieldGet(this, _Decoder_pos, "f"), __classPrivateFieldGet(this, _Decoder_pos, "f") + size);
        __classPrivateFieldSet(this, _Decoder_pos, __classPrivateFieldGet(this, _Decoder_pos, "f") + size, "f");
        return value;
    }
    string() {
        this.validateKind(kind_1.Kind.String, InvalidStringError);
        const size = this.uint32();
        const value = new TextDecoder().decode(this.buf.slice(__classPrivateFieldGet(this, _Decoder_pos, "f"), __classPrivateFieldGet(this, _Decoder_pos, "f") + size));
        __classPrivateFieldSet(this, _Decoder_pos, __classPrivateFieldGet(this, _Decoder_pos, "f") + size, "f");
        return value;
    }
    error() {
        this.validateKind(kind_1.Kind.Error, InvalidErrorError);
        const nestedType = this.pop();
        if (nestedType !== kind_1.Kind.String) {
            throw new InvalidErrorError();
        }
        const size = this.uint32();
        const value = new Error(new TextDecoder().decode(this.buf.slice(__classPrivateFieldGet(this, _Decoder_pos, "f"), __classPrivateFieldGet(this, _Decoder_pos, "f") + size)));
        __classPrivateFieldSet(this, _Decoder_pos, __classPrivateFieldGet(this, _Decoder_pos, "f") + size, "f");
        return value;
    }
}
exports.Decoder = Decoder;
_Decoder_pos = new WeakMap();
//# sourceMappingURL=decoder.js.map