"use strict";
/*
    Copyright 2023 Loophole Labs

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

           http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
 */
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _Encoder_pos, _Encoder_buf;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Encoder = exports.BOOLEAN_TRUE = exports.BOOLEAN_FALSE = void 0;
const kind_1 = require("./kind");
/* eslint-disable no-bitwise */
exports.BOOLEAN_FALSE = 0x00;
exports.BOOLEAN_TRUE = 0x01;
const CONTINUATION = 0x80;
const PRE_CONTINUATION = 0x7f;
const REST_BYTES = 7;
class Encoder {
    constructor(buf) {
        _Encoder_pos.set(this, 0);
        _Encoder_buf.set(this, void 0);
        if (buf === undefined) {
            __classPrivateFieldSet(this, _Encoder_buf, new Uint8Array(512), "f");
        }
        else {
            __classPrivateFieldSet(this, _Encoder_buf, buf, "f");
        }
    }
    resize(minLen) {
        if (__classPrivateFieldGet(this, _Encoder_buf, "f").length - __classPrivateFieldGet(this, _Encoder_pos, "f") < minLen) {
            const oldBuf = __classPrivateFieldGet(this, _Encoder_buf, "f");
            __classPrivateFieldSet(this, _Encoder_buf, new Uint8Array(__classPrivateFieldGet(this, _Encoder_buf, "f").buffer.byteLength * 2), "f");
            __classPrivateFieldGet(this, _Encoder_buf, "f").set(oldBuf);
        }
    }
    get bytes() {
        return new Uint8Array(__classPrivateFieldGet(this, _Encoder_buf, "f").buffer, 0, __classPrivateFieldGet(this, _Encoder_pos, "f"));
    }
    varint(value, kind, maxBytes, signed = false) {
        var _a, _b, _c, _d;
        let val = value;
        this.resize(maxBytes);
        __classPrivateFieldGet(this, _Encoder_buf, "f")[__classPrivateFieldGet(this, _Encoder_pos, "f")] = kind;
        __classPrivateFieldSet(this, _Encoder_pos, __classPrivateFieldGet(this, _Encoder_pos, "f") + 1, "f");
        if (signed) {
            // two's complement
            val = value >= 0 ? value * 2 : value * -2 - 1;
        }
        while (val >= CONTINUATION) {
            __classPrivateFieldGet(this, _Encoder_buf, "f")[__classPrivateFieldSet(this, _Encoder_pos, (_b = __classPrivateFieldGet(this, _Encoder_pos, "f"), _a = _b++, _b), "f"), _a] = val | CONTINUATION;
            val >>>= REST_BYTES;
        }
        __classPrivateFieldGet(this, _Encoder_buf, "f")[__classPrivateFieldSet(this, _Encoder_pos, (_d = __classPrivateFieldGet(this, _Encoder_pos, "f"), _c = _d++, _d), "f"), _c] = val;
        return this;
    }
    varintBig(value, kind, maxBytes, signed = false) {
        var _a, _b, _c, _d;
        let val = BigInt(value);
        this.resize(maxBytes);
        __classPrivateFieldGet(this, _Encoder_buf, "f")[__classPrivateFieldGet(this, _Encoder_pos, "f")] = kind;
        __classPrivateFieldSet(this, _Encoder_pos, __classPrivateFieldGet(this, _Encoder_pos, "f") + 1, "f");
        if (signed) {
            // two's complement
            val = val >= 0 ? val * 2n : val * -2n - 1n;
        }
        while (val >= CONTINUATION) {
            __classPrivateFieldGet(this, _Encoder_buf, "f")[__classPrivateFieldSet(this, _Encoder_pos, (_b = __classPrivateFieldGet(this, _Encoder_pos, "f"), _a = _b++, _b), "f"), _a] =
                Number(val & BigInt(PRE_CONTINUATION)) | CONTINUATION;
            val >>= BigInt(REST_BYTES);
        }
        __classPrivateFieldGet(this, _Encoder_buf, "f")[__classPrivateFieldSet(this, _Encoder_pos, (_d = __classPrivateFieldGet(this, _Encoder_pos, "f"), _c = _d++, _d), "f"), _c] = Number(val);
        return this;
    }
    null() {
        this.resize(1);
        __classPrivateFieldGet(this, _Encoder_buf, "f")[__classPrivateFieldGet(this, _Encoder_pos, "f")] = kind_1.Kind.Null;
        __classPrivateFieldSet(this, _Encoder_pos, __classPrivateFieldGet(this, _Encoder_pos, "f") + 1, "f");
        return this;
    }
    any() {
        this.resize(1);
        __classPrivateFieldGet(this, _Encoder_buf, "f")[__classPrivateFieldGet(this, _Encoder_pos, "f")] = kind_1.Kind.Any;
        __classPrivateFieldSet(this, _Encoder_pos, __classPrivateFieldGet(this, _Encoder_pos, "f") + 1, "f");
        return this;
    }
    boolean(value) {
        this.resize(2);
        __classPrivateFieldGet(this, _Encoder_buf, "f")[__classPrivateFieldGet(this, _Encoder_pos, "f")] = kind_1.Kind.Boolean;
        __classPrivateFieldGet(this, _Encoder_buf, "f")[__classPrivateFieldGet(this, _Encoder_pos, "f") + 1] = value ? exports.BOOLEAN_TRUE : exports.BOOLEAN_FALSE;
        __classPrivateFieldSet(this, _Encoder_pos, __classPrivateFieldGet(this, _Encoder_pos, "f") + 2, "f");
        return this;
    }
    uint8(value) {
        this.resize(2);
        __classPrivateFieldGet(this, _Encoder_buf, "f")[__classPrivateFieldGet(this, _Encoder_pos, "f")] = kind_1.Kind.Uint8;
        const dataView = new DataView(Uint8Array.from([0]).buffer);
        dataView.setUint8(0, value);
        const bytes = new Uint8Array(dataView.buffer);
        __classPrivateFieldGet(this, _Encoder_buf, "f").set(bytes, __classPrivateFieldGet(this, _Encoder_pos, "f") + 1);
        __classPrivateFieldSet(this, _Encoder_pos, __classPrivateFieldGet(this, _Encoder_pos, "f") + (bytes.length + 1), "f");
        return this;
    }
    uint16(value) {
        return this.varint(value, kind_1.Kind.Uint16, 3);
    }
    uint32(value) {
        return this.varint(value, kind_1.Kind.Uint32, 5);
    }
    uint64(value) {
        return this.varintBig(value, kind_1.Kind.Uint64, 9);
    }
    int32(value) {
        return this.varint(value, kind_1.Kind.Int32, 5, true);
    }
    int64(value) {
        return this.varintBig(value, kind_1.Kind.Int64, 9, true);
    }
    float32(value) {
        this.resize(5);
        __classPrivateFieldGet(this, _Encoder_buf, "f")[__classPrivateFieldGet(this, _Encoder_pos, "f")] = kind_1.Kind.Float32;
        const dataView = new DataView(Float32Array.from([0]).buffer);
        dataView.setFloat32(0, value);
        const bytes = new Uint8Array(dataView.buffer);
        __classPrivateFieldGet(this, _Encoder_buf, "f").set(bytes, __classPrivateFieldGet(this, _Encoder_pos, "f") + 1);
        __classPrivateFieldSet(this, _Encoder_pos, __classPrivateFieldGet(this, _Encoder_pos, "f") + (bytes.length + 1), "f");
        return this;
    }
    float64(value) {
        this.resize(9);
        __classPrivateFieldGet(this, _Encoder_buf, "f")[__classPrivateFieldGet(this, _Encoder_pos, "f")] = kind_1.Kind.Float64;
        const dataView = new DataView(Float64Array.from([0]).buffer);
        dataView.setFloat64(0, value);
        const bytes = new Uint8Array(dataView.buffer);
        __classPrivateFieldGet(this, _Encoder_buf, "f").set(bytes, __classPrivateFieldGet(this, _Encoder_pos, "f") + 1);
        __classPrivateFieldSet(this, _Encoder_pos, __classPrivateFieldGet(this, _Encoder_pos, "f") + (bytes.length + 1), "f");
        return this;
    }
    array(size, valueKind) {
        this.resize(2);
        __classPrivateFieldGet(this, _Encoder_buf, "f")[__classPrivateFieldGet(this, _Encoder_pos, "f")] = kind_1.Kind.Array;
        __classPrivateFieldGet(this, _Encoder_buf, "f")[__classPrivateFieldGet(this, _Encoder_pos, "f") + 1] = valueKind;
        __classPrivateFieldSet(this, _Encoder_pos, __classPrivateFieldGet(this, _Encoder_pos, "f") + 2, "f");
        this.uint32(size);
        return this;
    }
    map(size, keyKind, valueKind) {
        this.resize(3);
        __classPrivateFieldGet(this, _Encoder_buf, "f")[__classPrivateFieldGet(this, _Encoder_pos, "f")] = kind_1.Kind.Map;
        __classPrivateFieldGet(this, _Encoder_buf, "f")[__classPrivateFieldGet(this, _Encoder_pos, "f") + 1] = keyKind;
        __classPrivateFieldGet(this, _Encoder_buf, "f")[__classPrivateFieldGet(this, _Encoder_pos, "f") + 2] = valueKind;
        __classPrivateFieldSet(this, _Encoder_pos, __classPrivateFieldGet(this, _Encoder_pos, "f") + 3, "f");
        this.uint32(size);
        return this;
    }
    uint8Array(value) {
        this.resize(5 + value.length);
        __classPrivateFieldGet(this, _Encoder_buf, "f")[__classPrivateFieldGet(this, _Encoder_pos, "f")] = kind_1.Kind.Uint8Array;
        __classPrivateFieldSet(this, _Encoder_pos, __classPrivateFieldGet(this, _Encoder_pos, "f") + 1, "f");
        this.uint32(value.length);
        __classPrivateFieldGet(this, _Encoder_buf, "f").set(value, __classPrivateFieldGet(this, _Encoder_pos, "f"));
        __classPrivateFieldSet(this, _Encoder_pos, __classPrivateFieldGet(this, _Encoder_pos, "f") + value.length, "f");
        return this;
    }
    string(value) {
        const v = new TextEncoder().encode(value);
        this.resize(5 + v.length);
        __classPrivateFieldGet(this, _Encoder_buf, "f")[__classPrivateFieldGet(this, _Encoder_pos, "f")] = kind_1.Kind.String;
        __classPrivateFieldSet(this, _Encoder_pos, __classPrivateFieldGet(this, _Encoder_pos, "f") + 1, "f");
        this.uint32(v.length);
        __classPrivateFieldGet(this, _Encoder_buf, "f").set(v, __classPrivateFieldGet(this, _Encoder_pos, "f"));
        __classPrivateFieldSet(this, _Encoder_pos, __classPrivateFieldGet(this, _Encoder_pos, "f") + v.length, "f");
        return this;
    }
    error(value) {
        const v = new TextEncoder().encode(value.message);
        this.resize(6 + v.length);
        __classPrivateFieldGet(this, _Encoder_buf, "f")[__classPrivateFieldGet(this, _Encoder_pos, "f")] = kind_1.Kind.Error;
        __classPrivateFieldGet(this, _Encoder_buf, "f")[__classPrivateFieldGet(this, _Encoder_pos, "f") + 1] = kind_1.Kind.String;
        __classPrivateFieldSet(this, _Encoder_pos, __classPrivateFieldGet(this, _Encoder_pos, "f") + 2, "f");
        this.uint32(v.length);
        __classPrivateFieldGet(this, _Encoder_buf, "f").set(v, __classPrivateFieldGet(this, _Encoder_pos, "f"));
        __classPrivateFieldSet(this, _Encoder_pos, __classPrivateFieldGet(this, _Encoder_pos, "f") + v.length, "f");
        return this;
    }
}
exports.Encoder = Encoder;
_Encoder_pos = new WeakMap(), _Encoder_buf = new WeakMap();
//# sourceMappingURL=encoder.js.map