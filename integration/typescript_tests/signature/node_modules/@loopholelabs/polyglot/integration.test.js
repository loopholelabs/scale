"use strict";
/*
    Copyright 2023 Loophole Labs

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

           http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = __importStar(require("fs/promises"));
const JSONBigint = __importStar(require("json-bigint"));
const util_1 = require("util");
const decoder_1 = require("./decoder");
const encoder_1 = require("./encoder");
const kind_1 = require("./kind");
window.TextEncoder = util_1.TextEncoder;
window.TextDecoder = util_1.TextDecoder;
const base64ToUint8Array = (base64) => {
    const buf = Buffer.from(base64, "base64");
    return new Uint8Array(buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength));
};
describe("Integration test", () => {
    let testData = [];
    beforeAll(async () => {
        const rawTestData = JSONBigint.parse(await fs.readFile("./integration-test-data.json", "utf8"));
        testData = rawTestData.map((el) => ({
            ...el,
            encodedValue: base64ToUint8Array(el.encodedValue),
        }));
    });
    it("Can run the decode tests from the test data", () => {
        testData.forEach((v) => {
            switch (v.kind) {
                case kind_1.Kind.Null: {
                    const decoded = new decoder_1.Decoder(v.encodedValue).null();
                    if (v.decodedValue === null) {
                        expect(decoded).toBe(true);
                    }
                    else {
                        expect(decoded).toBe(false);
                    }
                    return;
                }
                case kind_1.Kind.Boolean: {
                    const decoded = new decoder_1.Decoder(v.encodedValue).boolean();
                    expect(decoded).toBe(v.decodedValue);
                    return;
                }
                case kind_1.Kind.Uint8: {
                    const decoded = new decoder_1.Decoder(v.encodedValue).uint8();
                    expect(decoded).toBe(v.decodedValue);
                    return;
                }
                case kind_1.Kind.Uint16: {
                    const decoded = new decoder_1.Decoder(v.encodedValue).uint16();
                    expect(decoded).toBe(v.decodedValue);
                    return;
                }
                case kind_1.Kind.Uint32: {
                    const decoded = new decoder_1.Decoder(v.encodedValue).uint32();
                    expect(decoded).toBe(v.decodedValue);
                    return;
                }
                case kind_1.Kind.Uint64: {
                    const decoded = new decoder_1.Decoder(v.encodedValue).uint64();
                    expect(decoded).toBe(BigInt(v.decodedValue));
                    return;
                }
                case kind_1.Kind.Int32: {
                    const decoded = new decoder_1.Decoder(v.encodedValue).int32();
                    expect(decoded).toBe(v.decodedValue);
                    return;
                }
                case kind_1.Kind.Int64: {
                    const decoded = new decoder_1.Decoder(v.encodedValue).int64();
                    expect(decoded).toBe(BigInt(v.decodedValue));
                    return;
                }
                case kind_1.Kind.Float32: {
                    const decoded = new decoder_1.Decoder(v.encodedValue).float32();
                    expect(decoded).toBeCloseTo(v.decodedValue, 2);
                    return;
                }
                case kind_1.Kind.Float64: {
                    const decoded = new decoder_1.Decoder(v.encodedValue).float64();
                    expect(decoded).toBe(parseFloat(v.decodedValue));
                    return;
                }
                case kind_1.Kind.Array: {
                    const decoder = new decoder_1.Decoder(v.encodedValue);
                    const size = decoder.array(kind_1.Kind.String);
                    expect(size).toBe(v.decodedValue.length);
                    for (let i = 0; i < size; i += 1) {
                        const value = decoder.string();
                        expect(value).toBe(v.decodedValue[i]);
                    }
                    return;
                }
                case kind_1.Kind.Map: {
                    const decoder = new decoder_1.Decoder(v.encodedValue);
                    const size = decoder.map(kind_1.Kind.String, kind_1.Kind.Uint32);
                    expect(size).toBe(Object.keys(v.decodedValue).length);
                    for (let i = 0; i < size; i += 1) {
                        const key = decoder.string();
                        const value = decoder.uint32();
                        expect(v.decodedValue[key.toString()]).toBe(value);
                    }
                    return;
                }
                case kind_1.Kind.Uint8Array: {
                    const decoded = new decoder_1.Decoder(v.encodedValue).uint8Array();
                    expect(decoded).toEqual(base64ToUint8Array(v.decodedValue));
                    return;
                }
                case kind_1.Kind.String: {
                    const decoded = new decoder_1.Decoder(v.encodedValue).string();
                    expect(decoded).toBe(v.decodedValue);
                    return;
                }
                case kind_1.Kind.Error: {
                    const decoded = new decoder_1.Decoder(v.encodedValue).error();
                    expect(decoded).toEqual(new Error(v.decodedValue));
                    return;
                }
                default:
                    throw new Error(`Unimplemented decoder for kind ${v.kind} and test ${v.name}`);
            }
        });
    });
    it("Can run the encode tests from the test data", () => {
        testData.forEach((v) => {
            switch (v.kind) {
                case kind_1.Kind.Null: {
                    const encoded = new encoder_1.Encoder().null();
                    expect(encoded.bytes).toEqual(v.encodedValue);
                    return;
                }
                case kind_1.Kind.Boolean: {
                    const encoded = new encoder_1.Encoder().boolean(v.decodedValue);
                    expect(encoded.bytes).toEqual(v.encodedValue);
                    return;
                }
                case kind_1.Kind.Uint8: {
                    const encoded = new encoder_1.Encoder().uint8(v.decodedValue);
                    expect(encoded.bytes).toEqual(v.encodedValue);
                    return;
                }
                case kind_1.Kind.Uint16: {
                    const encoded = new encoder_1.Encoder().uint16(v.decodedValue);
                    expect(encoded.bytes).toEqual(v.encodedValue);
                    return;
                }
                case kind_1.Kind.Uint32: {
                    const encoded = new encoder_1.Encoder().uint32(v.decodedValue);
                    expect(encoded.bytes).toEqual(v.encodedValue);
                    return;
                }
                case kind_1.Kind.Uint64: {
                    const encoded = new encoder_1.Encoder().uint64(v.decodedValue);
                    expect(encoded.bytes).toEqual(v.encodedValue);
                    return;
                }
                case kind_1.Kind.Int32: {
                    const encoded = new encoder_1.Encoder().int32(v.decodedValue);
                    expect(encoded.bytes).toEqual(v.encodedValue);
                    return;
                }
                case kind_1.Kind.Int64: {
                    const encoded = new encoder_1.Encoder().int64(v.decodedValue);
                    expect(encoded.bytes).toEqual(v.encodedValue);
                    return;
                }
                case kind_1.Kind.Float32: {
                    const encoded = new encoder_1.Encoder().float32(v.decodedValue);
                    expect(encoded.bytes).toEqual(v.encodedValue);
                    return;
                }
                case kind_1.Kind.Float64: {
                    const encoded = new encoder_1.Encoder().float64(v.decodedValue);
                    expect(encoded.bytes).toEqual(v.encodedValue);
                    return;
                }
                case kind_1.Kind.Array: {
                    const encoded = new encoder_1.Encoder().array(v.decodedValue.length, kind_1.Kind.String);
                    v.decodedValue.forEach((el) => {
                        encoded.string(el);
                    });
                    expect(encoded.bytes).toEqual(v.encodedValue);
                    return;
                }
                case kind_1.Kind.Map: {
                    const encoded = new encoder_1.Encoder().map(Object.keys(v.decodedValue).length, kind_1.Kind.String, kind_1.Kind.Uint32);
                    Object.entries(v.decodedValue)
                        .sort(([prevKey], [currKey]) => prevKey.localeCompare(currKey))
                        .forEach(([key, value]) => {
                        encoded.string(key);
                        encoded.uint32(value);
                    });
                    expect(encoded.bytes).toEqual(v.encodedValue);
                    return;
                }
                case kind_1.Kind.Uint8Array: {
                    const encoded = new encoder_1.Encoder().uint8Array(base64ToUint8Array(v.decodedValue));
                    expect(encoded.bytes).toEqual(v.encodedValue);
                    return;
                }
                case kind_1.Kind.String: {
                    const encoded = new encoder_1.Encoder().string(v.decodedValue);
                    expect(encoded.bytes).toEqual(v.encodedValue);
                    return;
                }
                case kind_1.Kind.Error: {
                    const encoded = new encoder_1.Encoder().error(new Error(v.decodedValue));
                    expect(encoded.bytes).toEqual(v.encodedValue);
                    return;
                }
                default:
                    throw new Error(`Unimplemented encoder for kind ${v.kind} and test ${v.name}`);
            }
        });
    });
});
//# sourceMappingURL=integration.test.js.map