{
  "version": 3,
  "sources": ["<stdin>"],
  "sourceRoot": "types.js",
  "sourcesContent": ["// Code generated by scale-signature 0.3.20, DO NOT EDIT.\n// output: local-example-latest-host\n\nimport { Encoder, Decoder, Kind } from \"@loopholelabs/polyglot\"\n\nexport enum GenericEnum {\n  FirstValue = 0,\n\n  SecondValue = 1,\n\n  DefaultValue = 2,\n\n}\nexport class EmptyModel {\n  /**\n  * @throws {Error}\n  */\n  constructor (decoder?: Decoder) {\n    if (decoder) {\n      let err: Error | undefined;\n      try {\n        err = decoder.error();\n      } catch (_) {}\n      if (err !== undefined) {\n        throw err;\n      }\n    } else {\n    }\n  }\n\n  /**\n  * @throws {Error}\n  */\n  encode (encoder: Encoder) {\n  }\n\n  /**\n  * @throws {Error}\n  */\n  static decode (decoder: Decoder): EmptyModel | undefined {\n    if (decoder.null()) {\n      return undefined\n    }\n    return new EmptyModel(decoder);\n  }\n\n  /**\n  * @throws {Error}\n  */\n  static encode_undefined (encoder: Encoder) {\n    encoder.null();\n  }\n}\n\n// EmptyModelWithDescription: Test Description\nexport class EmptyModelWithDescription {\n  /**\n  * @throws {Error}\n  */\n  constructor (decoder?: Decoder) {\n    if (decoder) {\n      let err: Error | undefined;\n      try {\n        err = decoder.error();\n      } catch (_) {}\n      if (err !== undefined) {\n        throw err;\n      }\n    } else {\n    }\n  }\n\n  /**\n  * @throws {Error}\n  */\n  encode (encoder: Encoder) {\n  }\n\n  /**\n  * @throws {Error}\n  */\n  static decode (decoder: Decoder): EmptyModelWithDescription | undefined {\n    if (decoder.null()) {\n      return undefined\n    }\n    return new EmptyModelWithDescription(decoder);\n  }\n\n  /**\n  * @throws {Error}\n  */\n  static encode_undefined (encoder: Encoder) {\n    encoder.null();\n  }\n}\n\nexport class ModelWithSingleStringField {\n  stringField: string;\n\n  /**\n  * @throws {Error}\n  */\n  constructor (decoder?: Decoder) {\n    if (decoder) {\n      let err: Error | undefined;\n      try {\n        err = decoder.error();\n      } catch (_) {}\n      if (err !== undefined) {\n        throw err;\n      }\n      this.stringField = decoder.string();\n    } else {\n      this.stringField = \"DefaultValue\";\n    }\n  }\n\n  /**\n  * @throws {Error}\n  */\n  encode (encoder: Encoder) {\n    encoder.string(this.stringField);\n  }\n\n  /**\n  * @throws {Error}\n  */\n  static decode (decoder: Decoder): ModelWithSingleStringField | undefined {\n    if (decoder.null()) {\n      return undefined\n    }\n    return new ModelWithSingleStringField(decoder);\n  }\n\n  /**\n  * @throws {Error}\n  */\n  static encode_undefined (encoder: Encoder) {\n    encoder.null();\n  }\n}\n\n// ModelWithSingleStringFieldAndDescription: Test Description\nexport class ModelWithSingleStringFieldAndDescription {\n  stringField: string;\n\n  /**\n  * @throws {Error}\n  */\n  constructor (decoder?: Decoder) {\n    if (decoder) {\n      let err: Error | undefined;\n      try {\n        err = decoder.error();\n      } catch (_) {}\n      if (err !== undefined) {\n        throw err;\n      }\n      this.stringField = decoder.string();\n    } else {\n      this.stringField = \"DefaultValue\";\n    }\n  }\n\n  /**\n  * @throws {Error}\n  */\n  encode (encoder: Encoder) {\n    encoder.string(this.stringField);\n  }\n\n  /**\n  * @throws {Error}\n  */\n  static decode (decoder: Decoder): ModelWithSingleStringFieldAndDescription | undefined {\n    if (decoder.null()) {\n      return undefined\n    }\n    return new ModelWithSingleStringFieldAndDescription(decoder);\n  }\n\n  /**\n  * @throws {Error}\n  */\n  static encode_undefined (encoder: Encoder) {\n    encoder.null();\n  }\n}\n\nexport class ModelWithSingleInt32Field {\n  int32Field: number;\n\n  /**\n  * @throws {Error}\n  */\n  constructor (decoder?: Decoder) {\n    if (decoder) {\n      let err: Error | undefined;\n      try {\n        err = decoder.error();\n      } catch (_) {}\n      if (err !== undefined) {\n        throw err;\n      }\n      this.int32Field = decoder.int32();\n    } else {\n      this.int32Field = 32;\n    }\n  }\n\n  /**\n  * @throws {Error}\n  */\n  encode (encoder: Encoder) {\n    encoder.int32(this.int32Field);\n  }\n\n  /**\n  * @throws {Error}\n  */\n  static decode (decoder: Decoder): ModelWithSingleInt32Field | undefined {\n    if (decoder.null()) {\n      return undefined\n    }\n    return new ModelWithSingleInt32Field(decoder);\n  }\n\n  /**\n  * @throws {Error}\n  */\n  static encode_undefined (encoder: Encoder) {\n    encoder.null();\n  }\n}\n\n// ModelWithSingleInt32FieldAndDescription: Test Description\nexport class ModelWithSingleInt32FieldAndDescription {\n  int32Field: number;\n\n  /**\n  * @throws {Error}\n  */\n  constructor (decoder?: Decoder) {\n    if (decoder) {\n      let err: Error | undefined;\n      try {\n        err = decoder.error();\n      } catch (_) {}\n      if (err !== undefined) {\n        throw err;\n      }\n      this.int32Field = decoder.int32();\n    } else {\n      this.int32Field = 32;\n    }\n  }\n\n  /**\n  * @throws {Error}\n  */\n  encode (encoder: Encoder) {\n    encoder.int32(this.int32Field);\n  }\n\n  /**\n  * @throws {Error}\n  */\n  static decode (decoder: Decoder): ModelWithSingleInt32FieldAndDescription | undefined {\n    if (decoder.null()) {\n      return undefined\n    }\n    return new ModelWithSingleInt32FieldAndDescription(decoder);\n  }\n\n  /**\n  * @throws {Error}\n  */\n  static encode_undefined (encoder: Encoder) {\n    encoder.null();\n  }\n}\n\nexport class ModelWithMultipleFields {\n  stringField: string;\n\n  int32Field: number;\n\n  /**\n  * @throws {Error}\n  */\n  constructor (decoder?: Decoder) {\n    if (decoder) {\n      let err: Error | undefined;\n      try {\n        err = decoder.error();\n      } catch (_) {}\n      if (err !== undefined) {\n        throw err;\n      }\n      this.stringField = decoder.string();\n      this.int32Field = decoder.int32();\n    } else {\n      this.stringField = \"DefaultValue\";\n      this.int32Field = 32;\n    }\n  }\n\n  /**\n  * @throws {Error}\n  */\n  encode (encoder: Encoder) {\n    encoder.string(this.stringField);\n    encoder.int32(this.int32Field);\n  }\n\n  /**\n  * @throws {Error}\n  */\n  static decode (decoder: Decoder): ModelWithMultipleFields | undefined {\n    if (decoder.null()) {\n      return undefined\n    }\n    return new ModelWithMultipleFields(decoder);\n  }\n\n  /**\n  * @throws {Error}\n  */\n  static encode_undefined (encoder: Encoder) {\n    encoder.null();\n  }\n}\n\n// ModelWithMultipleFieldsAndDescription: Test Description\nexport class ModelWithMultipleFieldsAndDescription {\n  stringField: string;\n\n  int32Field: number;\n\n  /**\n  * @throws {Error}\n  */\n  constructor (decoder?: Decoder) {\n    if (decoder) {\n      let err: Error | undefined;\n      try {\n        err = decoder.error();\n      } catch (_) {}\n      if (err !== undefined) {\n        throw err;\n      }\n      this.stringField = decoder.string();\n      this.int32Field = decoder.int32();\n    } else {\n      this.stringField = \"DefaultValue\";\n      this.int32Field = 32;\n    }\n  }\n\n  /**\n  * @throws {Error}\n  */\n  encode (encoder: Encoder) {\n    encoder.string(this.stringField);\n    encoder.int32(this.int32Field);\n  }\n\n  /**\n  * @throws {Error}\n  */\n  static decode (decoder: Decoder): ModelWithMultipleFieldsAndDescription | undefined {\n    if (decoder.null()) {\n      return undefined\n    }\n    return new ModelWithMultipleFieldsAndDescription(decoder);\n  }\n\n  /**\n  * @throws {Error}\n  */\n  static encode_undefined (encoder: Encoder) {\n    encoder.null();\n  }\n}\n\nexport class ModelWithEnum {\n  enumField: GenericEnum;\n\n  /**\n  * @throws {Error}\n  */\n  constructor (decoder?: Decoder) {\n    if (decoder) {\n      let err: Error | undefined;\n      try {\n        err = decoder.error();\n      } catch (_) {}\n      if (err !== undefined) {\n        throw err;\n      }\n      this.enumField = decoder.uint32();\n    } else {\n      this.enumField = GenericEnum.DefaultValue;\n    }\n  }\n\n  /**\n  * @throws {Error}\n  */\n  encode (encoder: Encoder) {\n    encoder.uint32(this.enumField);\n  }\n\n  /**\n  * @throws {Error}\n  */\n  static decode (decoder: Decoder): ModelWithEnum | undefined {\n    if (decoder.null()) {\n      return undefined\n    }\n    return new ModelWithEnum(decoder);\n  }\n\n  /**\n  * @throws {Error}\n  */\n  static encode_undefined (encoder: Encoder) {\n    encoder.null();\n  }\n}\n\n// ModelWithEnumAndDescription: Test Description\nexport class ModelWithEnumAndDescription {\n  enumField: GenericEnum;\n\n  /**\n  * @throws {Error}\n  */\n  constructor (decoder?: Decoder) {\n    if (decoder) {\n      let err: Error | undefined;\n      try {\n        err = decoder.error();\n      } catch (_) {}\n      if (err !== undefined) {\n        throw err;\n      }\n      this.enumField = decoder.uint32();\n    } else {\n      this.enumField = GenericEnum.DefaultValue;\n    }\n  }\n\n  /**\n  * @throws {Error}\n  */\n  encode (encoder: Encoder) {\n    encoder.uint32(this.enumField);\n  }\n\n  /**\n  * @throws {Error}\n  */\n  static decode (decoder: Decoder): ModelWithEnumAndDescription | undefined {\n    if (decoder.null()) {\n      return undefined\n    }\n    return new ModelWithEnumAndDescription(decoder);\n  }\n\n  /**\n  * @throws {Error}\n  */\n  static encode_undefined (encoder: Encoder) {\n    encoder.null();\n  }\n}\n\nexport class ModelWithEnumAccessor {\n  enumField: GenericEnum;\n\n  /**\n  * @throws {Error}\n  */\n  constructor (decoder?: Decoder) {\n    if (decoder) {\n      let err: Error | undefined;\n      try {\n        err = decoder.error();\n      } catch (_) {}\n      if (err !== undefined) {\n        throw err;\n      }\n      this.enumField = decoder.uint32();\n    } else {\n      this.enumField = GenericEnum.DefaultValue;\n    }\n  }\n\n  /**\n  * @throws {Error}\n  */\n  encode (encoder: Encoder) {\n    encoder.uint32(this.enumField);\n  }\n\n  /**\n  * @throws {Error}\n  */\n  static decode (decoder: Decoder): ModelWithEnumAccessor | undefined {\n    if (decoder.null()) {\n      return undefined\n    }\n    return new ModelWithEnumAccessor(decoder);\n  }\n\n  /**\n  * @throws {Error}\n  */\n  static encode_undefined (encoder: Encoder) {\n    encoder.null();\n  }\n}\n\n// ModelWithEnumAccessorAndDescription: Test Description\nexport class ModelWithEnumAccessorAndDescription {\n  enumField: GenericEnum;\n\n  /**\n  * @throws {Error}\n  */\n  constructor (decoder?: Decoder) {\n    if (decoder) {\n      let err: Error | undefined;\n      try {\n        err = decoder.error();\n      } catch (_) {}\n      if (err !== undefined) {\n        throw err;\n      }\n      this.enumField = decoder.uint32();\n    } else {\n      this.enumField = GenericEnum.DefaultValue;\n    }\n  }\n\n  /**\n  * @throws {Error}\n  */\n  encode (encoder: Encoder) {\n    encoder.uint32(this.enumField);\n  }\n\n  /**\n  * @throws {Error}\n  */\n  static decode (decoder: Decoder): ModelWithEnumAccessorAndDescription | undefined {\n    if (decoder.null()) {\n      return undefined\n    }\n    return new ModelWithEnumAccessorAndDescription(decoder);\n  }\n\n  /**\n  * @throws {Error}\n  */\n  static encode_undefined (encoder: Encoder) {\n    encoder.null();\n  }\n}\n\nexport class ModelWithMultipleFieldsAccessor {\n  stringField: string;\n\n  int32Field: number;\n\n  /**\n  * @throws {Error}\n  */\n  constructor (decoder?: Decoder) {\n    if (decoder) {\n      let err: Error | undefined;\n      try {\n        err = decoder.error();\n      } catch (_) {}\n      if (err !== undefined) {\n        throw err;\n      }\n      this.stringField = decoder.string();\n      this.int32Field = decoder.int32();\n    } else {\n      this.stringField = \"DefaultValue\";\n      this.int32Field = 32;\n    }\n  }\n\n  /**\n  * @throws {Error}\n  */\n  encode (encoder: Encoder) {\n    encoder.string(this.stringField);\n    encoder.int32(this.int32Field);\n  }\n\n  /**\n  * @throws {Error}\n  */\n  static decode (decoder: Decoder): ModelWithMultipleFieldsAccessor | undefined {\n    if (decoder.null()) {\n      return undefined\n    }\n    return new ModelWithMultipleFieldsAccessor(decoder);\n  }\n\n  /**\n  * @throws {Error}\n  */\n  static encode_undefined (encoder: Encoder) {\n    encoder.null();\n  }\n}\n\n// ModelWithMultipleFieldsAccessorAndDescription: Test Description\nexport class ModelWithMultipleFieldsAccessorAndDescription {\n  stringField: string;\n\n  int32Field: number;\n\n  /**\n  * @throws {Error}\n  */\n  constructor (decoder?: Decoder) {\n    if (decoder) {\n      let err: Error | undefined;\n      try {\n        err = decoder.error();\n      } catch (_) {}\n      if (err !== undefined) {\n        throw err;\n      }\n      this.stringField = decoder.string();\n      this.int32Field = decoder.int32();\n    } else {\n      this.stringField = \"DefaultValue\";\n      this.int32Field = 32;\n    }\n  }\n\n  /**\n  * @throws {Error}\n  */\n  encode (encoder: Encoder) {\n    encoder.string(this.stringField);\n    encoder.int32(this.int32Field);\n  }\n\n  /**\n  * @throws {Error}\n  */\n  static decode (decoder: Decoder): ModelWithMultipleFieldsAccessorAndDescription | undefined {\n    if (decoder.null()) {\n      return undefined\n    }\n    return new ModelWithMultipleFieldsAccessorAndDescription(decoder);\n  }\n\n  /**\n  * @throws {Error}\n  */\n  static encode_undefined (encoder: Encoder) {\n    encoder.null();\n  }\n}\n\nexport class ModelWithEmbeddedModels {\n  embeddedEmptyModel: EmptyModel | undefined;\n\n  embeddedModelArrayWithMultipleFieldsAccessor: Array<ModelWithMultipleFieldsAccessor>;\n\n  /**\n  * @throws {Error}\n  */\n  constructor (decoder?: Decoder) {\n    if (decoder) {\n      let err: Error | undefined;\n      try {\n        err = decoder.error();\n      } catch (_) {}\n      if (err !== undefined) {\n        throw err;\n      }\n      this.embeddedEmptyModel = EmptyModel.decode(decoder);\n      const embeddedModelArrayWithMultipleFieldsAccessorSize = decoder.array(Kind.Any);\n      this.embeddedModelArrayWithMultipleFieldsAccessor = new Array(embeddedModelArrayWithMultipleFieldsAccessorSize);\n      for (let i = 0; i < embeddedModelArrayWithMultipleFieldsAccessorSize; i += 1) {\n        const x = ModelWithMultipleFieldsAccessor.decode(decoder);\n        if (x !== undefined) {\n          this.embeddedModelArrayWithMultipleFieldsAccessor[i] = x;\n        }\n      }\n    } else {\n      this.embeddedEmptyModel = new EmptyModel();\n      this.embeddedModelArrayWithMultipleFieldsAccessor = [];\n    }\n  }\n\n  /**\n  * @throws {Error}\n  */\n  encode (encoder: Encoder) {\n    if (this.embeddedEmptyModel === undefined) {\n      encoder.null();\n    } else {\n      this.embeddedEmptyModel.encode(encoder);\n    }\n    const embeddedModelArrayWithMultipleFieldsAccessorLength = this.embeddedModelArrayWithMultipleFieldsAccessor.length;\n    encoder.array(embeddedModelArrayWithMultipleFieldsAccessorLength, Kind.Any);\n    for (let i = 0; i < embeddedModelArrayWithMultipleFieldsAccessorLength; i += 1) {\n      const el = this.embeddedModelArrayWithMultipleFieldsAccessor[i];\n      el.encode(encoder);\n    }\n  }\n\n  /**\n  * @throws {Error}\n  */\n  static decode (decoder: Decoder): ModelWithEmbeddedModels | undefined {\n    if (decoder.null()) {\n      return undefined\n    }\n    return new ModelWithEmbeddedModels(decoder);\n  }\n\n  /**\n  * @throws {Error}\n  */\n  static encode_undefined (encoder: Encoder) {\n    encoder.null();\n  }\n}\n\n// ModelWithEmbeddedModelsAndDescription: Test Description\nexport class ModelWithEmbeddedModelsAndDescription {\n  embeddedEmptyModel: EmptyModel | undefined;\n\n  embeddedModelArrayWithMultipleFieldsAccessor: Array<ModelWithMultipleFieldsAccessor>;\n\n  /**\n  * @throws {Error}\n  */\n  constructor (decoder?: Decoder) {\n    if (decoder) {\n      let err: Error | undefined;\n      try {\n        err = decoder.error();\n      } catch (_) {}\n      if (err !== undefined) {\n        throw err;\n      }\n      this.embeddedEmptyModel = EmptyModel.decode(decoder);\n      const embeddedModelArrayWithMultipleFieldsAccessorSize = decoder.array(Kind.Any);\n      this.embeddedModelArrayWithMultipleFieldsAccessor = new Array(embeddedModelArrayWithMultipleFieldsAccessorSize);\n      for (let i = 0; i < embeddedModelArrayWithMultipleFieldsAccessorSize; i += 1) {\n        const x = ModelWithMultipleFieldsAccessor.decode(decoder);\n        if (x !== undefined) {\n          this.embeddedModelArrayWithMultipleFieldsAccessor[i] = x;\n        }\n      }\n    } else {\n      this.embeddedEmptyModel = new EmptyModel();\n      this.embeddedModelArrayWithMultipleFieldsAccessor = [];\n    }\n  }\n\n  /**\n  * @throws {Error}\n  */\n  encode (encoder: Encoder) {\n    if (this.embeddedEmptyModel === undefined) {\n      encoder.null();\n    } else {\n      this.embeddedEmptyModel.encode(encoder);\n    }\n    const embeddedModelArrayWithMultipleFieldsAccessorLength = this.embeddedModelArrayWithMultipleFieldsAccessor.length;\n    encoder.array(embeddedModelArrayWithMultipleFieldsAccessorLength, Kind.Any);\n    for (let i = 0; i < embeddedModelArrayWithMultipleFieldsAccessorLength; i += 1) {\n      const el = this.embeddedModelArrayWithMultipleFieldsAccessor[i];\n      el.encode(encoder);\n    }\n  }\n\n  /**\n  * @throws {Error}\n  */\n  static decode (decoder: Decoder): ModelWithEmbeddedModelsAndDescription | undefined {\n    if (decoder.null()) {\n      return undefined\n    }\n    return new ModelWithEmbeddedModelsAndDescription(decoder);\n  }\n\n  /**\n  * @throws {Error}\n  */\n  static encode_undefined (encoder: Encoder) {\n    encoder.null();\n  }\n}\n\nexport class ModelWithEmbeddedModelsAccessor {\n  embeddedEmptyModel: EmptyModel | undefined;\n\n  embeddedModelArrayWithMultipleFieldsAccessor: Array<ModelWithMultipleFieldsAccessor>;\n\n  /**\n  * @throws {Error}\n  */\n  constructor (decoder?: Decoder) {\n    if (decoder) {\n      let err: Error | undefined;\n      try {\n        err = decoder.error();\n      } catch (_) {}\n      if (err !== undefined) {\n        throw err;\n      }\n      this.embeddedEmptyModel = EmptyModel.decode(decoder);\n      const embeddedModelArrayWithMultipleFieldsAccessorSize = decoder.array(Kind.Any);\n      this.embeddedModelArrayWithMultipleFieldsAccessor = new Array(embeddedModelArrayWithMultipleFieldsAccessorSize);\n      for (let i = 0; i < embeddedModelArrayWithMultipleFieldsAccessorSize; i += 1) {\n        const x = ModelWithMultipleFieldsAccessor.decode(decoder);\n        if (x !== undefined) {\n          this.embeddedModelArrayWithMultipleFieldsAccessor[i] = x;\n        }\n      }\n    } else {\n      this.embeddedEmptyModel = new EmptyModel();\n      this.embeddedModelArrayWithMultipleFieldsAccessor = [];\n    }\n  }\n\n  /**\n  * @throws {Error}\n  */\n  encode (encoder: Encoder) {\n    if (this.embeddedEmptyModel === undefined) {\n      encoder.null();\n    } else {\n      this.embeddedEmptyModel.encode(encoder);\n    }\n    const embeddedModelArrayWithMultipleFieldsAccessorLength = this.embeddedModelArrayWithMultipleFieldsAccessor.length;\n    encoder.array(embeddedModelArrayWithMultipleFieldsAccessorLength, Kind.Any);\n    for (let i = 0; i < embeddedModelArrayWithMultipleFieldsAccessorLength; i += 1) {\n      const el = this.embeddedModelArrayWithMultipleFieldsAccessor[i];\n      el.encode(encoder);\n    }\n  }\n\n  /**\n  * @throws {Error}\n  */\n  static decode (decoder: Decoder): ModelWithEmbeddedModelsAccessor | undefined {\n    if (decoder.null()) {\n      return undefined\n    }\n    return new ModelWithEmbeddedModelsAccessor(decoder);\n  }\n\n  /**\n  * @throws {Error}\n  */\n  static encode_undefined (encoder: Encoder) {\n    encoder.null();\n  }\n}\n\n// ModelWithEmbeddedModelsAccessorAndDescription: Test Description\nexport class ModelWithEmbeddedModelsAccessorAndDescription {\n  embeddedEmptyModel: EmptyModel | undefined;\n\n  embeddedModelArrayWithMultipleFieldsAccessor: Array<ModelWithMultipleFieldsAccessor>;\n\n  /**\n  * @throws {Error}\n  */\n  constructor (decoder?: Decoder) {\n    if (decoder) {\n      let err: Error | undefined;\n      try {\n        err = decoder.error();\n      } catch (_) {}\n      if (err !== undefined) {\n        throw err;\n      }\n      this.embeddedEmptyModel = EmptyModel.decode(decoder);\n      const embeddedModelArrayWithMultipleFieldsAccessorSize = decoder.array(Kind.Any);\n      this.embeddedModelArrayWithMultipleFieldsAccessor = new Array(embeddedModelArrayWithMultipleFieldsAccessorSize);\n      for (let i = 0; i < embeddedModelArrayWithMultipleFieldsAccessorSize; i += 1) {\n        const x = ModelWithMultipleFieldsAccessor.decode(decoder);\n        if (x !== undefined) {\n          this.embeddedModelArrayWithMultipleFieldsAccessor[i] = x;\n        }\n      }\n    } else {\n      this.embeddedEmptyModel = new EmptyModel();\n      this.embeddedModelArrayWithMultipleFieldsAccessor = [];\n    }\n  }\n\n  /**\n  * @throws {Error}\n  */\n  encode (encoder: Encoder) {\n    if (this.embeddedEmptyModel === undefined) {\n      encoder.null();\n    } else {\n      this.embeddedEmptyModel.encode(encoder);\n    }\n    const embeddedModelArrayWithMultipleFieldsAccessorLength = this.embeddedModelArrayWithMultipleFieldsAccessor.length;\n    encoder.array(embeddedModelArrayWithMultipleFieldsAccessorLength, Kind.Any);\n    for (let i = 0; i < embeddedModelArrayWithMultipleFieldsAccessorLength; i += 1) {\n      const el = this.embeddedModelArrayWithMultipleFieldsAccessor[i];\n      el.encode(encoder);\n    }\n  }\n\n  /**\n  * @throws {Error}\n  */\n  static decode (decoder: Decoder): ModelWithEmbeddedModelsAccessorAndDescription | undefined {\n    if (decoder.null()) {\n      return undefined\n    }\n    return new ModelWithEmbeddedModelsAccessorAndDescription(decoder);\n  }\n\n  /**\n  * @throws {Error}\n  */\n  static encode_undefined (encoder: Encoder) {\n    encoder.null();\n  }\n}\n\nexport class ModelWithAllFieldTypes {\n  modelField: EmptyModel | undefined;\n\n  modelArrayField: Array<EmptyModel>;\n\n  stringField: string;\n\n  stringArrayField: string[];\n\n  stringMapField: Map<string, string>;\n\n  stringMapFieldEmbedded: Map<string, EmptyModel>;\n\n  int32Field: number;\n\n  int32ArrayField: number[];\n\n  int32MapField: Map<number, number>;\n\n  int32MapFieldEmbedded: Map<number, EmptyModel>;\n\n  int64Field: bigint;\n\n  int64ArrayField: bigint[];\n\n  int64MapField: Map<bigint, bigint>;\n\n  int64MapFieldEmbedded: Map<bigint, EmptyModel>;\n\n  uint32Field: number;\n\n  uint32ArrayField: number[];\n\n  uint32MapField: Map<number, number>;\n\n  uint32MapFieldEmbedded: Map<number, EmptyModel>;\n\n  uint64Field: bigint;\n\n  uint64ArrayField: bigint[];\n\n  uint64MapField: Map<bigint, bigint>;\n\n  uint64MapFieldEmbedded: Map<bigint, EmptyModel>;\n\n  float32Field: number;\n\n  float32ArrayField: number[];\n\n  float64Field: number;\n\n  float64ArrayField: number[];\n\n  enumField: GenericEnum;\n\n  enumArrayField: GenericEnum[];\n\n  enumMapField: Map<GenericEnum, string>;\n\n  enumMapFieldEmbedded: Map<GenericEnum, EmptyModel>;\n\n  bytesField: Uint8Array;\n\n  bytesArrayField: Uint8Array[];\n\n  boolField: boolean;\n\n  boolArrayField: boolean[];\n\n  /**\n  * @throws {Error}\n  */\n  constructor (decoder?: Decoder) {\n    if (decoder) {\n      let err: Error | undefined;\n      try {\n        err = decoder.error();\n      } catch (_) {}\n      if (err !== undefined) {\n        throw err;\n      }\n      this.modelField = EmptyModel.decode(decoder);\n      const modelArrayFieldSize = decoder.array(Kind.Any);\n      this.modelArrayField = new Array(modelArrayFieldSize);\n      for (let i = 0; i < modelArrayFieldSize; i += 1) {\n        const x = EmptyModel.decode(decoder);\n        if (x !== undefined) {\n          this.modelArrayField[i] = x;\n        }\n      }\n      this.stringField = decoder.string();\n      const stringArrayFieldSize = decoder.array(Kind.String);\n      this.stringArrayField = new Array(stringArrayFieldSize);\n      for (let i = 0; i < stringArrayFieldSize; i += 1) {\n        this.stringArrayField[i] = decoder.string();\n      }\n      this.stringMapField = new Map<string, string>();\n      let stringMapFieldSize = decoder.map(Kind.String, Kind.String);\n      for (let i = 0; i < stringMapFieldSize; i++) {\n        let key = decoder.string();\n        let val = decoder.string();\n        this.stringMapField.set(key, val);\n      }\n      this.stringMapFieldEmbedded = new Map<string, EmptyModel>();\n      let stringMapFieldEmbeddedSize = decoder.map(Kind.String, Kind.Any);\n      for (let i = 0; i < stringMapFieldEmbeddedSize; i++) {\n        let key = decoder.string();\n        let val = EmptyModel.decode(decoder);\n        if (val !== undefined) {\n          this.stringMapFieldEmbedded.set(key, val);\n        }\n      }\n      this.int32Field = decoder.int32();\n      const int32ArrayFieldSize = decoder.array(Kind.Int32);\n      this.int32ArrayField = new Array(int32ArrayFieldSize);\n      for (let i = 0; i < int32ArrayFieldSize; i += 1) {\n        this.int32ArrayField[i] = decoder.int32();\n      }\n      this.int32MapField = new Map<number, number>();\n      let int32MapFieldSize = decoder.map(Kind.Int32, Kind.Int32);\n      for (let i = 0; i < int32MapFieldSize; i++) {\n        let key = decoder.int32();\n        let val = decoder.int32();\n        this.int32MapField.set(key, val);\n      }\n      this.int32MapFieldEmbedded = new Map<number, EmptyModel>();\n      let int32MapFieldEmbeddedSize = decoder.map(Kind.Int32, Kind.Any);\n      for (let i = 0; i < int32MapFieldEmbeddedSize; i++) {\n        let key = decoder.int32();\n        let val = EmptyModel.decode(decoder);\n        if (val !== undefined) {\n          this.int32MapFieldEmbedded.set(key, val);\n        }\n      }\n      this.int64Field = decoder.int64();\n      const int64ArrayFieldSize = decoder.array(Kind.Int64);\n      this.int64ArrayField = new Array(int64ArrayFieldSize);\n      for (let i = 0; i < int64ArrayFieldSize; i += 1) {\n        this.int64ArrayField[i] = decoder.int64();\n      }\n      this.int64MapField = new Map<bigint, bigint>();\n      let int64MapFieldSize = decoder.map(Kind.Int64, Kind.Int64);\n      for (let i = 0; i < int64MapFieldSize; i++) {\n        let key = decoder.int64();\n        let val = decoder.int64();\n        this.int64MapField.set(key, val);\n      }\n      this.int64MapFieldEmbedded = new Map<bigint, EmptyModel>();\n      let int64MapFieldEmbeddedSize = decoder.map(Kind.Int64, Kind.Any);\n      for (let i = 0; i < int64MapFieldEmbeddedSize; i++) {\n        let key = decoder.int64();\n        let val = EmptyModel.decode(decoder);\n        if (val !== undefined) {\n          this.int64MapFieldEmbedded.set(key, val);\n        }\n      }\n      this.uint32Field = decoder.uint32();\n      const uint32ArrayFieldSize = decoder.array(Kind.Uint32);\n      this.uint32ArrayField = new Array(uint32ArrayFieldSize);\n      for (let i = 0; i < uint32ArrayFieldSize; i += 1) {\n        this.uint32ArrayField[i] = decoder.uint32();\n      }\n      this.uint32MapField = new Map<number, number>();\n      let uint32MapFieldSize = decoder.map(Kind.Uint32, Kind.Uint32);\n      for (let i = 0; i < uint32MapFieldSize; i++) {\n        let key = decoder.uint32();\n        let val = decoder.uint32();\n        this.uint32MapField.set(key, val);\n      }\n      this.uint32MapFieldEmbedded = new Map<number, EmptyModel>();\n      let uint32MapFieldEmbeddedSize = decoder.map(Kind.Uint32, Kind.Any);\n      for (let i = 0; i < uint32MapFieldEmbeddedSize; i++) {\n        let key = decoder.uint32();\n        let val = EmptyModel.decode(decoder);\n        if (val !== undefined) {\n          this.uint32MapFieldEmbedded.set(key, val);\n        }\n      }\n      this.uint64Field = decoder.uint64();\n      const uint64ArrayFieldSize = decoder.array(Kind.Uint64);\n      this.uint64ArrayField = new Array(uint64ArrayFieldSize);\n      for (let i = 0; i < uint64ArrayFieldSize; i += 1) {\n        this.uint64ArrayField[i] = decoder.uint64();\n      }\n      this.uint64MapField = new Map<bigint, bigint>();\n      let uint64MapFieldSize = decoder.map(Kind.Uint64, Kind.Uint64);\n      for (let i = 0; i < uint64MapFieldSize; i++) {\n        let key = decoder.uint64();\n        let val = decoder.uint64();\n        this.uint64MapField.set(key, val);\n      }\n      this.uint64MapFieldEmbedded = new Map<bigint, EmptyModel>();\n      let uint64MapFieldEmbeddedSize = decoder.map(Kind.Uint64, Kind.Any);\n      for (let i = 0; i < uint64MapFieldEmbeddedSize; i++) {\n        let key = decoder.uint64();\n        let val = EmptyModel.decode(decoder);\n        if (val !== undefined) {\n          this.uint64MapFieldEmbedded.set(key, val);\n        }\n      }\n      this.float32Field = decoder.float32();\n      const float32ArrayFieldSize = decoder.array(Kind.Float32);\n      this.float32ArrayField = new Array(float32ArrayFieldSize);\n      for (let i = 0; i < float32ArrayFieldSize; i += 1) {\n        this.float32ArrayField[i] = decoder.float32();\n      }\n      this.float64Field = decoder.float64();\n      const float64ArrayFieldSize = decoder.array(Kind.Float64);\n      this.float64ArrayField = new Array(float64ArrayFieldSize);\n      for (let i = 0; i < float64ArrayFieldSize; i += 1) {\n        this.float64ArrayField[i] = decoder.float64();\n      }\n      this.enumField = decoder.uint32();\n      const enumArrayFieldSize = decoder.array(Kind.Uint32);\n      this.enumArrayField = new Array(enumArrayFieldSize);\n      for (let i = 0; i < enumArrayFieldSize; i += 1) {\n        this.enumArrayField[i] = decoder.uint32();\n      }\n      this.enumMapField = new Map<number, string>();\n      let enumMapFieldSize = decoder.map(Kind.Uint32, Kind.String);\n      for (let i = 0; i < enumMapFieldSize; i++) {\n        let key = decoder.uint32();\n        let val = decoder.string();\n        this.enumMapField.set(key, val);\n      }\n      this.enumMapFieldEmbedded = new Map<number, EmptyModel>();\n      let enumMapFieldEmbeddedSize = decoder.map(Kind.Uint32, Kind.Any);\n      for (let i = 0; i < enumMapFieldEmbeddedSize; i++) {\n        let key = decoder.uint32();\n        let val = EmptyModel.decode(decoder);\n        if (val !== undefined) {\n          this.enumMapFieldEmbedded.set(key, val);\n        }\n      }\n      this.bytesField = decoder.uint8Array();\n      const bytesArrayFieldSize = decoder.array(Kind.Uint8Array);\n      this.bytesArrayField = new Array(bytesArrayFieldSize);\n      for (let i = 0; i < bytesArrayFieldSize; i += 1) {\n        this.bytesArrayField[i] = decoder.uint8Array();\n      }\n      this.boolField = decoder.boolean();\n      const boolArrayFieldSize = decoder.array(Kind.Boolean);\n      this.boolArrayField = new Array(boolArrayFieldSize);\n      for (let i = 0; i < boolArrayFieldSize; i += 1) {\n        this.boolArrayField[i] = decoder.boolean();\n      }\n    } else {\n      this.modelField = new EmptyModel();\n      this.modelArrayField = [];\n      this.stringField = \"DefaultValue\";\n      this.stringArrayField = [];\n      this.stringMapField = new Map<string, string>();\n      this.stringMapFieldEmbedded = new Map<string, EmptyModel>();\n      this.int32Field = 32;\n      this.int32ArrayField = [];\n      this.int32MapField = new Map<number, number>();\n      this.int32MapFieldEmbedded = new Map<number, EmptyModel>();\n      this.int64Field = 64n;\n      this.int64ArrayField = [];\n      this.int64MapField = new Map<bigint, bigint>();\n      this.int64MapFieldEmbedded = new Map<bigint, EmptyModel>();\n      this.uint32Field = 32;\n      this.uint32ArrayField = [];\n      this.uint32MapField = new Map<number, number>();\n      this.uint32MapFieldEmbedded = new Map<number, EmptyModel>();\n      this.uint64Field = 64n;\n      this.uint64ArrayField = [];\n      this.uint64MapField = new Map<bigint, bigint>();\n      this.uint64MapFieldEmbedded = new Map<bigint, EmptyModel>();\n      this.float32Field = 32.32;\n      this.float32ArrayField = [];\n      this.float64Field = 64.64;\n      this.float64ArrayField = [];\n      this.enumField = GenericEnum.DefaultValue;\n      this.enumArrayField = [];\n      this.enumMapField = new Map<GenericEnum, string>();\n      this.enumMapFieldEmbedded = new Map<GenericEnum, EmptyModel>();\n      this.bytesField = new Uint8Array(512);\n      this.bytesArrayField = [];\n      this.boolField = true;\n      this.boolArrayField = [];\n    }\n  }\n\n  /**\n  * @throws {Error}\n  */\n  encode (encoder: Encoder) {\n    if (this.modelField === undefined) {\n      encoder.null();\n    } else {\n      this.modelField.encode(encoder);\n    }\n    const modelArrayFieldLength = this.modelArrayField.length;\n    encoder.array(modelArrayFieldLength, Kind.Any);\n    for (let i = 0; i < modelArrayFieldLength; i += 1) {\n      const el = this.modelArrayField[i];\n      el.encode(encoder);\n    }\n    encoder.string(this.stringField);\n    const stringArrayFieldLength = this.stringArrayField.length;\n    encoder.array(stringArrayFieldLength, Kind.String);\n    for (let i = 0; i < stringArrayFieldLength; i += 1) {\n      encoder.string(this.stringArrayField[i]);\n    }\n    encoder.map(this.stringMapField.size, Kind.String, Kind.String);\n    this.stringMapField.forEach((val, key) => {\n      encoder.string(key);\n      encoder.string(val);\n    });\n    encoder.map(this.stringMapFieldEmbedded.size, Kind.String, Kind.Any);\n    this.stringMapFieldEmbedded.forEach((val, key) => {\n      encoder.string(key);\n      val.encode(encoder);\n    });\n    encoder.int32(this.int32Field);\n    const int32ArrayFieldLength = this.int32ArrayField.length;\n    encoder.array(int32ArrayFieldLength, Kind.Int32);\n    for (let i = 0; i < int32ArrayFieldLength; i += 1) {\n      encoder.int32(this.int32ArrayField[i]);\n    }\n    encoder.map(this.int32MapField.size, Kind.Int32, Kind.Int32);\n    this.int32MapField.forEach((val, key) => {\n      encoder.int32(key);\n      encoder.int32(val);\n    });\n    encoder.map(this.int32MapFieldEmbedded.size, Kind.Int32, Kind.Any);\n    this.int32MapFieldEmbedded.forEach((val, key) => {\n      encoder.int32(key);\n      val.encode(encoder);\n    });\n    encoder.int64(this.int64Field);\n    const int64ArrayFieldLength = this.int64ArrayField.length;\n    encoder.array(int64ArrayFieldLength, Kind.Int64);\n    for (let i = 0; i < int64ArrayFieldLength; i += 1) {\n      encoder.int64(this.int64ArrayField[i]);\n    }\n    encoder.map(this.int64MapField.size, Kind.Int64, Kind.Int64);\n    this.int64MapField.forEach((val, key) => {\n      encoder.int64(key);\n      encoder.int64(val);\n    });\n    encoder.map(this.int64MapFieldEmbedded.size, Kind.Int64, Kind.Any);\n    this.int64MapFieldEmbedded.forEach((val, key) => {\n      encoder.int64(key);\n      val.encode(encoder);\n    });\n    encoder.uint32(this.uint32Field);\n    const uint32ArrayFieldLength = this.uint32ArrayField.length;\n    encoder.array(uint32ArrayFieldLength, Kind.Uint32);\n    for (let i = 0; i < uint32ArrayFieldLength; i += 1) {\n      encoder.uint32(this.uint32ArrayField[i]);\n    }\n    encoder.map(this.uint32MapField.size, Kind.Uint32, Kind.Uint32);\n    this.uint32MapField.forEach((val, key) => {\n      encoder.uint32(key);\n      encoder.uint32(val);\n    });\n    encoder.map(this.uint32MapFieldEmbedded.size, Kind.Uint32, Kind.Any);\n    this.uint32MapFieldEmbedded.forEach((val, key) => {\n      encoder.uint32(key);\n      val.encode(encoder);\n    });\n    encoder.uint64(this.uint64Field);\n    const uint64ArrayFieldLength = this.uint64ArrayField.length;\n    encoder.array(uint64ArrayFieldLength, Kind.Uint64);\n    for (let i = 0; i < uint64ArrayFieldLength; i += 1) {\n      encoder.uint64(this.uint64ArrayField[i]);\n    }\n    encoder.map(this.uint64MapField.size, Kind.Uint64, Kind.Uint64);\n    this.uint64MapField.forEach((val, key) => {\n      encoder.uint64(key);\n      encoder.uint64(val);\n    });\n    encoder.map(this.uint64MapFieldEmbedded.size, Kind.Uint64, Kind.Any);\n    this.uint64MapFieldEmbedded.forEach((val, key) => {\n      encoder.uint64(key);\n      val.encode(encoder);\n    });\n    encoder.float32(this.float32Field);\n    const float32ArrayFieldLength = this.float32ArrayField.length;\n    encoder.array(float32ArrayFieldLength, Kind.Float32);\n    for (let i = 0; i < float32ArrayFieldLength; i += 1) {\n      encoder.float32(this.float32ArrayField[i]);\n    }\n    encoder.float64(this.float64Field);\n    const float64ArrayFieldLength = this.float64ArrayField.length;\n    encoder.array(float64ArrayFieldLength, Kind.Float64);\n    for (let i = 0; i < float64ArrayFieldLength; i += 1) {\n      encoder.float64(this.float64ArrayField[i]);\n    }\n    encoder.uint32(this.enumField);\n    const enumArrayFieldLength = this.enumArrayField.length;\n    encoder.array(enumArrayFieldLength, Kind.Uint32);\n    for (let i = 0; i < enumArrayFieldLength; i += 1) {\n      encoder.uint32(this.enumArrayField[i]);\n    }\n    encoder.map(this.enumMapField.size, Kind.Uint32, Kind.String);\n    this.enumMapField.forEach((val, key) => {\n      encoder.uint32(key);\n      encoder.string(val);\n    });\n    encoder.map(this.enumMapFieldEmbedded.size, Kind.Uint32, Kind.Any);\n    this.enumMapFieldEmbedded.forEach((val, key) => {\n      encoder.uint32(key);\n      val.encode(encoder);\n    });\n    encoder.uint8Array(this.bytesField);\n    const bytesArrayFieldLength = this.bytesArrayField.length;\n    encoder.array(bytesArrayFieldLength, Kind.Uint8Array);\n    for (let i = 0; i < bytesArrayFieldLength; i += 1) {\n      encoder.uint8Array(this.bytesArrayField[i]);\n    }\n    encoder.boolean(this.boolField);\n    const boolArrayFieldLength = this.boolArrayField.length;\n    encoder.array(boolArrayFieldLength, Kind.Boolean);\n    for (let i = 0; i < boolArrayFieldLength; i += 1) {\n      encoder.boolean(this.boolArrayField[i]);\n    }\n  }\n\n  /**\n  * @throws {Error}\n  */\n  static decode (decoder: Decoder): ModelWithAllFieldTypes | undefined {\n    if (decoder.null()) {\n      return undefined\n    }\n    return new ModelWithAllFieldTypes(decoder);\n  }\n\n  /**\n  * @throws {Error}\n  */\n  static encode_undefined (encoder: Encoder) {\n    encoder.null();\n  }\n}\n\n"],
  "mappings": "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",
  "names": ["GenericEnum"]
}
