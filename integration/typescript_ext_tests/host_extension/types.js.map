{
  "version": 3,
  "sources": ["<stdin>"],
  "sourceRoot": "types.js",
  "sourcesContent": ["// Code generated by scale-signature 0.4.7, DO NOT EDIT.\n// output: local-inttest-latest-host\n\nimport { Encoder, Decoder, Kind } from \"@loopholelabs/polyglot\"\n\nexport class Stringval {\n  value: string;\n\n  /**\n  * @throws {Error}\n  */\n  constructor (decoder?: Decoder) {\n    if (decoder) {\n      let err: Error | undefined;\n      try {\n        err = decoder.error();\n      } catch (_) {}\n      if (typeof err !== \"undefined\") {\n        throw err;\n      }\n      this.value = decoder.string();\n    } else {\n      this.value = \"\";\n    }\n  }\n\n  /**\n  * @throws {Error}\n  */\n  encode (encoder: Encoder) {\n    encoder.string(this.value);\n  }\n\n  /**\n  * @throws {Error}\n  */\n  static decode (decoder: Decoder): Stringval | undefined {\n    if (decoder.null()) {\n      return undefined\n    }\n    return new Stringval(decoder);\n  }\n\n  /**\n  * @throws {Error}\n  */\n  static encode_undefined (encoder: Encoder) {\n    encoder.null();\n  }\n}\n\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAKO,MAAM,UAAU;AAAA;AAAA;AAAA;AAAA,EAMrB,YAAa,SAAmB;AAC9B,QAAI,SAAS;AACX,UAAI;AACJ,UAAI;AACF,cAAM,QAAQ,MAAM;AAAA,MACtB,SAAS,GAAG;AAAA,MAAC;AACb,UAAI,OAAO,QAAQ,aAAa;AAC9B,cAAM;AAAA,MACR;AACA,WAAK,QAAQ,QAAQ,OAAO;AAAA,IAC9B,OAAO;AACL,WAAK,QAAQ;AAAA,IACf;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,OAAQ,SAAkB;AACxB,YAAQ,OAAO,KAAK,KAAK;AAAA,EAC3B;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO,OAAQ,SAAyC;AACtD,QAAI,QAAQ,KAAK,GAAG;AAClB,aAAO;AAAA,IACT;AACA,WAAO,IAAI,UAAU,OAAO;AAAA,EAC9B;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO,iBAAkB,SAAkB;AACzC,YAAQ,KAAK;AAAA,EACf;AACF;",
  "names": []
}
