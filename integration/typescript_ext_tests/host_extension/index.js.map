{
  "version": 3,
  "sources": ["<stdin>"],
  "sourceRoot": "index.js",
  "sourcesContent": ["// Code generated by scale-extension 0.4.5, DO NOT EDIT.\n// output: local-inttest-latest-host\n\n/* eslint no-bitwise: off */\n\nimport { Extension as ExtensionInterface, ModuleMemory, Resizer } from \"@loopholelabs/scale-extension-interfaces\";\nimport { Decoder, Encoder, Kind } from \"@loopholelabs/polyglot\";\nimport * as types from \"./types\";\n\nexport * from \"./types\";\n\nconst hash = \"b30af2dd8561988edd7b281ad5c1b84487072727a8ad0e490a87be0a66b037d7\";\n\n// Write an error to the scale function guest buffer.\nfunction hostError(mem: ModuleMemory, resize: Resizer, err: Error) {\n  const enc = new Encoder();\n  enc.error(err);\n  const ptr = resize(\"ext_b30af2dd8561988edd7b281ad5c1b84487072727a8ad0e490a87be0a66b037d7_Resize\", enc.bytes.length);\n\n  mem.Write(ptr, enc.bytes);\n}\n\nclass hostExt {\n  functions: Map<string, InstallableFunc>;\n  host: Host;\n\n  constructor(fns: Map<string, InstallableFunc>, h: Host) {\n    this.functions = fns;\n    this.host = h;\n  }\n\n  Init(): Map<string, InstallableFunc> {\n    return this.functions;\n  }\n\n  Reset() {\n    // Reset any instances that have been created.\n    this.host.instances_Example = new Map<number, Example();\n  }\n}\n\nexport function New(impl: Interface): ExtensionInterface {\n  let hostWrapper = new Host(impl);\n\n  let fns = new Map<string, InstallableFunc>();\n\n  // Add global functions to the runtime\n\n  fns.set(\"ext_b30af2dd8561988edd7b281ad5c1b84487072727a8ad0e490a87be0a66b037d7_New\", hostWrapper.host_ext_b30af2dd8561988edd7b281ad5c1b84487072727a8ad0e490a87be0a66b037d7_New.bind(hostWrapper));\n\n  fns.set(\"ext_b30af2dd8561988edd7b281ad5c1b84487072727a8ad0e490a87be0a66b037d7_World\", hostWrapper.host_ext_b30af2dd8561988edd7b281ad5c1b84487072727a8ad0e490a87be0a66b037d7_World.bind(hostWrapper));\n\n  hostWrapper.instances_Example = new Map<number, Example>();\n\n  fns.set(\"ext_b30af2dd8561988edd7b281ad5c1b84487072727a8ad0e490a87be0a66b037d7_Example_Hello\", hostWrapper.host_ext_b30af2dd8561988edd7b281ad5c1b84487072727a8ad0e490a87be0a66b037d7_Example_Hello.bind(hostWrapper));\n\n  return new hostExt(fns, hostWrapper);\n}\n\nclass Host {\n  impl: Interface\n\n  gid_Example: bigint = 0n;\n  instances_Example: Map<bigint, Example> = new Map<bigint, Example>();\n\n  constructor(i: Interface) {\n    this.impl = i;\n  }\n\n  // Global functions...\n\n  host_ext_b30af2dd8561988edd7b281ad5c1b84487072727a8ad0e490a87be0a66b037d7_New(mem: ModuleMemory, resize: Resizer, params: number[]) {\n    const d = mem.Read(params[1], params[2]);\n    const c = types.Stringval.decode(new Decoder(d));\n    const r = this.impl.New(c);\n    const id = this.gid_Example++;\n    this.instances_Example.set(id, r);\n    params[0] = id;\n    return;\n  }\n\n  host_ext_b30af2dd8561988edd7b281ad5c1b84487072727a8ad0e490a87be0a66b037d7_World(mem: ModuleMemory, resize: Resizer, params: number[]) {\n    const d = mem.Read(params[1], params[2]);\n    const c = types.Stringval.decode(new Decoder(d));\n    const r = this.impl.World(c);\n    const enc = new Encoder();\n    r.encode(enc);\n    const ptr = resize(\"ext_b30af2dd8561988edd7b281ad5c1b84487072727a8ad0e490a87be0a66b037d7_Resize\", enc.bytes.length);\n    mem.Write(ptr, enc.bytes);\n    return;\n  }\n\n  // Instance functions...\n\n  host_ext_b30af2dd8561988edd7b281ad5c1b84487072727a8ad0e490a87be0a66b037d7_Example_Hello(mem: ModuleMemory, resize: Resizer, params: number[]): bigint {\n    const d = mem.Read(params[1], params[2]);\n    const c = types.Stringval.decode(new Decoder(d));\n    // Do lookup...\n    const inst = this.instances_Example.get(params[0]);\n    const r = inst.Hello(c);\n    const enc = new Encoder();\n    r.encode(enc);\n    const ptr = resize(\"ext_b30af2dd8561988edd7b281ad5c1b84487072727a8ad0e490a87be0a66b037d7_Resize\", enc.bytes.length);\n    mem.Write(ptr, enc.bytes);\n    return;\n  }\n\n}\n\n//// //// //// //// //// //// //// //// ////\n\n// Interface to the extension impl. This is what the implementor should create\n\nexport interface Interface {\n  New(params: Stringval): Example;\n\n  World(params: Stringval): Stringval;\n\n}\n\nexport interface Example {\n  Hello(params: Stringval): Stringval;\n\n}\n\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA,sBAAuC;AACvC,YAAuB;AAEvB,0BAAc,oBATd;AAWA,MAAM,OAAO;AAGb,SAAS,UAAU,KAAmB,QAAiB,KAAY;AACjE,QAAM,MAAM,IAAI,wBAAQ;AACxB,MAAI,MAAM,GAAG;AACb,QAAM,MAAM,OAAO,+EAA+E,IAAI,MAAM,MAAM;AAElH,MAAI,MAAM,KAAK,IAAI,KAAK;AAC1B;AAEA,MAAM,QAAQ;AAAA,EAIZ,YAAY,KAAmC,GAAS;AACtD,SAAK,YAAY;AACjB,SAAK,OAAO;AAAA,EACd;AAAA,EAEA,OAAqC;AACnC,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,QAAQ;AAEN,SAAK,KAAK,oBAAoB,oBAAI,QAAI,QAAQ,QAAQ;AAAA,EACxD;AACF;AAEO,SAAS,IAAI,MAAqC;AACvD,MAAI,cAAc,IAAI,KAAK,IAAI;AAE/B,MAAI,MAAM,oBAAI,IAA6B;AAI3C,MAAI,IAAI,4EAA4E,YAAY,8EAA8E,KAAK,WAAW,CAAC;AAE/L,MAAI,IAAI,8EAA8E,YAAY,gFAAgF,KAAK,WAAW,CAAC;AAEnM,cAAY,oBAAoB,oBAAI,IAAqB;AAEzD,MAAI,IAAI,sFAAsF,YAAY,wFAAwF,KAAK,WAAW,CAAC;AAEnN,SAAO,IAAI,QAAQ,KAAK,WAAW;AACrC;AAEA,MAAM,KAAK;AAAA,EAMT,YAAY,GAAc;AAH1B,uBAAsB;AACtB,6BAA0C,oBAAI,IAAqB;AAGjE,SAAK,OAAO;AAAA,EACd;AAAA;AAAA,EAIA,8EAA8E,KAAmB,QAAiB,QAAkB;AAClI,UAAM,IAAI,IAAI,KAAK,OAAO,CAAC,GAAG,OAAO,CAAC,CAAC;AACvC,UAAM,IAAI,MAAM,UAAU,OAAO,IAAI,wBAAQ,CAAC,CAAC;AAC/C,UAAM,IAAI,KAAK,KAAK,IAAI,CAAC;AACzB,UAAM,KAAK,KAAK;AAChB,SAAK,kBAAkB,IAAI,IAAI,CAAC;AAChC,WAAO,CAAC,IAAI;AACZ;AAAA,EACF;AAAA,EAEA,gFAAgF,KAAmB,QAAiB,QAAkB;AACpI,UAAM,IAAI,IAAI,KAAK,OAAO,CAAC,GAAG,OAAO,CAAC,CAAC;AACvC,UAAM,IAAI,MAAM,UAAU,OAAO,IAAI,wBAAQ,CAAC,CAAC;AAC/C,UAAM,IAAI,KAAK,KAAK,MAAM,CAAC;AAC3B,UAAM,MAAM,IAAI,wBAAQ;AACxB,MAAE,OAAO,GAAG;AACZ,UAAM,MAAM,OAAO,+EAA+E,IAAI,MAAM,MAAM;AAClH,QAAI,MAAM,KAAK,IAAI,KAAK;AACxB;AAAA,EACF;AAAA;AAAA,EAIA,wFAAwF,KAAmB,QAAiB,QAA0B;AACpJ,UAAM,IAAI,IAAI,KAAK,OAAO,CAAC,GAAG,OAAO,CAAC,CAAC;AACvC,UAAM,IAAI,MAAM,UAAU,OAAO,IAAI,wBAAQ,CAAC,CAAC;AAE/C,UAAM,OAAO,KAAK,kBAAkB,IAAI,OAAO,CAAC,CAAC;AACjD,UAAM,IAAI,KAAK,MAAM,CAAC;AACtB,UAAM,MAAM,IAAI,wBAAQ;AACxB,MAAE,OAAO,GAAG;AACZ,UAAM,MAAM,OAAO,+EAA+E,IAAI,MAAM,MAAM;AAClH,QAAI,MAAM,KAAK,IAAI,KAAK;AACxB;AAAA,EACF;AAEF;",
  "names": []
}
