// Code generated by scale-extension 0.4.7, DO NOT EDIT.
// output: local_inttest_latest_guest

"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var stdin_exports = {};
__export(stdin_exports, {
  New: () => New,
  World: () => World
});
module.exports = __toCommonJS(stdin_exports);
var import_polyglot = require("@loopholelabs/polyglot");
var types = __toESM(require("./types"));
let writeBuffer = new Uint8Array().buffer;
let readBuffer = new Uint8Array().buffer;
function ext_b30af2dd8561988edd7b281ad5c1b84487072727a8ad0e490a87be0a66b037d7_Resize(len) {
  readBuffer = new Uint8Array(len).buffer;
  const ptr = global.scale_address_of(readBuffer);
  return ptr;
}
function ext_init() {
  let id = BigInt(3003839197);
  global.registerResize(id, ext_b30af2dd8561988edd7b281ad5c1b84487072727a8ad0e490a87be0a66b037d7_Resize);
}
class _Example {
  constructor(id) {
    this.instanceId = id;
  }
  Hello(params) {
    let e = new import_polyglot.Encoder();
    params.encode(e);
    writeBuffer = e.bytes.buffer;
    let callID = BigInt(1629379652);
    let ev = global.scale_ext_mux([callID, this.instanceId, global.scale_address_of(writeBuffer), writeBuffer.byteLength]);
    let dec = new import_polyglot.Decoder(new Uint8Array(readBuffer));
    return new types.Stringval(dec);
  }
}
function New(params) {
  ext_init();
  readBuffer = new Uint8Array(0).buffer;
  let e = new import_polyglot.Encoder();
  params.encode(e);
  writeBuffer = e.bytes.buffer;
  let callID = BigInt(4015000074);
  let ev = global.scale_ext_mux([callID, 0, global.scale_address_of(writeBuffer), writeBuffer.byteLength]);
  if (readBuffer.byteLength > 0) {
    let dec = new import_polyglot.Decoder(new Uint8Array(readBuffer));
    throw dec.error();
  }
  return new _Example(ev);
}
function World(params) {
  ext_init();
  readBuffer = new Uint8Array(0).buffer;
  let e = new import_polyglot.Encoder();
  params.encode(e);
  writeBuffer = e.bytes.buffer;
  let callID = BigInt(3493099372);
  let ev = global.scale_ext_mux([callID, 0, global.scale_address_of(writeBuffer), writeBuffer.byteLength]);
  let dec = new import_polyglot.Decoder(new Uint8Array(readBuffer));
  return new types.Stringval(dec);
}
//# sourceMappingURL=index.js.map