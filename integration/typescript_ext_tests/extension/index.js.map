{
  "version": 3,
  "sources": ["<stdin>"],
  "sourceRoot": "index.js",
  "sourcesContent": ["// Code generated by scale-extension 0.4.5, DO NOT EDIT.\n// output: local_inttest_latest_guest\n\n/* eslint no-bitwise: off */\n\nimport { Decoder, Encoder } from \"@loopholelabs/polyglot\";\n\nimport * as types from \"./types\";\n\nlet writeBuffer = new Uint8Array().buffer;\nlet readBuffer = new Uint8Array().buffer;\n\nfunction ext_b30af2dd8561988edd7b281ad5c1b84487072727a8ad0e490a87be0a66b037d7_Resize(len: number): number {\n  readBuffer = new Uint8Array(len).buffer;\n  const ptr = (global as any).scale_address_of(readBuffer);\n  return ptr;\n}\n\n// Register it...\nfunction ext_init() {\n  let id = BigInt(0xb30af2dd);\n  // TODO: This ID needs to come from config etc\n  (global as any).registerResize(id, ext_b30af2dd8561988edd7b281ad5c1b84487072727a8ad0e490a87be0a66b037d7_Resize);\n}\n\n// Define any interfaces we need here...\n// Also define structs we can use to hold instanceId\n\n// Define concrete types with a hidden instanceId\n\nclass _Example {\n  instanceId: number;\n\n  constructor(id: number) {\n    this.instanceId = id;\n  }\n\n  Hello(params: types.Stringval): types.Stringval {\n    let e = new Encoder();\n    params.encode(e);\n    writeBuffer = e.bytes.buffer;\n    let callID = BigInt(0x611e5c44);\n    let ev = (global as any).scale_ext_mux([callID, this.instanceId, (global as any).scale_address_of(writeBuffer), writeBuffer.byteLength]);\n    // Decode it and return...\n    let dec = new Decoder(new Uint8Array(readBuffer));\n    return new types.Stringval(dec);\n  }\n\n}\n\n// Define any global functions here...\n\nexport function New(params: types.Stringval): types.Example {\n  // First encode the params...\n\n  // Make sure this is registered for incoming resize calls.\n  ext_init();\n\n  readBuffer = new Uint8Array(0).buffer;\n\n  let e = new Encoder();\n  params.encode(e);\n  writeBuffer = e.bytes.buffer;\n\n  let callID = BigInt(0xef500a0a);\n  let ev = (global as any).scale_ext_mux([callID, 0, (global as any).scale_address_of(writeBuffer), writeBuffer.byteLength]);\n  // Handle error from host... (stuff in readBuffer)\n  if (readBuffer.byteLength>0) {\n    let dec = new Decoder(new Uint8Array(readBuffer));\n    throw dec.error();\n  }\n\n  return new _Example(ev);\n\n}\n\nexport function World(params: types.Stringval): types.Stringval {\n  // First encode the params...\n\n  // Make sure this is registered for incoming resize calls.\n  ext_init();\n\n  readBuffer = new Uint8Array(0).buffer;\n\n  let e = new Encoder();\n  params.encode(e);\n  writeBuffer = e.bytes.buffer;\n\n  let callID = BigInt(0xd034776c);\n  let ev = (global as any).scale_ext_mux([callID, 0, (global as any).scale_address_of(writeBuffer), writeBuffer.byteLength]);\n  // Decode it and return...\n  let dec = new Decoder(new Uint8Array(readBuffer));\n  return new types.Stringval(dec);\n\n}\n\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA,sBAAiC;AAEjC,YAAuB;AAEvB,IAAI,cAAc,IAAI,WAAW,EAAE;AACnC,IAAI,aAAa,IAAI,WAAW,EAAE;AAElC,SAAS,4EAA4E,KAAqB;AACxG,eAAa,IAAI,WAAW,GAAG,EAAE;AACjC,QAAM,MAAO,OAAe,iBAAiB,UAAU;AACvD,SAAO;AACT;AAGA,SAAS,WAAW;AAClB,MAAI,KAAK,OAAO,UAAU;AAE1B,EAAC,OAAe,eAAe,IAAI,2EAA2E;AAChH;AAOA,MAAM,SAAS;AAAA,EAGb,YAAY,IAAY;AACtB,SAAK,aAAa;AAAA,EACpB;AAAA,EAEA,MAAM,QAA0C;AAC9C,QAAI,IAAI,IAAI,wBAAQ;AACpB,WAAO,OAAO,CAAC;AACf,kBAAc,EAAE,MAAM;AACtB,QAAI,SAAS,OAAO,UAAU;AAC9B,QAAI,KAAM,OAAe,cAAc,CAAC,QAAQ,KAAK,YAAa,OAAe,iBAAiB,WAAW,GAAG,YAAY,UAAU,CAAC;AAEvI,QAAI,MAAM,IAAI,wBAAQ,IAAI,WAAW,UAAU,CAAC;AAChD,WAAO,IAAI,MAAM,UAAU,GAAG;AAAA,EAChC;AAEF;AAIO,SAAS,IAAI,QAAwC;AAI1D,WAAS;AAET,eAAa,IAAI,WAAW,CAAC,EAAE;AAE/B,MAAI,IAAI,IAAI,wBAAQ;AACpB,SAAO,OAAO,CAAC;AACf,gBAAc,EAAE,MAAM;AAEtB,MAAI,SAAS,OAAO,UAAU;AAC9B,MAAI,KAAM,OAAe,cAAc,CAAC,QAAQ,GAAI,OAAe,iBAAiB,WAAW,GAAG,YAAY,UAAU,CAAC;AAEzH,MAAI,WAAW,aAAW,GAAG;AAC3B,QAAI,MAAM,IAAI,wBAAQ,IAAI,WAAW,UAAU,CAAC;AAChD,UAAM,IAAI,MAAM;AAAA,EAClB;AAEA,SAAO,IAAI,SAAS,EAAE;AAExB;AAEO,SAAS,MAAM,QAA0C;AAI9D,WAAS;AAET,eAAa,IAAI,WAAW,CAAC,EAAE;AAE/B,MAAI,IAAI,IAAI,wBAAQ;AACpB,SAAO,OAAO,CAAC;AACf,gBAAc,EAAE,MAAM;AAEtB,MAAI,SAAS,OAAO,UAAU;AAC9B,MAAI,KAAM,OAAe,cAAc,CAAC,QAAQ,GAAI,OAAe,iBAAiB,WAAW,GAAG,YAAY,UAAU,CAAC;AAEzH,MAAI,MAAM,IAAI,wBAAQ,IAAI,WAAW,UAAU,CAAC;AAChD,SAAO,IAAI,MAAM,UAAU,GAAG;AAEhC;",
  "names": []
}
