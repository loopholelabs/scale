// Code generated by scale {{ .generatorVersion }}, DO NOT EDIT.
// schema: {{ .scalefileSchema.Name }}:{{ .scalefileSchema.Tag }}

function PackUint32(ptr: number, len: number): bigint {
    if (ptr > 0xffffffff || len > 0xffffffff) {
        throw new Error("ptr or len is too large");
    }
    return (BigInt(ptr) << BigInt(32)) | BigInt(len);
}

class TextEncoder {
    public encoding = "utf-8";
    constructor() {}

    public encode(s: string): Uint8Array {
        let octets = [];
        const length = s.length;
        let i = 0;
        while (i < length) {
            const codePoint = s.codePointAt(i);
            if (typeof codePoint !== "undefined") {
                let c = 0;
                let bits = 0;
                if (codePoint <= 0x0000007F) {
                    c = 0;
                    bits = 0x00;
                } else if (codePoint <= 0x000007FF) {
                    c = 6;
                    bits = 0xC0;
                } else if (codePoint <= 0x0000FFFF) {
                    c = 12;
                    bits = 0xE0;
                } else if (codePoint <= 0x001FFFFF) {
                    c = 18;
                    bits = 0xF0;
                }
                octets.push(bits | (codePoint >> c));
                c -= 6;
                while (c >= 0) {
                    octets.push(0x80 | ((codePoint >> c) & 0x3F));
                    c -= 6;
                }
                i += codePoint >= 0x10000 ? 2 : 1;
            }
        }
        return new Uint8Array(octets);
    }
}

class TextDecoder {
    public encoding = "utf-8";

    constructor() {}

    public decode(a: any): string {
        if (a instanceof Uint8Array) {
            return this.decodeUint8Array(a);
        } else {
            return "";
        }
    }

    private decodeUint8Array(a: Uint8Array): string {
        let string = "";
        let i = 0;
        while (i < a.length) {
            let octet = a[i];
            let bytesNeeded = 0;
            let codePoint = 0;
            if (octet <= 0x7F) {
                bytesNeeded = 0;
                codePoint = octet & 0xFF;
            } else if (octet <= 0xDF) {
                bytesNeeded = 1;
                codePoint = octet & 0x1F;
            } else if (octet <= 0xEF) {
                bytesNeeded = 2;
                codePoint = octet & 0x0F;
            } else if (octet <= 0xF4) {
                bytesNeeded = 3;
                codePoint = octet & 0x07;
            }
            if (a.length - i - bytesNeeded > 0) {
                let k = 0;
                while (k < bytesNeeded) {
                    octet = a[i + k + 1];
                    codePoint = (codePoint << 6) | (octet & 0x3F);
                    k += 1;
                }
            } else {
                codePoint = 0xFFFD;
                bytesNeeded = a.length - i;
            }
            string += String.fromCodePoint(codePoint);
            i += bytesNeeded + 1;
        }
        return string;
    }
}

(global as any).TextEncoder = TextEncoder;
(global as any).TextDecoder = TextDecoder;

import * as signature from "signature";
import * as scale from "{{ .function.ImportPath }}";

// Satisfy the compiler by exporting a
// main function that does nothing.
function mainFunction() {}

function initializeFunction(): bigint {
    {{ if .scalefileSchema.Initialize }}
    try {
        scale.{{ .scalefileSchema.Initialize }}();
    } catch (e) {
        const [ptr, len] = signature.Error(e as Error);
        return PackUint32(ptr, len);
    }
    {{ end }}
    return BigInt(0);
}

function runFunction(): bigint {
    let ctx = signature.Read();
    try {
        ctx = scale.{{ .scalefileSchema.Function }}(ctx);
        const [ptr, len] = signature.Write(ctx);
        return PackUint32(ptr, len);
    } catch (e) {
        const [ptr, len] = signature.Error(e as Error);
        return PackUint32(ptr, len);
    }
}

function resizeFunction(size: number): number {
    return signature.Resize(size);
}

function hashFunction(): bigint {
    const [ptr, len] = signature.Hash();
    return PackUint32(ptr, len);
}

// Map for extensions -> resize function
let resizerMap:any = {};

function extResizeFunction(id: bigint, len:number): number {
  let rs = resizerMap[id];

  if (typeof(rs)!=='undefined') {
    return rs(len);
  }

  // Error - host tried to call an extension not present
  throw (new Error("Extension " + id + " not found"));
}

// Register an extension resize function
function registerResizeFunction(id: bigint, r: any) {
  resizerMap[id] = r;
}

(global as any).registerResize = registerResizeFunction;

(global as any).exports = {
    main: mainFunction,
    initialize: initializeFunction,
    run: runFunction,
    hash: hashFunction,
    resize: resizeFunction,
    ext_resize: extResizeFunction
}
