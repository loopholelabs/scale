// Code generated by scale-go {{ .version }}, DO NOT EDIT.
// signature: {{ .signature.Name }}:{{ .signature.Tag }}
// schema: {{ .schema.Name }}:{{ .schema.Tag }}

package main

import (
    "signature"
    "scale"
    "github.com/loopholelabs/polyglot"
    "github.com/loopholelabs/scale"
)

// needed to satisfy compiler
func main() {}

//export run
func run() uint64 {
    ctx := signature.New({{ .signature.Context }})()
    err := signature._Read(ctx)
    if err != nil {
        return packUint32(signature._Error(err))
    }
    ctx, err = scale.{{ .schema.Function }}(ctx)
    if err != nil {
        return packUint32(signature._Error(err))
    }
    return packUint32(signature._Write(ctx))
}

//export resize
func resize(size uint32) uint32 {
    return signature._Resize(size)
}

//export identifier
func identifier() uint64 {
    return packUint32(signature._Identifier())
}

func packUint32(offset uint32, length uint32) uint64 {
    return uint64(offset)<<32 | uint64(length)
}