// Code generated by scale-go {{ .version }}, DO NOT EDIT.
// signature: {{ .signature.Name }}:{{ .signature.Tag }}
// schema: {{ .schema.Name }}:{{ .schema.Tag }}

package main

import (
    "signature"
    scale "{{ .schema.Name }}"
)

// needed to satisfy compiler
func main() {}

//export initialize
func initialize() uint64 {
    {{ if .schema.Initialize }}
    err := scale.{{ .schema.Initialize }}()
    if err != nil {
        return packUint32(signature.Error(err))
    }
    {{ end }}
    return 0
}

//export run
func run() uint64 {
    var err error
    ctx := signature.New{{ .signature.Context }}()
    ctx, err = signature.Read(ctx)
    if err != nil {
        return packUint32(signature.Error(err))
    }
    ctx, err = scale.{{ .schema.Function }}(ctx)
    if err != nil {
        return packUint32(signature.Error(err))
    }
    return packUint32(signature.Write(ctx))
}

//export resize
func resize(size uint32) uint32 {
    return signature.Resize(size)
}

//export identifier
func identifier() uint64 {
    return packUint32(signature.Identifier())
}

func packUint32(offset uint32, length uint32) uint64 {
    return uint64(offset)<<32 | uint64(length)
}