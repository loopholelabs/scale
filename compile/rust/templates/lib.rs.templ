#![cfg(target_arch = "wasm32")]

// Code generated by scale {{ .generator_version }}, DO NOT EDIT.
// schema: {{ .schema.Name }}:{{ .package_schema.Tag }}

#[cfg_attr(target_arch = "wasm32", export_name = "initialize")]
pub unsafe extern "C" fn initialize() -> u64 {
    {{ if .package_schema.Initialize }}
    return match {{ .package_schema.Name }}::{{ .package_schema.Initialize }}() {
        Ok(_) => { 0 },
        Err(err) => {
            let (ptr, len) = signature::error(err);
            pack_uint32(ptr, len)
        }
    };
    {{ else }}
    0
    {{ end }}
}

#[cfg_attr(target_arch = "wasm32", export_name = "run")]
#[no_mangle]
pub unsafe extern "C" fn run() -> u64 {
    let (ptr, len) = match signature::read() {
        Ok(opt) => {
            let output_opt = match opt {
                Some(input) => { {{ .package_schema.Name }}::{{ .package_schema.Function }}(Some(input)) },
                None => { {{ .package_schema.Name }}::{{ .package_schema.Function }}(None) }
            };
            match output_opt {
                Ok(Some(mut output)) => { signature::write(Some(&mut output)) },
                Ok(None) => { signature::write(None) }
                Err(err) => { signature::error(err) }
            }
        },
        Err(err) => {
            signature::error(err)
        }
    };
    pack_uint32(ptr, len)
}

#[cfg_attr(target_arch = "wasm32", export_name = "resize")]
#[no_mangle]
pub unsafe extern "C" fn _resize(size: u32) -> *const u8 {
    return signature::resize(size);
}

#[cfg_attr(target_arch = "wasm32", export_name = "hash")]
#[no_mangle]
pub unsafe extern "C" fn _hash() -> u64 {
    let (ptr, len) = signature::hash();
    pack_uint32(ptr, len)
}

fn pack_uint32(ptr: u32, len: u32) -> u64 {
    return ((ptr as u64) << 32) | len as u64;
}