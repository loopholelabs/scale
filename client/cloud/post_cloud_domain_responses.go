// Code generated by go-swagger; DO NOT EDIT.

package cloud

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/loopholelabs/scale/client/models"
)

// PostCloudDomainReader is a Reader for the PostCloudDomain structure.
type PostCloudDomainReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostCloudDomainReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostCloudDomainOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostCloudDomainBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPostCloudDomainUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPostCloudDomainNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 412:
		result := NewPostCloudDomainPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostCloudDomainInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /cloud/domain] PostCloudDomain", response, response.Code())
	}
}

// NewPostCloudDomainOK creates a PostCloudDomainOK with default headers values
func NewPostCloudDomainOK() *PostCloudDomainOK {
	return &PostCloudDomainOK{}
}

/*
PostCloudDomainOK describes a response with status code 200, with default header values.

OK
*/
type PostCloudDomainOK struct {
	Payload *models.ModelsCreateDomainResponse
}

// IsSuccess returns true when this post cloud domain o k response has a 2xx status code
func (o *PostCloudDomainOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post cloud domain o k response has a 3xx status code
func (o *PostCloudDomainOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post cloud domain o k response has a 4xx status code
func (o *PostCloudDomainOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this post cloud domain o k response has a 5xx status code
func (o *PostCloudDomainOK) IsServerError() bool {
	return false
}

// IsCode returns true when this post cloud domain o k response a status code equal to that given
func (o *PostCloudDomainOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the post cloud domain o k response
func (o *PostCloudDomainOK) Code() int {
	return 200
}

func (o *PostCloudDomainOK) Error() string {
	return fmt.Sprintf("[POST /cloud/domain][%d] postCloudDomainOK  %+v", 200, o.Payload)
}

func (o *PostCloudDomainOK) String() string {
	return fmt.Sprintf("[POST /cloud/domain][%d] postCloudDomainOK  %+v", 200, o.Payload)
}

func (o *PostCloudDomainOK) GetPayload() *models.ModelsCreateDomainResponse {
	return o.Payload
}

func (o *PostCloudDomainOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsCreateDomainResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostCloudDomainBadRequest creates a PostCloudDomainBadRequest with default headers values
func NewPostCloudDomainBadRequest() *PostCloudDomainBadRequest {
	return &PostCloudDomainBadRequest{}
}

/*
PostCloudDomainBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PostCloudDomainBadRequest struct {
	Payload string
}

// IsSuccess returns true when this post cloud domain bad request response has a 2xx status code
func (o *PostCloudDomainBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post cloud domain bad request response has a 3xx status code
func (o *PostCloudDomainBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post cloud domain bad request response has a 4xx status code
func (o *PostCloudDomainBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post cloud domain bad request response has a 5xx status code
func (o *PostCloudDomainBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post cloud domain bad request response a status code equal to that given
func (o *PostCloudDomainBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the post cloud domain bad request response
func (o *PostCloudDomainBadRequest) Code() int {
	return 400
}

func (o *PostCloudDomainBadRequest) Error() string {
	return fmt.Sprintf("[POST /cloud/domain][%d] postCloudDomainBadRequest  %+v", 400, o.Payload)
}

func (o *PostCloudDomainBadRequest) String() string {
	return fmt.Sprintf("[POST /cloud/domain][%d] postCloudDomainBadRequest  %+v", 400, o.Payload)
}

func (o *PostCloudDomainBadRequest) GetPayload() string {
	return o.Payload
}

func (o *PostCloudDomainBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostCloudDomainUnauthorized creates a PostCloudDomainUnauthorized with default headers values
func NewPostCloudDomainUnauthorized() *PostCloudDomainUnauthorized {
	return &PostCloudDomainUnauthorized{}
}

/*
PostCloudDomainUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type PostCloudDomainUnauthorized struct {
	Payload string
}

// IsSuccess returns true when this post cloud domain unauthorized response has a 2xx status code
func (o *PostCloudDomainUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post cloud domain unauthorized response has a 3xx status code
func (o *PostCloudDomainUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post cloud domain unauthorized response has a 4xx status code
func (o *PostCloudDomainUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this post cloud domain unauthorized response has a 5xx status code
func (o *PostCloudDomainUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this post cloud domain unauthorized response a status code equal to that given
func (o *PostCloudDomainUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the post cloud domain unauthorized response
func (o *PostCloudDomainUnauthorized) Code() int {
	return 401
}

func (o *PostCloudDomainUnauthorized) Error() string {
	return fmt.Sprintf("[POST /cloud/domain][%d] postCloudDomainUnauthorized  %+v", 401, o.Payload)
}

func (o *PostCloudDomainUnauthorized) String() string {
	return fmt.Sprintf("[POST /cloud/domain][%d] postCloudDomainUnauthorized  %+v", 401, o.Payload)
}

func (o *PostCloudDomainUnauthorized) GetPayload() string {
	return o.Payload
}

func (o *PostCloudDomainUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostCloudDomainNotFound creates a PostCloudDomainNotFound with default headers values
func NewPostCloudDomainNotFound() *PostCloudDomainNotFound {
	return &PostCloudDomainNotFound{}
}

/*
PostCloudDomainNotFound describes a response with status code 404, with default header values.

Not Found
*/
type PostCloudDomainNotFound struct {
	Payload string
}

// IsSuccess returns true when this post cloud domain not found response has a 2xx status code
func (o *PostCloudDomainNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post cloud domain not found response has a 3xx status code
func (o *PostCloudDomainNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post cloud domain not found response has a 4xx status code
func (o *PostCloudDomainNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this post cloud domain not found response has a 5xx status code
func (o *PostCloudDomainNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this post cloud domain not found response a status code equal to that given
func (o *PostCloudDomainNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the post cloud domain not found response
func (o *PostCloudDomainNotFound) Code() int {
	return 404
}

func (o *PostCloudDomainNotFound) Error() string {
	return fmt.Sprintf("[POST /cloud/domain][%d] postCloudDomainNotFound  %+v", 404, o.Payload)
}

func (o *PostCloudDomainNotFound) String() string {
	return fmt.Sprintf("[POST /cloud/domain][%d] postCloudDomainNotFound  %+v", 404, o.Payload)
}

func (o *PostCloudDomainNotFound) GetPayload() string {
	return o.Payload
}

func (o *PostCloudDomainNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostCloudDomainPreconditionFailed creates a PostCloudDomainPreconditionFailed with default headers values
func NewPostCloudDomainPreconditionFailed() *PostCloudDomainPreconditionFailed {
	return &PostCloudDomainPreconditionFailed{}
}

/*
PostCloudDomainPreconditionFailed describes a response with status code 412, with default header values.

Precondition Failed
*/
type PostCloudDomainPreconditionFailed struct {
	Payload string
}

// IsSuccess returns true when this post cloud domain precondition failed response has a 2xx status code
func (o *PostCloudDomainPreconditionFailed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post cloud domain precondition failed response has a 3xx status code
func (o *PostCloudDomainPreconditionFailed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post cloud domain precondition failed response has a 4xx status code
func (o *PostCloudDomainPreconditionFailed) IsClientError() bool {
	return true
}

// IsServerError returns true when this post cloud domain precondition failed response has a 5xx status code
func (o *PostCloudDomainPreconditionFailed) IsServerError() bool {
	return false
}

// IsCode returns true when this post cloud domain precondition failed response a status code equal to that given
func (o *PostCloudDomainPreconditionFailed) IsCode(code int) bool {
	return code == 412
}

// Code gets the status code for the post cloud domain precondition failed response
func (o *PostCloudDomainPreconditionFailed) Code() int {
	return 412
}

func (o *PostCloudDomainPreconditionFailed) Error() string {
	return fmt.Sprintf("[POST /cloud/domain][%d] postCloudDomainPreconditionFailed  %+v", 412, o.Payload)
}

func (o *PostCloudDomainPreconditionFailed) String() string {
	return fmt.Sprintf("[POST /cloud/domain][%d] postCloudDomainPreconditionFailed  %+v", 412, o.Payload)
}

func (o *PostCloudDomainPreconditionFailed) GetPayload() string {
	return o.Payload
}

func (o *PostCloudDomainPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostCloudDomainInternalServerError creates a PostCloudDomainInternalServerError with default headers values
func NewPostCloudDomainInternalServerError() *PostCloudDomainInternalServerError {
	return &PostCloudDomainInternalServerError{}
}

/*
PostCloudDomainInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type PostCloudDomainInternalServerError struct {
	Payload string
}

// IsSuccess returns true when this post cloud domain internal server error response has a 2xx status code
func (o *PostCloudDomainInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post cloud domain internal server error response has a 3xx status code
func (o *PostCloudDomainInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post cloud domain internal server error response has a 4xx status code
func (o *PostCloudDomainInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this post cloud domain internal server error response has a 5xx status code
func (o *PostCloudDomainInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this post cloud domain internal server error response a status code equal to that given
func (o *PostCloudDomainInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the post cloud domain internal server error response
func (o *PostCloudDomainInternalServerError) Code() int {
	return 500
}

func (o *PostCloudDomainInternalServerError) Error() string {
	return fmt.Sprintf("[POST /cloud/domain][%d] postCloudDomainInternalServerError  %+v", 500, o.Payload)
}

func (o *PostCloudDomainInternalServerError) String() string {
	return fmt.Sprintf("[POST /cloud/domain][%d] postCloudDomainInternalServerError  %+v", 500, o.Payload)
}

func (o *PostCloudDomainInternalServerError) GetPayload() string {
	return o.Payload
}

func (o *PostCloudDomainInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
