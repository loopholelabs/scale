// Code generated by go-swagger; DO NOT EDIT.

package cloud

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new cloud API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for cloud API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteCloudDeploymentIdentifier(params *DeleteCloudDeploymentIdentifierParams, opts ...ClientOption) (*DeleteCloudDeploymentIdentifierOK, error)

	DeleteDomainDomain(params *DeleteDomainDomainParams, opts ...ClientOption) (*DeleteDomainDomainOK, error)

	GetCloudDeployment(params *GetCloudDeploymentParams, opts ...ClientOption) (*GetCloudDeploymentOK, error)

	GetDomain(params *GetDomainParams, opts ...ClientOption) (*GetDomainOK, error)

	GetDomainDomain(params *GetDomainDomainParams, opts ...ClientOption) (*GetDomainDomainOK, error)

	PostCloudDeployment(params *PostCloudDeploymentParams, opts ...ClientOption) (*PostCloudDeploymentOK, error)

	PostCloudDetach(params *PostCloudDetachParams, opts ...ClientOption) (*PostCloudDetachOK, error)

	PostCloudDomain(params *PostCloudDomainParams, opts ...ClientOption) (*PostCloudDomainOK, error)

	PostCloudDomainAttach(params *PostCloudDomainAttachParams, opts ...ClientOption) (*PostCloudDomainAttachOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteCloudDeploymentIdentifier Deletes a deployment
*/
func (a *Client) DeleteCloudDeploymentIdentifier(params *DeleteCloudDeploymentIdentifierParams, opts ...ClientOption) (*DeleteCloudDeploymentIdentifierOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCloudDeploymentIdentifierParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteCloudDeploymentIdentifier",
		Method:             "DELETE",
		PathPattern:        "/cloud/deployment/{identifier}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteCloudDeploymentIdentifierReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteCloudDeploymentIdentifierOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteCloudDeploymentIdentifier: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteDomainDomain Deletes a domain.
*/
func (a *Client) DeleteDomainDomain(params *DeleteDomainDomainParams, opts ...ClientOption) (*DeleteDomainDomainOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDomainDomainParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteDomainDomain",
		Method:             "DELETE",
		PathPattern:        "/domain/{domain}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteDomainDomainReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteDomainDomainOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteDomainDomain: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetCloudDeployment Lists all available deployments
*/
func (a *Client) GetCloudDeployment(params *GetCloudDeploymentParams, opts ...ClientOption) (*GetCloudDeploymentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCloudDeploymentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetCloudDeployment",
		Method:             "GET",
		PathPattern:        "/cloud/deployment",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCloudDeploymentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCloudDeploymentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetCloudDeployment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetDomain Lists all domains.
*/
func (a *Client) GetDomain(params *GetDomainParams, opts ...ClientOption) (*GetDomainOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDomainParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetDomain",
		Method:             "GET",
		PathPattern:        "/domain",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDomainReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDomainOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetDomain: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetDomainDomain Gets the current status of a domain.
*/
func (a *Client) GetDomainDomain(params *GetDomainDomainParams, opts ...ClientOption) (*GetDomainDomainOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDomainDomainParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetDomainDomain",
		Method:             "GET",
		PathPattern:        "/domain/{domain}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDomainDomainReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDomainDomainOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetDomainDomain: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostCloudDeployment Creates a new deployment from a set of scale functions that have already been created in the registry. If the scale functions are not public or if their given organizations do not match the organization that this session is scoped to, an error will be returned.
*/
func (a *Client) PostCloudDeployment(params *PostCloudDeploymentParams, opts ...ClientOption) (*PostCloudDeploymentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCloudDeploymentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostCloudDeployment",
		Method:             "POST",
		PathPattern:        "/cloud/deployment",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostCloudDeploymentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostCloudDeploymentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostCloudDeployment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostCloudDetach Detaches a domain from an cloud function
*/
func (a *Client) PostCloudDetach(params *PostCloudDetachParams, opts ...ClientOption) (*PostCloudDetachOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCloudDetachParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostCloudDetach",
		Method:             "POST",
		PathPattern:        "/cloud/detach",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostCloudDetachReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostCloudDetachOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostCloudDetach: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostCloudDomain Creates a new domain.
*/
func (a *Client) PostCloudDomain(params *PostCloudDomainParams, opts ...ClientOption) (*PostCloudDomainOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCloudDomainParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostCloudDomain",
		Method:             "POST",
		PathPattern:        "/cloud/domain",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostCloudDomainReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostCloudDomainOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostCloudDomain: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostCloudDomainAttach Attaches an existing domain to an existing function deployment
*/
func (a *Client) PostCloudDomainAttach(params *PostCloudDomainAttachParams, opts ...ClientOption) (*PostCloudDomainAttachOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCloudDomainAttachParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostCloudDomainAttach",
		Method:             "POST",
		PathPattern:        "/cloud/domain/attach",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostCloudDomainAttachReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostCloudDomainAttachOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostCloudDomainAttach: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
