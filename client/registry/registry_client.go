// Code generated by go-swagger; DO NOT EDIT.

package registry

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new registry API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for registry API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteRegistryFunctionNameTag(params *DeleteRegistryFunctionNameTagParams, opts ...ClientOption) (*DeleteRegistryFunctionNameTagOK, error)

	GetRegistryFunctionOrg(params *GetRegistryFunctionOrgParams, opts ...ClientOption) (*GetRegistryFunctionOrgOK, error)

	GetRegistryFunctionOrgNameTag(params *GetRegistryFunctionOrgNameTagParams, opts ...ClientOption) (*GetRegistryFunctionOrgNameTagOK, error)

	PostRegistryFunction(params *PostRegistryFunctionParams, opts ...ClientOption) (*PostRegistryFunctionOK, error)

	PostRegistrySignature(params *PostRegistrySignatureParams, opts ...ClientOption) (*PostRegistrySignatureOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteRegistryFunctionNameTag Deletes a function given its `name` and `tag`. The function must be a part of the same org that the session is scoped to.
*/
func (a *Client) DeleteRegistryFunctionNameTag(params *DeleteRegistryFunctionNameTagParams, opts ...ClientOption) (*DeleteRegistryFunctionNameTagOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRegistryFunctionNameTagParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteRegistryFunctionNameTag",
		Method:             "DELETE",
		PathPattern:        "/registry/function/{name}/{tag}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteRegistryFunctionNameTagReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteRegistryFunctionNameTagOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteRegistryFunctionNameTag: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRegistryFunctionOrg Lists all the functions in the given `org`. If the session is scoped to the same `org`, functions that are not public will be returned, otherwise only public functions will be returned.
*/
func (a *Client) GetRegistryFunctionOrg(params *GetRegistryFunctionOrgParams, opts ...ClientOption) (*GetRegistryFunctionOrgOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRegistryFunctionOrgParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRegistryFunctionOrg",
		Method:             "GET",
		PathPattern:        "/registry/function/{org}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRegistryFunctionOrgReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRegistryFunctionOrgOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRegistryFunctionOrg: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRegistryFunctionOrgNameTag Retrieves a function from the given `org` given its `name` and `tag`. If the session is scoped to the same `org`, functions that are not public will be returned, otherwise only public functions will be returned.
*/
func (a *Client) GetRegistryFunctionOrgNameTag(params *GetRegistryFunctionOrgNameTagParams, opts ...ClientOption) (*GetRegistryFunctionOrgNameTagOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRegistryFunctionOrgNameTagParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRegistryFunctionOrgNameTag",
		Method:             "GET",
		PathPattern:        "/registry/function/{org}/{name}/{tag}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRegistryFunctionOrgNameTagReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRegistryFunctionOrgNameTagOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRegistryFunctionOrgNameTag: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostRegistryFunction Uploads a function to the registry
*/
func (a *Client) PostRegistryFunction(params *PostRegistryFunctionParams, opts ...ClientOption) (*PostRegistryFunctionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRegistryFunctionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostRegistryFunction",
		Method:             "POST",
		PathPattern:        "/registry/function",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostRegistryFunctionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRegistryFunctionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRegistryFunction: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostRegistrySignature Creates a new signature. If the session is scoped to an organization, the signature will be created in that `organization`, otherwise the signature will be created to the user's default `organization`.
*/
func (a *Client) PostRegistrySignature(params *PostRegistrySignatureParams, opts ...ClientOption) (*PostRegistrySignatureOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRegistrySignatureParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostRegistrySignature",
		Method:             "POST",
		PathPattern:        "/registry/signature",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostRegistrySignatureReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRegistrySignatureOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRegistrySignature: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
