// Code generated by go-swagger; DO NOT EDIT.

package registry

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewPostRegistryFunctionParams creates a new PostRegistryFunctionParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPostRegistryFunctionParams() *PostRegistryFunctionParams {
	return &PostRegistryFunctionParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPostRegistryFunctionParamsWithTimeout creates a new PostRegistryFunctionParams object
// with the ability to set a timeout on a request.
func NewPostRegistryFunctionParamsWithTimeout(timeout time.Duration) *PostRegistryFunctionParams {
	return &PostRegistryFunctionParams{
		timeout: timeout,
	}
}

// NewPostRegistryFunctionParamsWithContext creates a new PostRegistryFunctionParams object
// with the ability to set a context for a request.
func NewPostRegistryFunctionParamsWithContext(ctx context.Context) *PostRegistryFunctionParams {
	return &PostRegistryFunctionParams{
		Context: ctx,
	}
}

// NewPostRegistryFunctionParamsWithHTTPClient creates a new PostRegistryFunctionParams object
// with the ability to set a custom HTTPClient for a request.
func NewPostRegistryFunctionParamsWithHTTPClient(client *http.Client) *PostRegistryFunctionParams {
	return &PostRegistryFunctionParams{
		HTTPClient: client,
	}
}

/*
PostRegistryFunctionParams contains all the parameters to send to the API endpoint

	for the post registry function operation.

	Typically these are written to a http.Request.
*/
type PostRegistryFunctionParams struct {

	/* Function.

	   function
	*/
	Function runtime.NamedReadCloser

	/* Organization.

	   organization
	*/
	Organization *string

	/* Public.

	   public
	*/
	Public *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the post registry function params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PostRegistryFunctionParams) WithDefaults() *PostRegistryFunctionParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the post registry function params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PostRegistryFunctionParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the post registry function params
func (o *PostRegistryFunctionParams) WithTimeout(timeout time.Duration) *PostRegistryFunctionParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post registry function params
func (o *PostRegistryFunctionParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post registry function params
func (o *PostRegistryFunctionParams) WithContext(ctx context.Context) *PostRegistryFunctionParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post registry function params
func (o *PostRegistryFunctionParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post registry function params
func (o *PostRegistryFunctionParams) WithHTTPClient(client *http.Client) *PostRegistryFunctionParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post registry function params
func (o *PostRegistryFunctionParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFunction adds the function to the post registry function params
func (o *PostRegistryFunctionParams) WithFunction(function runtime.NamedReadCloser) *PostRegistryFunctionParams {
	o.SetFunction(function)
	return o
}

// SetFunction adds the function to the post registry function params
func (o *PostRegistryFunctionParams) SetFunction(function runtime.NamedReadCloser) {
	o.Function = function
}

// WithOrganization adds the organization to the post registry function params
func (o *PostRegistryFunctionParams) WithOrganization(organization *string) *PostRegistryFunctionParams {
	o.SetOrganization(organization)
	return o
}

// SetOrganization adds the organization to the post registry function params
func (o *PostRegistryFunctionParams) SetOrganization(organization *string) {
	o.Organization = organization
}

// WithPublic adds the public to the post registry function params
func (o *PostRegistryFunctionParams) WithPublic(public *bool) *PostRegistryFunctionParams {
	o.SetPublic(public)
	return o
}

// SetPublic adds the public to the post registry function params
func (o *PostRegistryFunctionParams) SetPublic(public *bool) {
	o.Public = public
}

// WriteToRequest writes these params to a swagger request
func (o *PostRegistryFunctionParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	// form file param function
	if err := r.SetFileParam("function", o.Function); err != nil {
		return err
	}

	if o.Organization != nil {

		// form param organization
		var frOrganization string
		if o.Organization != nil {
			frOrganization = *o.Organization
		}
		fOrganization := frOrganization
		if fOrganization != "" {
			if err := r.SetFormParam("organization", fOrganization); err != nil {
				return err
			}
		}
	}

	if o.Public != nil {

		// form param public
		var frPublic bool
		if o.Public != nil {
			frPublic = *o.Public
		}
		fPublic := swag.FormatBool(frPublic)
		if fPublic != "" {
			if err := r.SetFormParam("public", fPublic); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
