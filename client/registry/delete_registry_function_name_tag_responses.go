// Code generated by go-swagger; DO NOT EDIT.

package registry

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// DeleteRegistryFunctionNameTagReader is a Reader for the DeleteRegistryFunctionNameTag structure.
type DeleteRegistryFunctionNameTagReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteRegistryFunctionNameTagReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteRegistryFunctionNameTagOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteRegistryFunctionNameTagBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDeleteRegistryFunctionNameTagUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteRegistryFunctionNameTagNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteRegistryFunctionNameTagInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /registry/function/{name}/{tag}] DeleteRegistryFunctionNameTag", response, response.Code())
	}
}

// NewDeleteRegistryFunctionNameTagOK creates a DeleteRegistryFunctionNameTagOK with default headers values
func NewDeleteRegistryFunctionNameTagOK() *DeleteRegistryFunctionNameTagOK {
	return &DeleteRegistryFunctionNameTagOK{}
}

/*
DeleteRegistryFunctionNameTagOK describes a response with status code 200, with default header values.

OK
*/
type DeleteRegistryFunctionNameTagOK struct {
	Payload string
}

// IsSuccess returns true when this delete registry function name tag o k response has a 2xx status code
func (o *DeleteRegistryFunctionNameTagOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete registry function name tag o k response has a 3xx status code
func (o *DeleteRegistryFunctionNameTagOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete registry function name tag o k response has a 4xx status code
func (o *DeleteRegistryFunctionNameTagOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete registry function name tag o k response has a 5xx status code
func (o *DeleteRegistryFunctionNameTagOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete registry function name tag o k response a status code equal to that given
func (o *DeleteRegistryFunctionNameTagOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete registry function name tag o k response
func (o *DeleteRegistryFunctionNameTagOK) Code() int {
	return 200
}

func (o *DeleteRegistryFunctionNameTagOK) Error() string {
	return fmt.Sprintf("[DELETE /registry/function/{name}/{tag}][%d] deleteRegistryFunctionNameTagOK  %+v", 200, o.Payload)
}

func (o *DeleteRegistryFunctionNameTagOK) String() string {
	return fmt.Sprintf("[DELETE /registry/function/{name}/{tag}][%d] deleteRegistryFunctionNameTagOK  %+v", 200, o.Payload)
}

func (o *DeleteRegistryFunctionNameTagOK) GetPayload() string {
	return o.Payload
}

func (o *DeleteRegistryFunctionNameTagOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteRegistryFunctionNameTagBadRequest creates a DeleteRegistryFunctionNameTagBadRequest with default headers values
func NewDeleteRegistryFunctionNameTagBadRequest() *DeleteRegistryFunctionNameTagBadRequest {
	return &DeleteRegistryFunctionNameTagBadRequest{}
}

/*
DeleteRegistryFunctionNameTagBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type DeleteRegistryFunctionNameTagBadRequest struct {
	Payload string
}

// IsSuccess returns true when this delete registry function name tag bad request response has a 2xx status code
func (o *DeleteRegistryFunctionNameTagBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete registry function name tag bad request response has a 3xx status code
func (o *DeleteRegistryFunctionNameTagBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete registry function name tag bad request response has a 4xx status code
func (o *DeleteRegistryFunctionNameTagBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete registry function name tag bad request response has a 5xx status code
func (o *DeleteRegistryFunctionNameTagBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete registry function name tag bad request response a status code equal to that given
func (o *DeleteRegistryFunctionNameTagBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the delete registry function name tag bad request response
func (o *DeleteRegistryFunctionNameTagBadRequest) Code() int {
	return 400
}

func (o *DeleteRegistryFunctionNameTagBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /registry/function/{name}/{tag}][%d] deleteRegistryFunctionNameTagBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteRegistryFunctionNameTagBadRequest) String() string {
	return fmt.Sprintf("[DELETE /registry/function/{name}/{tag}][%d] deleteRegistryFunctionNameTagBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteRegistryFunctionNameTagBadRequest) GetPayload() string {
	return o.Payload
}

func (o *DeleteRegistryFunctionNameTagBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteRegistryFunctionNameTagUnauthorized creates a DeleteRegistryFunctionNameTagUnauthorized with default headers values
func NewDeleteRegistryFunctionNameTagUnauthorized() *DeleteRegistryFunctionNameTagUnauthorized {
	return &DeleteRegistryFunctionNameTagUnauthorized{}
}

/*
DeleteRegistryFunctionNameTagUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type DeleteRegistryFunctionNameTagUnauthorized struct {
	Payload string
}

// IsSuccess returns true when this delete registry function name tag unauthorized response has a 2xx status code
func (o *DeleteRegistryFunctionNameTagUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete registry function name tag unauthorized response has a 3xx status code
func (o *DeleteRegistryFunctionNameTagUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete registry function name tag unauthorized response has a 4xx status code
func (o *DeleteRegistryFunctionNameTagUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete registry function name tag unauthorized response has a 5xx status code
func (o *DeleteRegistryFunctionNameTagUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete registry function name tag unauthorized response a status code equal to that given
func (o *DeleteRegistryFunctionNameTagUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the delete registry function name tag unauthorized response
func (o *DeleteRegistryFunctionNameTagUnauthorized) Code() int {
	return 401
}

func (o *DeleteRegistryFunctionNameTagUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /registry/function/{name}/{tag}][%d] deleteRegistryFunctionNameTagUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteRegistryFunctionNameTagUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /registry/function/{name}/{tag}][%d] deleteRegistryFunctionNameTagUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteRegistryFunctionNameTagUnauthorized) GetPayload() string {
	return o.Payload
}

func (o *DeleteRegistryFunctionNameTagUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteRegistryFunctionNameTagNotFound creates a DeleteRegistryFunctionNameTagNotFound with default headers values
func NewDeleteRegistryFunctionNameTagNotFound() *DeleteRegistryFunctionNameTagNotFound {
	return &DeleteRegistryFunctionNameTagNotFound{}
}

/*
DeleteRegistryFunctionNameTagNotFound describes a response with status code 404, with default header values.

Not Found
*/
type DeleteRegistryFunctionNameTagNotFound struct {
	Payload string
}

// IsSuccess returns true when this delete registry function name tag not found response has a 2xx status code
func (o *DeleteRegistryFunctionNameTagNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete registry function name tag not found response has a 3xx status code
func (o *DeleteRegistryFunctionNameTagNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete registry function name tag not found response has a 4xx status code
func (o *DeleteRegistryFunctionNameTagNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete registry function name tag not found response has a 5xx status code
func (o *DeleteRegistryFunctionNameTagNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete registry function name tag not found response a status code equal to that given
func (o *DeleteRegistryFunctionNameTagNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete registry function name tag not found response
func (o *DeleteRegistryFunctionNameTagNotFound) Code() int {
	return 404
}

func (o *DeleteRegistryFunctionNameTagNotFound) Error() string {
	return fmt.Sprintf("[DELETE /registry/function/{name}/{tag}][%d] deleteRegistryFunctionNameTagNotFound  %+v", 404, o.Payload)
}

func (o *DeleteRegistryFunctionNameTagNotFound) String() string {
	return fmt.Sprintf("[DELETE /registry/function/{name}/{tag}][%d] deleteRegistryFunctionNameTagNotFound  %+v", 404, o.Payload)
}

func (o *DeleteRegistryFunctionNameTagNotFound) GetPayload() string {
	return o.Payload
}

func (o *DeleteRegistryFunctionNameTagNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteRegistryFunctionNameTagInternalServerError creates a DeleteRegistryFunctionNameTagInternalServerError with default headers values
func NewDeleteRegistryFunctionNameTagInternalServerError() *DeleteRegistryFunctionNameTagInternalServerError {
	return &DeleteRegistryFunctionNameTagInternalServerError{}
}

/*
DeleteRegistryFunctionNameTagInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type DeleteRegistryFunctionNameTagInternalServerError struct {
	Payload string
}

// IsSuccess returns true when this delete registry function name tag internal server error response has a 2xx status code
func (o *DeleteRegistryFunctionNameTagInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete registry function name tag internal server error response has a 3xx status code
func (o *DeleteRegistryFunctionNameTagInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete registry function name tag internal server error response has a 4xx status code
func (o *DeleteRegistryFunctionNameTagInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete registry function name tag internal server error response has a 5xx status code
func (o *DeleteRegistryFunctionNameTagInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete registry function name tag internal server error response a status code equal to that given
func (o *DeleteRegistryFunctionNameTagInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the delete registry function name tag internal server error response
func (o *DeleteRegistryFunctionNameTagInternalServerError) Code() int {
	return 500
}

func (o *DeleteRegistryFunctionNameTagInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /registry/function/{name}/{tag}][%d] deleteRegistryFunctionNameTagInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteRegistryFunctionNameTagInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /registry/function/{name}/{tag}][%d] deleteRegistryFunctionNameTagInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteRegistryFunctionNameTagInternalServerError) GetPayload() string {
	return o.Payload
}

func (o *DeleteRegistryFunctionNameTagInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
