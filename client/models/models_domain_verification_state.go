// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ModelsDomainVerificationState models domain verification state
//
// swagger:model models.DomainVerificationState
type ModelsDomainVerificationState string

func NewModelsDomainVerificationState(value ModelsDomainVerificationState) *ModelsDomainVerificationState {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ModelsDomainVerificationState.
func (m ModelsDomainVerificationState) Pointer() *ModelsDomainVerificationState {
	return &m
}

const (

	// ModelsDomainVerificationStatePending captures enum value "pending"
	ModelsDomainVerificationStatePending ModelsDomainVerificationState = "pending"

	// ModelsDomainVerificationStateIssuing captures enum value "issuing"
	ModelsDomainVerificationStateIssuing ModelsDomainVerificationState = "issuing"

	// ModelsDomainVerificationStateReady captures enum value "ready"
	ModelsDomainVerificationStateReady ModelsDomainVerificationState = "ready"

	// ModelsDomainVerificationStateAttached captures enum value "attached"
	ModelsDomainVerificationStateAttached ModelsDomainVerificationState = "attached"
)

// for schema
var modelsDomainVerificationStateEnum []interface{}

func init() {
	var res []ModelsDomainVerificationState
	if err := json.Unmarshal([]byte(`["pending","issuing","ready","attached"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		modelsDomainVerificationStateEnum = append(modelsDomainVerificationStateEnum, v)
	}
}

func (m ModelsDomainVerificationState) validateModelsDomainVerificationStateEnum(path, location string, value ModelsDomainVerificationState) error {
	if err := validate.EnumCase(path, location, value, modelsDomainVerificationStateEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this models domain verification state
func (m ModelsDomainVerificationState) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateModelsDomainVerificationStateEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this models domain verification state based on context it is used
func (m ModelsDomainVerificationState) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
