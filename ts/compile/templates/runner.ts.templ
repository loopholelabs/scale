/*
	Copyright 2022 Loophole Labs
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at
		   http://www.apache.org/licenses/LICENSE-2.0
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
*/

declare var scale: ScaleFunction;     // This should be defined in the global scope.

// First lets setup TextEncode and TextDecoder to ensure they're available for polyglot.
export class TextEncoder {
  public encoding = "utf-8";

  constructor() {
  }

  public encodeInto(s: string, u: Uint8Array): any {
    console.log("TODO: encodeInto unsupported");
    return {read: 0, written: 0};
  }

  public encode(s: string): Uint8Array {
    var octets = [];
    var length = s.length;
    var i = 0;
    while (i < length) {
      var codePoint = s.codePointAt(i);
      if (codePoint!=undefined) {
        var c = 0;
        var bits = 0;
        if (codePoint <= 0x0000007F) {
          c = 0;
          bits = 0x00;
        } else if (codePoint <= 0x000007FF) {
          c = 6;
          bits = 0xC0;
        } else if (codePoint <= 0x0000FFFF) {
          c = 12;
          bits = 0xE0;
        } else if (codePoint <= 0x001FFFFF) {
          c = 18;
          bits = 0xF0;
        }
        octets.push(bits | (codePoint >> c));
        c -= 6;
        while (c >= 0) {
          octets.push(0x80 | ((codePoint >> c) & 0x3F));
          c -= 6;
        }
        i += codePoint >= 0x10000 ? 2 : 1;
      }
    }
    return new Uint8Array(octets);
  }
}

export class TextDecoder {
  public encoding = "utf-8";
  public fatal = false;
  public ignoreBOM = false;

  constructor() {
  }

  public decode(a: any): string {
    if (a instanceof Uint8Array) {
      return this.decodeUint8Array(a);
    } else {
      console.log("TODO: TextDecoder called with " + typeof(a), a)
      return "";
    }
  }

  private decodeUint8Array(a: Uint8Array): string {
    var string = "";
    var i = 0;
    while (i < a.length) {
      var octet = a[i];
      var bytesNeeded = 0;
      var codePoint = 0;
      if (octet <= 0x7F) {
        bytesNeeded = 0;
        codePoint = octet & 0xFF;
      } else if (octet <= 0xDF) {
        bytesNeeded = 1;
        codePoint = octet & 0x1F;
      } else if (octet <= 0xEF) {
        bytesNeeded = 2;
        codePoint = octet & 0x0F;
      } else if (octet <= 0xF4) {
        bytesNeeded = 3;
        codePoint = octet & 0x07;
      }
      if (a.length - i - bytesNeeded > 0) {
        var k = 0;
        while (k < bytesNeeded) {
          octet = a[i + k + 1];
          codePoint = (codePoint << 6) | (octet & 0x3F);
          k += 1;
        }
      } else {
        codePoint = 0xFFFD;
        bytesNeeded = a.length - i;
      }
      string += String.fromCodePoint(codePoint);
      i += bytesNeeded + 1;
    }
    return string
  }
}


(global as any).TextEncoder = TextEncoder;
(global as any).TextDecoder = TextDecoder;

import { Resize, GuestContext } from "@loopholelabs/{{ .signature }}";

// Create a new dummy GuestContext.
var ctx = new GuestContext();

export type ScaleFunction = (a: GuestContext) => GuestContext;

// Any global init can be done here
function mainFunction() {
}

// Our own run function wrapper
function runFunction(): bigint {
  ctx.FromReadBuffer();   // Read from the read buffer.

  try {
    scale(ctx);

    let [ptr, len] = ctx.ToWriteBuffer();
    return BigInt(ptr) << BigInt(32) | BigInt(len);
  } catch(e) {
    let [ptr, len] = ctx.ErrorWriteBuffer(e as Error);
    return BigInt(ptr) << BigInt(32) | BigInt(len);
  }
}

// Route the resize through to the signature
function resizeFunction(size: number): number {
  return Resize(size);
}

(global as any).Exports = {
  main: mainFunction,
  run: runFunction,
  resize: resizeFunction
}
