// Code generated by go-swagger; DO NOT EDIT.

package cloud

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/loopholelabs/scale/cli/client/models"
)

// GetDomainDomainReader is a Reader for the GetDomainDomain structure.
type GetDomainDomainReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetDomainDomainReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetDomainDomainOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetDomainDomainBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetDomainDomainUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetDomainDomainNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetDomainDomainInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /domain/{domain}] GetDomainDomain", response, response.Code())
	}
}

// NewGetDomainDomainOK creates a GetDomainDomainOK with default headers values
func NewGetDomainDomainOK() *GetDomainDomainOK {
	return &GetDomainDomainOK{}
}

/*
GetDomainDomainOK describes a response with status code 200, with default header values.

OK
*/
type GetDomainDomainOK struct {
	Payload *models.ModelsDomainResponse
}

// IsSuccess returns true when this get domain domain o k response has a 2xx status code
func (o *GetDomainDomainOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get domain domain o k response has a 3xx status code
func (o *GetDomainDomainOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get domain domain o k response has a 4xx status code
func (o *GetDomainDomainOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get domain domain o k response has a 5xx status code
func (o *GetDomainDomainOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get domain domain o k response a status code equal to that given
func (o *GetDomainDomainOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get domain domain o k response
func (o *GetDomainDomainOK) Code() int {
	return 200
}

func (o *GetDomainDomainOK) Error() string {
	return fmt.Sprintf("[GET /domain/{domain}][%d] getDomainDomainOK  %+v", 200, o.Payload)
}

func (o *GetDomainDomainOK) String() string {
	return fmt.Sprintf("[GET /domain/{domain}][%d] getDomainDomainOK  %+v", 200, o.Payload)
}

func (o *GetDomainDomainOK) GetPayload() *models.ModelsDomainResponse {
	return o.Payload
}

func (o *GetDomainDomainOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsDomainResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDomainDomainBadRequest creates a GetDomainDomainBadRequest with default headers values
func NewGetDomainDomainBadRequest() *GetDomainDomainBadRequest {
	return &GetDomainDomainBadRequest{}
}

/*
GetDomainDomainBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetDomainDomainBadRequest struct {
	Payload string
}

// IsSuccess returns true when this get domain domain bad request response has a 2xx status code
func (o *GetDomainDomainBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get domain domain bad request response has a 3xx status code
func (o *GetDomainDomainBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get domain domain bad request response has a 4xx status code
func (o *GetDomainDomainBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get domain domain bad request response has a 5xx status code
func (o *GetDomainDomainBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get domain domain bad request response a status code equal to that given
func (o *GetDomainDomainBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get domain domain bad request response
func (o *GetDomainDomainBadRequest) Code() int {
	return 400
}

func (o *GetDomainDomainBadRequest) Error() string {
	return fmt.Sprintf("[GET /domain/{domain}][%d] getDomainDomainBadRequest  %+v", 400, o.Payload)
}

func (o *GetDomainDomainBadRequest) String() string {
	return fmt.Sprintf("[GET /domain/{domain}][%d] getDomainDomainBadRequest  %+v", 400, o.Payload)
}

func (o *GetDomainDomainBadRequest) GetPayload() string {
	return o.Payload
}

func (o *GetDomainDomainBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDomainDomainUnauthorized creates a GetDomainDomainUnauthorized with default headers values
func NewGetDomainDomainUnauthorized() *GetDomainDomainUnauthorized {
	return &GetDomainDomainUnauthorized{}
}

/*
GetDomainDomainUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetDomainDomainUnauthorized struct {
	Payload string
}

// IsSuccess returns true when this get domain domain unauthorized response has a 2xx status code
func (o *GetDomainDomainUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get domain domain unauthorized response has a 3xx status code
func (o *GetDomainDomainUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get domain domain unauthorized response has a 4xx status code
func (o *GetDomainDomainUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get domain domain unauthorized response has a 5xx status code
func (o *GetDomainDomainUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get domain domain unauthorized response a status code equal to that given
func (o *GetDomainDomainUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get domain domain unauthorized response
func (o *GetDomainDomainUnauthorized) Code() int {
	return 401
}

func (o *GetDomainDomainUnauthorized) Error() string {
	return fmt.Sprintf("[GET /domain/{domain}][%d] getDomainDomainUnauthorized  %+v", 401, o.Payload)
}

func (o *GetDomainDomainUnauthorized) String() string {
	return fmt.Sprintf("[GET /domain/{domain}][%d] getDomainDomainUnauthorized  %+v", 401, o.Payload)
}

func (o *GetDomainDomainUnauthorized) GetPayload() string {
	return o.Payload
}

func (o *GetDomainDomainUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDomainDomainNotFound creates a GetDomainDomainNotFound with default headers values
func NewGetDomainDomainNotFound() *GetDomainDomainNotFound {
	return &GetDomainDomainNotFound{}
}

/*
GetDomainDomainNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetDomainDomainNotFound struct {
	Payload string
}

// IsSuccess returns true when this get domain domain not found response has a 2xx status code
func (o *GetDomainDomainNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get domain domain not found response has a 3xx status code
func (o *GetDomainDomainNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get domain domain not found response has a 4xx status code
func (o *GetDomainDomainNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get domain domain not found response has a 5xx status code
func (o *GetDomainDomainNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get domain domain not found response a status code equal to that given
func (o *GetDomainDomainNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get domain domain not found response
func (o *GetDomainDomainNotFound) Code() int {
	return 404
}

func (o *GetDomainDomainNotFound) Error() string {
	return fmt.Sprintf("[GET /domain/{domain}][%d] getDomainDomainNotFound  %+v", 404, o.Payload)
}

func (o *GetDomainDomainNotFound) String() string {
	return fmt.Sprintf("[GET /domain/{domain}][%d] getDomainDomainNotFound  %+v", 404, o.Payload)
}

func (o *GetDomainDomainNotFound) GetPayload() string {
	return o.Payload
}

func (o *GetDomainDomainNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDomainDomainInternalServerError creates a GetDomainDomainInternalServerError with default headers values
func NewGetDomainDomainInternalServerError() *GetDomainDomainInternalServerError {
	return &GetDomainDomainInternalServerError{}
}

/*
GetDomainDomainInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetDomainDomainInternalServerError struct {
	Payload string
}

// IsSuccess returns true when this get domain domain internal server error response has a 2xx status code
func (o *GetDomainDomainInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get domain domain internal server error response has a 3xx status code
func (o *GetDomainDomainInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get domain domain internal server error response has a 4xx status code
func (o *GetDomainDomainInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get domain domain internal server error response has a 5xx status code
func (o *GetDomainDomainInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get domain domain internal server error response a status code equal to that given
func (o *GetDomainDomainInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get domain domain internal server error response
func (o *GetDomainDomainInternalServerError) Code() int {
	return 500
}

func (o *GetDomainDomainInternalServerError) Error() string {
	return fmt.Sprintf("[GET /domain/{domain}][%d] getDomainDomainInternalServerError  %+v", 500, o.Payload)
}

func (o *GetDomainDomainInternalServerError) String() string {
	return fmt.Sprintf("[GET /domain/{domain}][%d] getDomainDomainInternalServerError  %+v", 500, o.Payload)
}

func (o *GetDomainDomainInternalServerError) GetPayload() string {
	return o.Payload
}

func (o *GetDomainDomainInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
