#![cfg(target_arch = "wasm32")]

#[path = "{{ .path }}"]
mod scale;
use scale::scale;

use {{ .signature }}::context;
use scale_signature::Context;
use wee_alloc;

#[global_allocator]
pub static ALLOC: wee_alloc::WeeAlloc = wee_alloc::WeeAlloc::INIT;

#[cfg_attr(target_arch = "wasm32", export_name = "run")]
#[no_mangle]
pub unsafe extern "C" fn run() -> u64 {
    let mut ctx = context::new();
    let guest_context = ctx.guest_context();
    return match guest_context.from_read_buffer() {
        Some(err) => {
            let (ptr, len) = guest_context.error_write_buffer(err);
            pack_uint32(ptr, len)
        },
        None => {
            return match scale(&mut ctx) {
                Ok(ctx) => {
                    let guest_ctx = ctx.guest_context();
                    let (ptr, len) = guest_ctx.to_write_buffer();
                    pack_uint32(ptr, len)
                },
                Err(err) => {
                    let guest_ctx = ctx.guest_context();
                    let (ptr, len) = guest_ctx.error_write_buffer(err);
                    pack_uint32(ptr, len)
                }
            };
        },
    };
}

#[cfg_attr(target_arch = "wasm32", export_name = "resize")]
#[no_mangle]
pub unsafe extern "C" fn _resize(size: u32) -> *const u8 {
    return {{ .signature }}::guest::resize(size);
}

fn pack_uint32(ptr: u32, len: u32) -> u64 {
    return ((ptr as u64) << 32) | len as u64;
}
